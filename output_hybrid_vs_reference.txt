========== storage_order =============
refpath: branches/hybrid/asuca-kij/HybridSources/storage_order.F90, hfpath: None


Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=116, combined=116, changed=116, unchanged=0, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=116, data_spec=0, other=0)
========== adv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/adv.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/adv.f90
public :: adv_momx, adv_momy, adv_momz, adv_scalar_2d, adv_scalar_3d, calcflxz, calcflxz_1d
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k,i+1,j)) * 0.5_rp
@end parallelRegion
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k,i,j+1)) * 0.5_rp
@end parallelRegion
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k+1,i,j)) * 0.5_rp
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v,
flux_x, flux_y, flux_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v,
flux_x, flux_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x, p, mom
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x, p, mom
@end domainDependant
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y, p, mom
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y, p, mom
@end domainDependant
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, p, mom
@end domainDependant
logical, intent(in):: precip_present
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, p, mom
@end domainDependant
if ( precip_present ) then
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
logical, intent(in):: has_precip
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
flux_z, mom, dt_rk_rest, cfl_reached
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
p
@end domainDependant
if ( has_precip ) then
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
if (cfl_reached) then
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y, flux_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxt,nyt), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxt,nyt), template(TIGHT_STENCIL)}
@end parallelRegion
public :: adv_momx, adv_momy, adv_momz, adv_scalar_2d, adv_scalar_3d, calcflxz, calcflxz_1d
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k,i+1,j)) * 0.5_rp
@end parallelRegion
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k,i,j+1)) * 0.5_rp
@end parallelRegion
integer(4), intent(in) :: is, ie, js, je, ks, ke, nxs, nxe, nys, nye, nzs, nze
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
output, input
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxs:nxe, nys:nye), startAt(is,js), endAt(ie,je), template(TIGHT_STENCIL)}
output(k,i,j) = (input(k,i,j) + input(k+1,i,j)) * 0.5_rp
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v, flux_x, flux_y, flux_z, mom, momz
@end domainDependant
mom(:,:,:) = 0.0_rp
momz(:,:,:) = 0.0_rp
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v, mom_zi_v,
flux_x, flux_y, flux_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, p, mom_xi_v, mom_yi_v,
flux_x, flux_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x, p, mom
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x, p, mom
@end domainDependant
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y, p, mom
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y, p, mom
@end domainDependant
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, p, mom
@end domainDependant
logical, intent(in):: precip_present
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, p, mom
@end domainDependant
if ( precip_present ) then
@parallelRegion{domName(i,j), domSize(ie,je), startAt(is,js), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
logical, intent(in):: has_precip
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
flux_z, mom, dt_rk_rest, cfl_reached
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
p
@end domainDependant
if ( has_precip ) then
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
if (cfl_reached) then
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y, flux_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxt,nyt), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_x, flux_y
@end domainDependant
@parallelRegion{domName(i,j), domSize(nxt,nyt), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=593, combined=581, changed=170, unchanged=411, subroutine_definitions=11, calls=33, imports=5, data_definitions=0, save=0, parameter=0, openmp=0, style=10, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=8, other=102)
========== coriolis =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/coriolis.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/coriolis.f90
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v, tend_mom_y_v, mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
sin_flat
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v, tend_mom_y_v, mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
sin_flat
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=155, combined=134, changed=11, unchanged=123, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=10)
========== curvature =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/curvature.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/curvature.f90
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v, tend_mom_y_v, mom_x_v, mom_y_v, vel_x, vel_y
dxidx_pf, dxidx_uf, dyidy_pf, dyidy_vf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v, tend_mom_y_v, mom_x_v, mom_y_v, vel_x, vel_y
dxidx_pf, dxidx_uf, dyidy_pf, dyidy_vf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=327, combined=281, changed=10, unchanged=271, subroutine_definitions=1, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=8)
========== dynamics =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/dynamics.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/dynamics.f90
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v_rk, vel_x, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_y_v_rk, vel_y, tend_mom_z_v_rk, vel_z,
dens_ptb,
tend_rmpt_ptb_v_rk, mptmp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, qa,
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v
@end domainDependant
end subroutine
integer(4) :: is_present
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, exner, dens_ptb,
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v, rmpt_ptb_v, dens_ptb_v
@end domainDependant
!pgi$r novector
integer(4), intent(in) :: it_calc_sed, it_root_sed
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v, rqnx_v
@end domainDependant
@domainDependant{attribute(autoDom, present)}
mom_zi_v, flux_z, rjd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wdrop_qx, wdrop_qnx,
tend_rqx_v_rk, tend_rqx_v_l,
tend_rqnx_v_rk, tend_rqnx_v_l, tend_precp_qx,
mom_zi_v_work,
dt_sed, dt_rk_sed, dt_rk_rest, cfl_reached,
it_calc_sed, it_root_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
if ( is_rk_run ) then
dts = dt_rk_sed
dts = dt_sed
rqx_v(k,i,j,it_calc_sed) = rqx_v(k,i,j,it_root_sed) + ( tend_rqx_v_sed + tend_rqx_v_rk(k) + tend_rqx_v_l(k)    ) * dts
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
rqnx_v(k,i,j,it_calc_sed) = rqnx_v(k,i,j,it_root_sed) + ( tend_rqnx_v_sed + tend_rqnx_v_rk(k) + tend_rqnx_v_l(k)   ) * dts
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
rqnx_v(k,i,j,it_calc_sed) = 0._rp
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v_rk, vel_x, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_y_v_rk, vel_y, tend_mom_z_v_rk, vel_z,
dens_ptb,
tend_rmpt_ptb_v_rk, mptmp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, qa,
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v
@end domainDependant
end subroutine
integer(4) :: is_present
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, exner, dens_ptb,
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v, rmpt_ptb_v, dens_ptb_v
@end domainDependant
!pgi$r novector
integer(4), intent(in) :: it_calc_sed, it_root_sed
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v, rqnx_v
@end domainDependant
@domainDependant{attribute(autoDom, present)}
mom_zi_v, flux_z, rjd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wdrop_qx, wdrop_qnx,
tend_rqx_v_rk, tend_rqx_v_l,
tend_rqnx_v_rk, tend_rqnx_v_l, tend_precp_qx,
mom_zi_v_work,
dt_sed, dt_rk_sed, dt_rk_rest, cfl_reached,
it_calc_sed, it_root_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
if ( is_rk_run ) then
dts = dt_rk_sed
dts = dt_sed
rqx_v(k,i,j,it_calc_sed) = rqx_v(k,i,j,it_root_sed) + ( tend_rqx_v_sed + tend_rqx_v_rk(k) + tend_rqx_v_l(k)    ) * dts
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( cfl_reached ) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
rqnx_v(k,i,j,it_calc_sed) = rqnx_v(k,i,j,it_root_sed) + ( tend_rqnx_v_sed + tend_rqnx_v_rk(k) + tend_rqnx_v_l(k)   ) * dts
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@exit
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
@exit
rqnx_v(k,i,j,it_calc_sed) = 0._rp
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=331, combined=286, changed=155, unchanged=131, subroutine_definitions=7, calls=22, imports=23, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=6, other=93)
========== hevi =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/hevi.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/hevi.f90
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh
flux_x, flux_y, flux_z
exner,
tend_mom_x_v_l, tend_mom_y_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh
flux_x, flux_y, flux_z,
exner,
tend_mom_x_v_l, tend_mom_y_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u+1,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,0), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
mom_x_v(k,i,j,it_calc) = mom_x_v(k,i,j,it_root) + ( tend_mom_x_v_l(k,i,j) + tend_mom_x_v_s ) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
mom_x_v(k,i,j,it_calc) = mom_x_v(k,i,j,it_root) + tend_mom_x_v_l(k,i,j) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,1), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
mom_y_v(k,i,j,it_calc) = mom_y_v(k,i,j,it_root) + ( tend_mom_y_v_l(k,i,j) + tend_mom_y_v_s ) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
mom_y_v(k,i,j,it_calc) = mom_y_v(k,i,j,it_root) + tend_mom_y_v_l(k,i,j) * dt_rk_s
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present)}
g_flat
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v_rk_s, dens_ptb_v_rk_s, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
dzidz_pf, dzidz_ph, rjd_pf, dzidx_ph, dzidy_ph, jd_uf, jd_vf, rdzidz_ph, rjd_ph,
mptmp, exner,
rmpt_ref_f, pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v, mom_y_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v_rk_s, dens_ptb_v_rk_s, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
dzidz_pf, dzidz_ph, rjd_pf, dzidx_ph, dzidy_ph, jd_uf, jd_vf, rdzidz_ph, rjd_ph,
mptmp, exner,
rmpt_ref_f, pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TEMP), domPP(DOM_TEMP)}
a, b, c, q, mptmp_h, flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, present)}
g_flat
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(0,i,j,it_calc) = - ( dzidx_ph(0,i,j) * ( mom_x_v(1,i-1,j,it_calc) * jd_uf(1,i-1,j) + mom_x_v(1,i,j,it_calc) * jd_uf(1,i  ,j) ) * 0.5_rp + dzidy_ph(0,i,j) * ( mom_y_v(1,i,j-1,it_calc) * jd_vf(1,i,j-1) + mom_y_v(1,i,j,it_calc) * jd_vf(1,i,j  ) ) * 0.5_rp ) * rdzidz_ph(0,i,j) * rjd_ph(0,i,j)
mom_z_v(nz,i,j,it_calc) = 0._rp
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(0,i,j,it_calc) = 0._rp
mom_z_v(nz,i,j,it_calc) = 0._rp
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(k,i,j,it_calc) = mom_z_v(k,i,j,it_root) + dt_rk_s * ( - exner_h * (flux_rmpt_ptb_v(k+1) - flux_rmpt_ptb_v(k)) - (total_tend_dens_ptb_v(k+1)  + total_tend_dens_ptb_v(k)) + tend_mom_z_v_rk(k,i,j) )
mom_z_v(1,i,j,it_calc) = mom_z_v(1,i,j,it_calc) - a(1) * mom_z_v(0,i,j,it_calc)
mom_z_v(1,i,j,it_calc) = mom_z_v(1,i,j,it_calc) / b(1)
mom_z_v(k,i,j,it_calc) = ( mom_z_v(k,i,j,it_calc) - a(k) * mom_z_v(k-1,i,j,it_calc) ) * p
mom_z_v(k,i,j,it_calc) = mom_z_v(k,i,j,it_calc) + q(k) * mom_z_v(k+1,i,j,it_calc)
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
dens_ptb_v(k,i,j,it_calc) = dens_ptb_v(k,i,j,it_root) + ( - ( ( mom_xi_v(k,i,j) - mom_xi_v(k,i-1,j) ) + ( mom_yi_v(k,i,j) - mom_yi_v(k,i,j-1) ) + ( mom_zi_v(k,i,j) - mom_zi_v(k-1,i,j) ) ) + tend_v_rk(k,i,j) + tend_v_rk_s(k,i,j) ) * dt_rk_s
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, tend_v_rk
flux_x, flux_y, flux_z, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rmpt_ptb_v(k,i,j,it_calc) = rmpt_ptb_v(k,i,j,it_root) + ( tend_v_rk_s(k,i,j) + tend_v_rk(k,i,j) ) * dt_rk_s
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
array
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
array(k,i,j) = 0.0d0
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh
flux_x, flux_y, flux_z
exner,
tend_mom_x_v_l, tend_mom_y_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh
flux_x, flux_y, flux_z,
exner,
tend_mom_x_v_l, tend_mom_y_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u+1,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,0), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
mom_x_v(k,i,j,it_calc) = mom_x_v(k,i,j,it_root) + ( tend_mom_x_v_l(k,i,j) + tend_mom_x_v_s ) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx_u,ny), template(TIGHT_STENCIL)}
mom_x_v(k,i,j,it_calc) = mom_x_v(k,i,j,it_root) + tend_mom_x_v_l(k,i,j) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,1), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
mom_y_v(k,i,j,it_calc) = mom_y_v(k,i,j,it_root) + ( tend_mom_y_v_l(k,i,j) + tend_mom_y_v_s ) * dt_rk_s
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny_v), template(TIGHT_STENCIL)}
mom_y_v(k,i,j,it_calc) = mom_y_v(k,i,j,it_root) + tend_mom_y_v_l(k,i,j) * dt_rk_s
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present)}
g_flat
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v_rk_s, dens_ptb_v_rk_s, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
dzidz_pf, dzidz_ph, rjd_pf, dzidx_ph, dzidy_ph, jd_uf, jd_vf, rdzidz_ph, rjd_ph,
mptmp, exner,
rmpt_ref_f, pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v, mom_y_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb_v_rk_s, dens_ptb_v_rk_s, mom_xi_v, mom_yi_v, mom_zi_v, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
dzidz_pf, dzidz_ph, rjd_pf, dzidx_ph, dzidy_ph, jd_uf, jd_vf, rdzidz_ph, rjd_ph,
mptmp, exner,
rmpt_ref_f, pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TEMP), domPP(DOM_TEMP)}
a, b, c, q, mptmp_h, flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, present)}
g_flat
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(0,i,j,it_calc) = - ( dzidx_ph(0,i,j) * ( mom_x_v(1,i-1,j,it_calc) * jd_uf(1,i-1,j) + mom_x_v(1,i,j,it_calc) * jd_uf(1,i  ,j) ) * 0.5_rp + dzidy_ph(0,i,j) * ( mom_y_v(1,i,j-1,it_calc) * jd_vf(1,i,j-1) + mom_y_v(1,i,j,it_calc) * jd_vf(1,i,j  ) ) * 0.5_rp ) * rdzidz_ph(0,i,j) * rjd_ph(0,i,j)
mom_z_v(nz,i,j,it_calc) = 0._rp
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(0,i,j,it_calc) = 0._rp
mom_z_v(nz,i,j,it_calc) = 0._rp
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_z_v(k,i,j,it_calc) = mom_z_v(k,i,j,it_root) + dt_rk_s * ( - exner_h * (flux_rmpt_ptb_v(k+1) - flux_rmpt_ptb_v(k)) - (total_tend_dens_ptb_v(k+1)  + total_tend_dens_ptb_v(k)) + tend_mom_z_v_rk(k,i,j) )
mom_z_v(1,i,j,it_calc) = mom_z_v(1,i,j,it_calc) - a(1) * mom_z_v(0,i,j,it_calc)
mom_z_v(1,i,j,it_calc) = mom_z_v(1,i,j,it_calc) / b(1)
mom_z_v(k,i,j,it_calc) = ( mom_z_v(k,i,j,it_calc) - a(k) * mom_z_v(k-1,i,j,it_calc) ) * p
mom_z_v(k,i,j,it_calc) = mom_z_v(k,i,j,it_calc) + q(k) * mom_z_v(k+1,i,j,it_calc)
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
dens_ptb_v(k,i,j,it_calc) = dens_ptb_v(k,i,j,it_root) + ( - ( ( mom_xi_v(k,i,j) - mom_xi_v(k,i-1,j) ) + ( mom_yi_v(k,i,j) - mom_yi_v(k,i,j-1) ) + ( mom_zi_v(k,i,j) - mom_zi_v(k-1,i,j) ) ) + tend_v_rk(k,i,j) + tend_v_rk_s(k,i,j) ) * dt_rk_s
@end parallelRegion
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, tend_v_rk
flux_x, flux_y, flux_z, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
integer(4), intent(in):: it_calc
integer(4), intent(in):: it_root
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, mptmp, tend_v_rk, tend_v_rk_s
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rmpt_ptb_v(k,i,j,it_calc) = rmpt_ptb_v(k,i,j,it_root) + ( tend_v_rk_s(k,i,j) + tend_v_rk(k,i,j) ) * dt_rk_s
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
array
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
array(k,i,j) = 0.0d0
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1559, combined=1288, changed=188, unchanged=1100, subroutine_definitions=9, calls=6, imports=8, data_definitions=0, save=0, parameter=0, openmp=0, style=5, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=18, other=139)
========== lbc =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/lbc.h90, hfpath: branches/reference/asuca-kij/Src/Util/lbc.f90
public:: lbc_start
@domainDependant{domName(dom1), domSize(0:ktnum), attribute(host)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{domName(dom1), domSize(2), attribute(host)}
iseq_bnd
@end domainDependant
@domainDependant{domName(dom1,dom2), domSize(5,2), attribute(host)}
idate_bnd
@end domainDependant
@domainDependant{domName(k,i,j,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,2), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v_bnd, mom_y_v_bnd, mom_z_v_bnd, dens_ptb_v_bnd, rmpt_ptb_v_bnd, dens_ptb_bnd, vel_x_bnd, vel_y_bnd, vel_z_bnd, mptmp_bnd
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dyidy_vf
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
jd_ph, jd_pf, dens_ref_f, rmpt_ref_f, mpi_calc
@end domainDependant
integer(4) :: is, ie, js, je
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, dens_ref_f_x, dens_ref_f_y, dens_ref_f, jd_pf, jd_uf, jd_vf, dxidx_uf, dyidy_vf,
vel_x_damp, vel_y_damp, vel_z_damp, mptmp_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v_bnd, mom_y_v_bnd, mptmp_bnd, qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
end subroutine
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ptb_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_x_v_bnd,
mom_y_v, mom_y_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is_momx,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dyidy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_x_v_bnd,
mom_y_v, mom_y_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js_momy), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, dens_ptb, rjd_uf, rjd_ph, dzidz_ph, dzidy_ph, dzidx_ph, dens_ref_f, dens_ref_f_x
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(isx,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, dens_ptb, rjd_vf, rjd_ph, dzidz_ph, dzidy_ph, dzidx_ph, dens_ref_f, dens_ref_f_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_y_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,jsy), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ref_f, dens_ref_f, rjd_pf, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v
dens_ptb_v_bnd, rmpt_ptb_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ref_f, dens_ref_f, rjd_pf, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v,
dens_ptb_v_bnd, rmpt_ptb_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
public:: lbc_start
@domainDependant{domName(dom1), domSize(0:ktnum), attribute(host)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{domName(dom1), domSize(2), attribute(host)}
iseq_bnd
@end domainDependant
@domainDependant{domName(dom1,dom2), domSize(5,2), attribute(host)}
idate_bnd
@end domainDependant
@domainDependant{domName(k,i,j,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,2), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v_bnd, mom_y_v_bnd, mom_z_v_bnd, dens_ptb_v_bnd, rmpt_ptb_v_bnd, dens_ptb_bnd, vel_x_bnd, vel_y_bnd, vel_z_bnd, mptmp_bnd
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dyidy_vf
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
jd_ph, jd_pf, dens_ref_f, rmpt_ref_f, mpi_calc
@end domainDependant
integer(4) :: is, ie, js, je
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, host)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, dens_ref_f_x, dens_ref_f_y, dens_ref_f, jd_pf, jd_uf, jd_vf, dxidx_uf, dyidy_vf,
vel_x_damp, vel_y_damp, vel_z_damp, mptmp_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v_bnd, mom_y_v_bnd, mptmp_bnd, qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(1,1), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
end subroutine
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(k,i,j,id,dom1), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e,2), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ptb_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_x_v_bnd,
mom_y_v, mom_y_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is_momx,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
adj0, adj1, adj2
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dyidy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_x_v_bnd,
mom_y_v, mom_y_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js_momy), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, dens_ptb, rjd_uf, rjd_ph, dzidz_ph, dzidy_ph, dzidx_ph, dens_ref_f, dens_ref_f_x
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_x_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(isx,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, dens_ptb, rjd_vf, rjd_ph, dzidz_ph, dzidy_ph, dzidx_ph, dens_ref_f, dens_ref_f_y
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_z_v, mom_y_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,jsy), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc, iseq_bnd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ref_f, dens_ref_f, rjd_pf, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v
dens_ptb_v_bnd, rmpt_ptb_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(is,ny_mn), endAt(ie,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ref_f, dens_ref_f, rjd_pf, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, dens_ptb_v,
dens_ptb_v_bnd, rmpt_ptb_v_bnd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,js), endAt(nx_mx,je), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1059, combined=919, changed=239, unchanged=680, subroutine_definitions=13, calls=16, imports=15, data_definitions=0, save=15, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=1, radiation=0, storage_order=0, data_spec=10, other=164)
========== ndiff =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/ndiff.h90, hfpath: branches/reference/asuca-kij/Src/Util/ndiff.f90
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v, vel_z, dens_ptb,
rjd_ph, jd_ph, dz_ph,
dens_ref_f,
mom_zi_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v, vel_z, dens_ptb,
rjd_ph, jd_ph, dz_ph,
dens_ref_f,
mom_zi_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v, vel_z, dens_ptb,
rjd_ph, jd_ph, dz_ph,
dens_ref_f,
mom_zi_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v, vel_z, dens_ptb,
rjd_ph, jd_ph, dz_ph,
dens_ref_f,
mom_zi_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=79, combined=77, changed=28, unchanged=49, subroutine_definitions=1, calls=1, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=20)
========== positive =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/positive.h90, hfpath: branches/reference/asuca-kij/Src/Util/positive.f90
!pgi$r novector
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
p
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
integer(4), intent(in) :: i, j
integer(4), intent(in) :: it_calc_sed
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
p
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dt_rk_rest, cfl_reached, it_calc_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
if (cfl_reached) then
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
pmod = pmod + max(-p(k,i,j,it_calc_sed), 0._rp)
p(k,i,j,it_calc_sed) = max(p(k,i,j,it_calc_sed), 0._rp)
psum = psum + p(k,i,j,it_calc_sed)
p(k,i,j,it_calc_sed) = p(k,i,j,it_calc_sed) * pmod
@end parallelRegion
!pgi$r novector
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
p
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
integer(4), intent(in) :: i, j
integer(4), intent(in) :: it_calc_sed
logical, intent(in) :: cfl_reached
logical, intent(in) :: is_rk_run
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
p
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dt_rk_rest, cfl_reached, it_calc_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
if (cfl_reached) then
if ( is_rk_run .and. dt_rk_rest < dt_rk_rest_epsln ) then
pmod = pmod + max(-p(k,i,j,it_calc_sed), 0._rp)
p(k,i,j,it_calc_sed) = max(p(k,i,j,it_calc_sed), 0._rp)
psum = psum + p(k,i,j,it_calc_sed)
p(k,i,j,it_calc_sed) = p(k,i,j,it_calc_sed) * pmod
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=117, combined=115, changed=32, unchanged=83, subroutine_definitions=2, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=3, other=25)
========== prc =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/prc.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/prc.f90
!pgi$g novector
public :: dyn_prc, calc_flux_prc, prc_ini
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x, tend_mom_y, tend_mom_z, tend_dens, flux_z_prc,
vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_x, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx_u,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_y, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx,ny_v)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_z, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, tend_dens, flux_z_prc
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nxt,nyt)}
@end parallelRegion
logical, intent(in):: cfl_reached
@domainDependant{attribute(autoDom, present)}
dzidz_ph, rjd_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
flux_z_prc, wdrop_qx, qx
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
cfl_reached, dt
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
end if
@end parallelRegion
!pgi$g novector
public :: dyn_prc, calc_flux_prc, prc_ini
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x, tend_mom_y, tend_mom_z, tend_dens, flux_z_prc,
vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_x, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx_u,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_y, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx,ny_v)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, vel_z, flux_z_prc, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z, tend_dens, flux_z_prc
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend, flux_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nxt,nyt)}
@end parallelRegion
logical, intent(in):: cfl_reached
@domainDependant{attribute(autoDom, present)}
dzidz_ph, rjd_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
flux_z_prc, wdrop_qx, qx
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
cfl_reached, dt
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
end if
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=192, combined=191, changed=58, unchanged=133, subroutine_definitions=2, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=2, other=49)
========== sediment =============
refpath: branches/hybrid/asuca-kij/HybridSources/Dynamics/sediment.h90, hfpath: branches/reference/asuca-kij/Src/Dynamics/sediment.f90
!pgi$g novector
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_dens_ptb_v_rk, flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
flux_z_prc
@end domainDependant
end subroutine
integer(4):: k, it_copy
@domainDependant{attribute(autoDom, present)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@parallelRegion{domName(i, j), domSize(nx_mn:nx_mx, ny_mn:ny_mx), startAt(nx_mn, ny_mn), endAt(nx_mx, ny_mx)}
rqx_v(k,i,j,it_copy) = rqa_v(k,i,j,it_copy,id_qx)
@end parallelRegion
end subroutine
integer(4):: k, it_copy
@domainDependant{attribute(autoDom, present)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@parallelRegion{domName(i, j), domSize(nx_mn:nx_mx, ny_mn:ny_mx), startAt(nx_mn, ny_mn), endAt(nx_mx, ny_mx)}
rqa_v(k,i,j,it_copy,id_qx) = rqx_v(k,i,j,it_copy)
@end parallelRegion
end subroutine
integer(4):: i, j
@domainDependant{attribute(autoDom, present)}
rqa_v, qa, wdrop_qa,
precp_qa, dens_ref_f,
tend_rqa_v_l, tend_rqa_v_rk, tend_precp_qa, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
denfac, dens_a, dens, r_densjd, pres
@end domainDependant
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present)}
dens_ref_f, pres_ref_f, qa, dens_ptb, pres_ptb, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dens_a, dens, r_densjd, pres
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
logical, intent(in) :: logic_array
logical, intent(out) :: result
integer(4) :: num_true
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
logic_array
@end domainDependant
num_true = 0
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny), reduction(+:num_true)}
if (logic_array) then
num_true = num_true + 1
@end parallelRegion
result = .false.
if (num_true == size(logic_array)) then
result = .true.
if (num_true == 1) then
result = .true.
end subroutine
logical :: cfl_reached
logical :: all_cfl_reached
@domainDependant{attribute(autoDom, present)}
tend_precp_qx, precp_qx, tend_precp_rate_qx, denfac, dens, r_densjd, pres,
jd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
flux_z_prc, qx, wdrop_qx, tend_rqx_v_l, tend_rqx_v_rk, qnx, wdrop_qnx, tend_rqnx_v_l, tend_rqnx_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v, rqnx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
denfac, dens, r_densjd, pres,
cfl_reached,
dt_rk_rest, dt_rk_sed, dt_sed, it_calc_sed, it_root_sed, it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_precp_rate_qx(i,j) = 0._rp
cfl_reached = .false.
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
if ( timestep_counter_sed == 1 ) then
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
cfl_reached = .true.
@end parallelRegion
if (all_cfl_reached) then
exit timestep_sed
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
!pgi$g novector
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_dens_ptb_v_rk, flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
flux_z_prc
@end domainDependant
end subroutine
integer(4):: k, it_copy
@domainDependant{attribute(autoDom, present)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@parallelRegion{domName(i, j), domSize(nx_mn:nx_mx, ny_mn:ny_mx), startAt(nx_mn, ny_mn), endAt(nx_mx, ny_mx)}
rqx_v(k,i,j,it_copy) = rqa_v(k,i,j,it_copy,id_qx)
@end parallelRegion
end subroutine
integer(4):: k, it_copy
@domainDependant{attribute(autoDom, present)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@parallelRegion{domName(i, j), domSize(nx_mn:nx_mx, ny_mn:ny_mx), startAt(nx_mn, ny_mn), endAt(nx_mx, ny_mx)}
rqa_v(k,i,j,it_copy,id_qx) = rqx_v(k,i,j,it_copy)
@end parallelRegion
end subroutine
integer(4):: i, j
@domainDependant{attribute(autoDom, present)}
rqa_v, qa, wdrop_qa,
precp_qa, dens_ref_f,
tend_rqa_v_l, tend_rqa_v_rk, tend_precp_qa, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rqx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
denfac, dens_a, dens, r_densjd, pres
@end domainDependant
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present)}
dens_ref_f, pres_ref_f, qa, dens_ptb, pres_ptb, jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dens_a, dens, r_densjd, pres
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z_prc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
logical, intent(in) :: logic_array
logical, intent(out) :: result
integer(4) :: num_true
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
logic_array
@end domainDependant
num_true = 0
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny), reduction(+:num_true)}
if (logic_array) then
num_true = num_true + 1
@end parallelRegion
result = .false.
if (num_true == size(logic_array)) then
result = .true.
if (num_true == 1) then
result = .true.
end subroutine
logical :: cfl_reached
logical :: all_cfl_reached
@domainDependant{attribute(autoDom, present)}
tend_precp_qx, precp_qx, tend_precp_rate_qx, denfac, dens, r_densjd, pres,
jd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
flux_z_prc, qx, wdrop_qx, tend_rqx_v_l, tend_rqx_v_rk, qnx, wdrop_qnx, tend_rqnx_v_l, tend_rqnx_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v, rqnx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
denfac, dens, r_densjd, pres,
cfl_reached,
dt_rk_rest, dt_rk_sed, dt_sed, it_calc_sed, it_root_sed, it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_precp_rate_qx(i,j) = 0._rp
cfl_reached = .false.
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
if ( timestep_counter_sed == 1 ) then
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
cfl_reached = .true.
@end parallelRegion
if (all_cfl_reached) then
exit timestep_sed
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=415, combined=349, changed=183, unchanged=166, subroutine_definitions=7, calls=19, imports=12, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=2, device_data_init=4, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=10, other=124)
========== gpvmodify =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/gpvmodify.h90, hfpath: branches/reference/asuca-kij/Src/Ini/gpvmodify.f90
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, vel_x, vel_y, vel_z, ptemp, temp,
dzidx_ph, dzidy_ph, dzidz_ph, rjd_ph, rjd_pf, rjd_uf, rjd_vf, pz_pf, pz_ph,
rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y, pres_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, dens_ptb_v, qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
t
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, vel_x, vel_y, vel_z, ptemp, temp,
dzidx_ph, dzidy_ph, dzidz_ph, rjd_ph, rjd_pf, rjd_uf, rjd_vf, pz_pf, pz_ph,
rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y, pres_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, dens_ptb_v, qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
t
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=448, combined=409, changed=28, unchanged=381, subroutine_definitions=0, calls=2, imports=3, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=0, other=20)
========== ideal =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/ideal.h90, hfpath: branches/reference/asuca-kij/Src/Ini/ideal.f90
module ideal_main
contains
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
end module ideal_main
module ideal_main
contains
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
end module ideal_main
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=287, combined=258, changed=20, unchanged=238, subroutine_definitions=1, calls=5, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=0, other=6)
========== ideal_helper =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/ideal_helper.h90, hfpath: None

module ideal_helper
contains
implicit none
integer(4), intent(in):: nzs
integer(4), intent(in):: nze
integer(4):: i
integer(4):: j
integer(4):: k
do k = nzs, nze
p(k,nx_mn:0,j)    = p(k,nx-nx_mgn+1:nx,j)
p(k,nx+1:nx_mx,j) = p(k,1:nx_mgn,j)
end do
end do
do k = nzs, nze
p(k,i,ny_mn:0)    = p(k,i,ny-ny_mgn+1:ny)
p(k,i,ny+1:ny_mx) = p(k,i,1:ny_mgn)
end do
end do
implicit none
integer(4), intent(in):: nzs
integer(4), intent(in):: nze
integer(4):: i
integer(4):: j
integer(4):: k
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
p
@end domainDependant
do k = nzs, nze
p(k,nx_mn:0,j)    = p(k,nx-nx_mgn+1:nx,j)
p(k,nx+1:nx_mx,j) = p(k,1:nx_mgn,j)
end do
end do
do k = nzs, nze
p(k,i,ny_mn:0)    = p(k,i,ny-ny_mgn+1:ny)
p(k,i,ny+1:ny_mx) = p(k,i,1:ny_mgn)
end do
end do
implicit none
integer(4):: k
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
rnxny = 1.0d0 / real(nx * ny)
do k = nz_mn, nz_mx
end do

module ideal_helper
contains
implicit none
integer(4), intent(in):: nzs
integer(4), intent(in):: nze
integer(4):: i
integer(4):: j
integer(4):: k
do k = nzs, nze
p(k,nx_mn:0,j)    = p(k,nx-nx_mgn+1:nx,j)
p(k,nx+1:nx_mx,j) = p(k,1:nx_mgn,j)
end do
end do
do k = nzs, nze
p(k,i,ny_mn:0)    = p(k,i,ny-ny_mgn+1:ny)
p(k,i,ny+1:ny_mx) = p(k,i,1:ny_mgn)
end do
end do
implicit none
integer(4), intent(in):: nzs
integer(4), intent(in):: nze
integer(4):: i
integer(4):: j
integer(4):: k
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
p
@end domainDependant
do k = nzs, nze
p(k,nx_mn:0,j)    = p(k,nx-nx_mgn+1:nx,j)
p(k,nx+1:nx_mx,j) = p(k,1:nx_mgn,j)
end do
end do
do k = nzs, nze
p(k,i,ny_mn:0)    = p(k,i,ny-ny_mgn+1:ny)
p(k,i,ny+1:ny_mx) = p(k,i,1:ny_mgn)
end do
end do
implicit none
integer(4):: k
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
rnxny = 1.0d0 / real(nx * ny)
do k = nz_mn, nz_mx
end do
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=70, combined=67, changed=67, unchanged=0, subroutine_definitions=3, calls=0, imports=5, data_definitions=0, save=0, parameter=0, openmp=0, style=6, parallel_loops=4, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=3, other=46)
========== prep_phys_ini =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/prep_phys_ini.h90, hfpath: branches/reference/asuca-kij/Src/Ini/prep_phys_ini.f90
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, pres_ptb, temp,
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp,
l_mo_inv,
pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, ptemp,
qv, qc, qr, qi, qs, qg, qh,
temp,
mptmp, pres_ref_f, pres_ptb, exner, dens_ref_f, dens_ptb,
rqke_v, rtsq_v, rqsq_v, rcov_v,
l_mo_inv, ust
skind_tile, tlcvr, z_0m, z_0h, z_0q,
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
stop 2
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, pres_ptb, temp,
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp,
l_mo_inv,
pres_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, ptemp,
qv, qc, qr, qi, qs, qg, qh,
temp,
mptmp, pres_ref_f, pres_ptb, exner, dens_ref_f, dens_ptb,
rqke_v, rtsq_v, rqsq_v, rcov_v,
l_mo_inv, ust
skind_tile, tlcvr, z_0m, z_0h, z_0q,
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
stop 2
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=350, combined=267, changed=48, unchanged=219, subroutine_definitions=1, calls=0, imports=3, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=1, other=40)
========== prepsub =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/prepsub.h90, hfpath: branches/reference/asuca-kij/Src/Ini/prepsub.f90
public set_allvar_ideal, read_allvar, set_surface_ideal, set_surface_nest, intp_2d, set_position, calc_meanfield, intp_2d_nearest, set_reference_field, calc_psea2paisurf, calc_psrf2paisurf_psea, height2fk, height2fk_compile_time_defined_order, make_confcard_ideal, readparm_numgrid, readparm_other, readparm_add_stmip, readparm_add_bubble, readparm_add_sk1994, readparm_add_nest, readparm_arashi_opt, alloc_for_prep, read_metrics_pre, alloc_fvar1, alloc_dvar1, alloc_dvar2, alloc_ref_var, set_ideal_parameters, prep_parameter_ini, set_gridinfo_externalmodel, set_fifj_externalmodel, set_fk_externalmodel, set_latlon_externalmodel, solve_hydro, init_svar
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
mom_x_v(:,:,:,:) = 0.0_rp
mom_y_v(:,:,:,:) = 0.0_rp
mom_z_v(:,:,:,:) = 0.0_rp
dens_ptb_v(:,:,:,:) = 0.0_rp
rmpt_ptb_v(:,:,:,:) = 0.0_rp
rqa_v(:,:,:,:,:) = 0.0_rp
tg(:,:,:,:,:) = 0.0_rp
wg(:,:,:,:) = 0.0_rp
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp, temp, pres_ptb, exner
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf, pres_ref_f, rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dswb, uswb, dswt, uswt, dlwb, ulwt, mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
dswb(:,:) = 0.0d0
uswb(:,:) = 0.0d0
dswt(:,:) = 0.0d0
uswt(:,:) = 0.0d0
dlwb(:,:) = 0.0d0
ulwt(:,:) = 0.0d0
mom_xi_v_2d(:,:) = 0.0d0
mom_yi_v_2d(:,:) = 0.0d0
l_mo_inv(:,:,:) = 0.0d0
dens_ptb_damp(:,:,:) = 0.0d0
mptmp_damp(:,:,:) = 0.0d0
vel_x_damp(:,:,:) = 0.0d0
vel_y_damp(:,:,:) = 0.0d0
vel_z_damp(:,:,:) = 0.0d0
qa_damp(:,:,:,:) = 0.0d0
end subroutine
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dy_pf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ptemp, vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf, pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
height
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph, dzidz_ph,
rjd_pf, rjd_ph, rjd_uf, rjd_vf
jd_uf, jd_vf, jd_pf, jd_ph,
dxidz_uf, dyidz_vf,
dz_ph, pz_ph, pz_pf, dz_pf
@end domainDependant
public set_allvar_ideal, read_allvar, set_surface_ideal, set_surface_nest, intp_2d, set_position, calc_meanfield, intp_2d_nearest, set_reference_field, calc_psea2paisurf, calc_psrf2paisurf_psea, height2fk, height2fk_compile_time_defined_order, make_confcard_ideal, readparm_numgrid, readparm_other, readparm_add_stmip, readparm_add_bubble, readparm_add_sk1994, readparm_add_nest, readparm_arashi_opt, alloc_for_prep, read_metrics_pre, alloc_fvar1, alloc_dvar1, alloc_dvar2, alloc_ref_var, set_ideal_parameters, prep_parameter_ini, set_gridinfo_externalmodel, set_fifj_externalmodel, set_fk_externalmodel, set_latlon_externalmodel, solve_hydro, init_svar
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
mom_x_v(:,:,:,:) = 0.0_rp
mom_y_v(:,:,:,:) = 0.0_rp
mom_z_v(:,:,:,:) = 0.0_rp
dens_ptb_v(:,:,:,:) = 0.0_rp
rmpt_ptb_v(:,:,:,:) = 0.0_rp
rqa_v(:,:,:,:,:) = 0.0_rp
tg(:,:,:,:,:) = 0.0_rp
wg(:,:,:,:) = 0.0_rp
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp, temp, pres_ptb, exner
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf, pres_ref_f, rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dswb, uswb, dswt, uswt, dlwb, ulwt, mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
dswb(:,:) = 0.0d0
uswb(:,:) = 0.0d0
dswt(:,:) = 0.0d0
uswt(:,:) = 0.0d0
dlwb(:,:) = 0.0d0
ulwt(:,:) = 0.0d0
mom_xi_v_2d(:,:) = 0.0d0
mom_yi_v_2d(:,:) = 0.0d0
l_mo_inv(:,:,:) = 0.0d0
dens_ptb_damp(:,:,:) = 0.0d0
mptmp_damp(:,:,:) = 0.0d0
vel_x_damp(:,:,:) = 0.0d0
vel_y_damp(:,:,:) = 0.0d0
vel_z_damp(:,:,:) = 0.0d0
qa_damp(:,:,:,:) = 0.0d0
end subroutine
@domainDependant{attribute(host, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dy_pf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ptemp, vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(host, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pz_ph, pz_pf, pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}}
height
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph, dzidz_ph,
rjd_pf, rjd_ph, rjd_uf, rjd_vf
jd_uf, jd_vf, jd_pf, jd_ph,
dxidz_uf, dyidz_vf,
dz_ph, pz_ph, pz_pf, dz_pf
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=3136, combined=2722, changed=148, unchanged=2574, subroutine_definitions=9, calls=22, imports=6, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=8, other=98)
========== sf_parameters =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/sf_parameters.f90, hfpath: branches/reference/asuca-kij/Src/Ini/sf_parameters.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=16, combined=16, changed=0, unchanged=16, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== vertical =============
refpath: branches/hybrid/asuca-kij/HybridSources/Ini/vertical.f90, hfpath: branches/reference/asuca-kij/Src/Ini/vertical.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=495, combined=460, changed=1, unchanged=459, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== arashi =============
refpath: branches/hybrid/asuca-kij/HybridSources/Main/arashi.h90, hfpath: branches/reference/asuca-kij/Src/Main/arashi.f90
do timestep_counter_s = 1, nsound
do rk_counter_s = 1, 3
end do
end do
do rk_counter = 1, 3
end do
@domainDependant{attribute(autoDom, transferHere)}
rmpt_ref_f, pres_ref_f, dens_ref_f,
dens_ref_f_x, dens_ref_f_y
mom_xi_v, mom_yi_v, mom_zi_v, pres_ptb, mptmp, exner, dens_ptb, flux_x, flux_y, flux_z,
vel_x, vel_y, vel_z,
ptemp, temp,
psea, psrf,
mom_xi_v_2d, mom_yi_v_2d, dens_ptb_damp,
mom_x_v, mom_y_v, mom_z_v, dens_ptb_v, rmpt_ptb_v
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
tend_rmpt_ptb_v_a, tend_dens_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a, tend_rqa_v_a,
tz_dns,tz,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph, dzidz_ph, dxidz_uf, dyidz_vf, dzidz_pf, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph,
rjd_pf, jd_uf, jd_vf, jd_pf, rdzidz_ph, rjd_ph, jd_ph,
rjd_uf, rjd_vf, dz_ph, pz_pf, pz_ph,
dx_pf, dx_uf, dy_pf, dy_vf, dz_pf
g_flat, z_g
tend_dens_ptb_v_l, tend_rmpt_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l,
mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp, qa_damp,
dswb, uswb, dswt, uswt, dlwb, ulwt, l_mo_inv,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswbcs, uswbcs, uswtcs,
dlwbcs, ulwtcs, coefccs, ttranscs,
cldbase, cldtop, abe_out, lcl_temp, nca, wg_ini, ust, coefc, ttrans, rlong, rshrt
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
mom_x, mom_y, mom_z, psea_out, psrf_out
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, ave_flsh, ave_fllh, ave_flug
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc,
flsh, fllh, cll, clm, clh, cla, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd,
skind_tile, tlcvr, z_0m, z_0h, z_0q, fsand, fclay, albed, urban, aod, skind, sl, beta, ozon
tblo, tblc, tblh, sblco2, sblo2n, sblo2s,
aeroec, aerosa, aeroaf, aeroac, aerodl, aerodo, aeracl, aeraco,
sflux_rqv,
tend_wg, precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s, tend_sflux_rqv,
adj0, adj1, adj2,
rdz_p, rdz_wp, rdz_wm,
gm,
flux_z_prc,
rtable,
tend_mom_x_pf, tend_mom_y_pf,
a, b, c, q, mptmp_h, flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv, tend_v_rk_s, mom, momz,
dens_x, dens_y, dens_z, rdensjd
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l, qa, wdrop_qa, out3d,
mom_x_v_bnd, mom_y_v_bnd, mom_z_v_bnd, dens_ptb_v_bnd, rmpt_ptb_v_bnd, dens_ptb_bnd, vel_x_bnd, vel_y_bnd, vel_z_bnd, mptmp_bnd,
fktg,roctg
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v, rqa_v_bnd
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_qa, tend_precp_rate_qa, precp_qa, flat, flon, sin_flat
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg, tend_tg
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
timestep_long: do
exit timestep_long
end do timestep_long
do timestep_counter_s = 1, nsound
do rk_counter_s = 1, 3
end do
end do
do rk_counter = 1, 3
end do
@domainDependant{attribute(autoDom, transferHere)}
rmpt_ref_f, pres_ref_f, dens_ref_f,
dens_ref_f_x, dens_ref_f_y
mom_xi_v, mom_yi_v, mom_zi_v, pres_ptb, mptmp, exner, dens_ptb, flux_x, flux_y, flux_z,
vel_x, vel_y, vel_z,
ptemp, temp,
psea, psrf,
mom_xi_v_2d, mom_yi_v_2d, dens_ptb_damp,
mom_x_v, mom_y_v, mom_z_v, dens_ptb_v, rmpt_ptb_v
tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_dens_ptb_v_rk_s,
tend_rmpt_ptb_v_a, tend_dens_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a, tend_rqa_v_a,
tz_dns,tz,
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph, dzidz_ph, dxidz_uf, dyidz_vf, dzidz_pf, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph,
rjd_pf, jd_uf, jd_vf, jd_pf, rdzidz_ph, rjd_ph, jd_ph,
rjd_uf, rjd_vf, dz_ph, pz_pf, pz_ph,
dx_pf, dx_uf, dy_pf, dy_vf, dz_pf
g_flat, z_g
tend_dens_ptb_v_l, tend_rmpt_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l,
mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp, qa_damp,
dswb, uswb, dswt, uswt, dlwb, ulwt, l_mo_inv,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswbcs, uswbcs, uswtcs,
dlwbcs, ulwtcs, coefccs, ttranscs,
cldbase, cldtop, abe_out, lcl_temp, nca, wg_ini, ust, coefc, ttrans, rlong, rshrt
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
mom_x, mom_y, mom_z, psea_out, psrf_out
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, ave_flsh, ave_fllh, ave_flug
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc,
flsh, fllh, cll, clm, clh, cla, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd,
skind_tile, tlcvr, z_0m, z_0h, z_0q, fsand, fclay, albed, urban, aod, skind, sl, beta, ozon
tblo, tblc, tblh, sblco2, sblo2n, sblo2s,
aeroec, aerosa, aeroaf, aeroac, aerodl, aerodo, aeracl, aeraco,
sflux_rqv,
tend_wg, precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s, tend_sflux_rqv,
adj0, adj1, adj2,
rdz_p, rdz_wp, rdz_wm,
gm,
flux_z_prc,
rtable,
tend_mom_x_pf, tend_mom_y_pf,
a, b, c, q, mptmp_h, flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv, tend_v_rk_s, mom, momz,
dens_x, dens_y, dens_z, rdensjd
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l, qa, wdrop_qa, out3d,
mom_x_v_bnd, mom_y_v_bnd, mom_z_v_bnd, dens_ptb_v_bnd, rmpt_ptb_v_bnd, dens_ptb_bnd, vel_x_bnd, vel_y_bnd, vel_z_bnd, mptmp_bnd,
fktg,roctg
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v, rqa_v_bnd
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_qa, tend_precp_rate_qa, precp_qa, flat, flon, sin_flat
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg, tend_tg
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
timestep_long: do
exit timestep_long
end do timestep_long
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=216, combined=216, changed=120, unchanged=96, subroutine_definitions=3, calls=5, imports=42, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=68)
========== maxminave =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/maxminave.h90, hfpath: branches/reference/asuca-kij/Src/Monit/maxminave.f90
@domainDependant{attribute(host), domName(dom1, dom2), domSize(2,nelemmax*2)}
maxmin_gb, maxmin_lc
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(nelemmax)}
ave_gb, ave_lc, ename, nlev, nlev_ks
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(log_step)}
current_time_for_log
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(0:nth-1)}
maxmin_tlc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, current_time_for_log
@end domainDependant
@domainDependant{attribute(autoDom, present)}
psea, psrf, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, pres_ptb, ptemp, vel_x, vel_y, vel_z, qa, tg, wg, tend_precp_rate_qa
@end domainDependant
integer(8) :: i8_argmax, i8_argmin
@domainDependant{attribute(autoDom, host)}
ename, ename_in, maxmin_lc, ave_lc, nlev, nlev_ks
@end domainDependant
@domainDependant{attribute(autoDom, present), domPP(DOM), accPP(AT)}
var
@end domainDependant
r8_ave = -1.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(+:r8_ave), template(TIGHT_STENCIL)}
r8_ave = r8_ave + var(i,j,k)
@end parallelRegion
r8_max = -2.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(max:r8_max), template(TIGHT_STENCIL)}
r8_max = max(r8_max, var(i,j,k))
@end parallelRegion
i8_argmax = 0
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
if (abs(var(i,j,k)-r8_max) < 1E-12) then
i8_argmax = k_dbl + i_dbl * nz0_dbl + j_dbl * nz0nx0_dbl
@end parallelRegion
if (r8_max > maxmin_lc(1,pmax)) then
maxmin_lc(1,pmax) = r8_max
maxmin_lc(2,pmax) = transfer(i8_argmax, maxmin_lc(2,pmax))
r8_min = -2.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(min:r8_min), template(TIGHT_STENCIL)}
r8_min = min(r8_min, var(i,j,k))
@end parallelRegion
i8_argmin = 0
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
if (abs(var(i,j,k)-r8_min) < 1E-12) then
i8_argmin = k_dbl + i_dbl * nz0_dbl + j_dbl * nz0nx0_dbl
@end parallelRegion
if (r8_min > maxmin_lc(1,pmin)) then
maxmin_lc(1,pmin) = r8_min
maxmin_lc(2,pmin) = transfer(i8_argmin, maxmin_lc(2,pmin))
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2), domSize(2,nelemmax*2)}
maxmin_gb, maxmin_lc
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(nelemmax)}
ave_gb, ave_lc, ename, nlev, nlev_ks
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(log_step)}
current_time_for_log
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(0:nth-1)}
maxmin_tlc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, current_time_for_log
@end domainDependant
@domainDependant{attribute(autoDom, present)}
psea, psrf, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, pres_ptb, ptemp, vel_x, vel_y, vel_z, qa, tg, wg, tend_precp_rate_qa
@end domainDependant
integer(8) :: i8_argmax, i8_argmin
@domainDependant{attribute(autoDom, host)}
ename, ename_in, maxmin_lc, ave_lc, nlev, nlev_ks
@end domainDependant
@domainDependant{attribute(autoDom, present), domPP(DOM), accPP(AT)}
var
@end domainDependant
r8_ave = -1.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(+:r8_ave), template(TIGHT_STENCIL)}
r8_ave = r8_ave + var(i,j,k)
@end parallelRegion
r8_max = -2.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(max:r8_max), template(TIGHT_STENCIL)}
r8_max = max(r8_max, var(i,j,k))
@end parallelRegion
i8_argmax = 0
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
if (abs(var(i,j,k)-r8_max) < 1E-12) then
i8_argmax = k_dbl + i_dbl * nz0_dbl + j_dbl * nz0nx0_dbl
@end parallelRegion
if (r8_max > maxmin_lc(1,pmax)) then
maxmin_lc(1,pmax) = r8_max
maxmin_lc(2,pmax) = transfer(i8_argmax, maxmin_lc(2,pmax))
r8_min = -2.d30
@parallelRegion{domName(i,j), domSize(nx,ny), reduction(min:r8_min), template(TIGHT_STENCIL)}
r8_min = min(r8_min, var(i,j,k))
@end parallelRegion
i8_argmin = 0
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
if (abs(var(i,j,k)-r8_min) < 1E-12) then
i8_argmin = k_dbl + i_dbl * nz0_dbl + j_dbl * nz0nx0_dbl
@end parallelRegion
if (r8_min > maxmin_lc(1,pmin)) then
maxmin_lc(1,pmin) = r8_min
maxmin_lc(2,pmin) = transfer(i8_argmin, maxmin_lc(2,pmin))
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=353, combined=321, changed=68, unchanged=253, subroutine_definitions=3, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=6, commented=1, radiation=0, storage_order=0, data_spec=2, other=56)
========== monitflux =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/monitflux.h90, hfpath: branches/reference/asuca-kij/Src/Monit/monitflux.f90
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
dens_ptb_v_2d, dens_ref_v_2d, flux_z0_surf
@end domainDependant
@domainDependant{domName(i,j), domSize(nx0_mn:nx0_mx,ny0_mn:ny0_mx), attribute(host)}
dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
mom_xi_v0_2d, mom_yi_v0_2d, flux_z0_prc0, flux_z0_surf0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
flux_z0_prc, precp_qa, sflux_rqv,
dens_ptb_v_2d, dens_ref_v_2d,
flux_z0_surf
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, rjd_pf, rjd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mom_xi_v_2d, mom_yi_v_2d, mpi_calc, dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
dens_ptb_v_2d, flux_z0_surf,
dens_ref_v_2d, dens_ref_v_2d_previous,
flux_z0_prc, flux_z0_prc0, flux_z0_surf0, mom_xi_v0_2d, mom_yi_v0_2d,
gather_p0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
dens_ptb_v_2d, dens_ref_v_2d, dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
flux_z0_surf, mom_xi_v0_2d, mom_yi_v0_2d, flux_z0_prc0, flux_z0_surf0
@end domainDependant
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
dens_ptb_v_2d, dens_ref_v_2d, flux_z0_surf
@end domainDependant
@domainDependant{domName(i,j), domSize(nx0_mn:nx0_mx,ny0_mn:ny0_mx), attribute(host)}
dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
mom_xi_v0_2d, mom_yi_v0_2d, flux_z0_prc0, flux_z0_surf0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
flux_z0_prc, precp_qa, sflux_rqv,
dens_ptb_v_2d, dens_ref_v_2d,
flux_z0_surf
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, rjd_pf, rjd_ph, dzidz_ph
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mom_xi_v_2d, mom_yi_v_2d, mpi_calc, dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
dens_ptb_v_2d, flux_z0_surf,
dens_ref_v_2d, dens_ref_v_2d_previous,
flux_z0_prc, flux_z0_prc0, flux_z0_surf0, mom_xi_v0_2d, mom_yi_v0_2d,
gather_p0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
dens_ptb_v_2d, dens_ref_v_2d, dens_ptb_v0_2d, dens_ref_v0_2d, dens_ref_v0_2d_previous,
flux_z0_surf, mom_xi_v0_2d, mom_yi_v0_2d, flux_z0_prc0, flux_z0_surf0
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=390, combined=379, changed=72, unchanged=307, subroutine_definitions=0, calls=2, imports=8, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=16, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=0, other=43)
========== output =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/output.h90, hfpath: branches/reference/asuca-kij/Src/Monit/output.f90
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ptb, pres_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x_out, vel_y_out, vel_x, vel_y, vel_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
psea_out, psrf_out
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, pres_ptb, temp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v, qa
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
end subroutine
@domainDependant{attribute(host)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, cll, clm, clh, cla,
qa, ptemp, temp, tg, wg
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
vel_z, dens_ptb,
mom_x, mom_y, mom_z, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd, out3d
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
psea, psrf, vel_x, vel_y, vel_z, flsh, fllh, dswt, uswt, ulwt, dswb, uswb, dlwb
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
psea_out, psrf_out
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x_out, vel_y_out
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc,
tg, wg,
dens_ptb, pres_ptb, qa, ptemp, temp, vel_z,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, psea_out, psrf_out, pres, ptgrd, qvgrd,
precp_qa, mom_x, mom_y, mom_z, rmpt_ptb, ave_flsh, ave_fllh, ave_flug, flmu, flmv, cll, clm, clh, cla,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, fsiir, fsivs, fsiwv, out3d, name_out3d, n_out3d,
z_0m, z_0h, z_0q, beta, tlcvr,
tg_out, z_0m_out, z_0h_out, z_0q_out, beta_out, vel_x_out, vel_y_out
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(AT_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
integer(4), intent(in) :: ks, ke, is, ie, js, je
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(AT_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ptb, pres_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x_out, vel_y_out, vel_x, vel_y, vel_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rmpt_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
psea_out, psrf_out
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, pres_ptb, temp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v, qa
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
end subroutine
@domainDependant{attribute(host)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, cll, clm, clh, cla,
qa, ptemp, temp, tg, wg
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
vel_z, dens_ptb,
mom_x, mom_y, mom_z, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd, out3d
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
psea, psrf, vel_x, vel_y, vel_z, flsh, fllh, dswt, uswt, ulwt, dswb, uswb, dlwb
@end domainDependant
end subroutine
@domainDependant{attribute(host)}
psea_out, psrf_out
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, transferHere), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x_out, vel_y_out
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc,
tg, wg,
dens_ptb, pres_ptb, qa, ptemp, temp, vel_z,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, psea_out, psrf_out, pres, ptgrd, qvgrd,
precp_qa, mom_x, mom_y, mom_z, rmpt_ptb, ave_flsh, ave_fllh, ave_flug, flmu, flmv, cll, clm, clh, cla,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, fsiir, fsivs, fsiwv, out3d, name_out3d, n_out3d,
z_0m, z_0h, z_0q, beta, tlcvr,
tg_out, z_0m_out, z_0h_out, z_0q_out, beta_out, vel_x_out, vel_y_out
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(AT_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
integer(4), intent(in) :: ks, ke, is, ie, js, je
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(AT_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1429, combined=1347, changed=286, unchanged=1061, subroutine_definitions=21, calls=47, imports=36, data_definitions=0, save=0, parameter=0, openmp=0, style=8, parallel_loops=2, device_data_init=58, implementation_scheme=4, commented=1, radiation=0, storage_order=0, data_spec=4, other=105)
========== output_grads =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/output_grads.f90, hfpath: branches/reference/asuca-kij/Src/Monit/output_grads.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=354, combined=346, changed=1, unchanged=345, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== output_netcdf =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/output_netcdf.f90, hfpath: branches/reference/asuca-kij/Src/Monit/output_netcdf.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=433, combined=431, changed=1, unchanged=430, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== output_nusdas =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/output_nusdas.f90, hfpath: branches/reference/asuca-kij/Src/Monit/output_nusdas.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=415, combined=391, changed=1, unchanged=390, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== output_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Monit/output_vars.f90, hfpath: branches/reference/asuca-kij/Src/Monit/output_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=33, combined=33, changed=1, unchanged=32, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mpi_comm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Mpi/mpi_comm.h90, hfpath: branches/reference/asuca-kij/Src/Mpi/mpi_comm.f90
module procedure grpbcast_set_i, grpbcast_set_i1, grpbcast_set_d, grpbcast_set_d1, grpbcast_set_d2, grpbcast_set_c, grpbcast_set_l
public:: mpi_comm_scatter_pre_compile_time_defined_order
public:: mpi_comm_scatter_run_compile_time_defined_order
public:: mpi_comm_read_scatter_run_compile_time_defined_order
public:: mpi_comm_gather_compile_time_defined_order
@domainDependant{domName(it1), domSize(200), attribute(host)}
ptr_post_calc, ptr_pre_refer
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
integer(4) :: ios
read(mt) buf_read_all(:,:,ps:pe)
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(present, autoDom)}
ptr_post_calc
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_post_calc(i)%r
@end domainDependant
@domainDependant{attribute(host)}
nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(autoDom, present), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ptr_post_calc, ptr_pre_refer
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_post_calc(i)%r, ptr_pre_refer(num_comm_halo)%r
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, elem_st_x, elem_st_y,
buf_send_x1, buf_send_x2, buf_recv_x1, buf_recv_x2, buf_send_y1, buf_send_y2, buf_recv_y1, buf_recv_y2,
mpi_request_x_isend, mpi_request_x_irecv, mpi_request_y_isend, mpi_request_y_irecv, mpi_status,
nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ptr_pre_refer
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_pre_refer(l)%r
@end domainDependant
stop 2
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1:nx_halo_comm_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1:nx_halo_comm_in,1-ny_halo_in:ny+ny_halo_in), startAt(1,1-ny_halo_in), endAt(nx_halo_comm_in,ny+ny_halo_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1:nx_halo_comm_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1:nx_halo_comm_in,1-ny_halo_in:ny+ny_halo_in), startAt(1,1-ny_halo_in), endAt(nx_halo_comm_in,ny+ny_halo_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), startAt(1-nx_halo_in,1), endAt(nx+nx_halo_in,ny_halo_comm_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), startAt(1-nx_halo_in,1), endAt(nx+nx_halo_in,ny_halo_comm_in)}
@end parallelRegion
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20
@end domainDependant
if ( present( a01 ) ) then
if ( present( a02 ) ) then
if ( present( a03 ) ) then
if ( present( a04 ) ) then
if ( present( a05 ) ) then
if ( present( a06 ) ) then
if ( present( a07 ) ) then
if ( present( a08 ) ) then
if ( present( a09 ) ) then
if ( present( a10 ) ) then
if ( present( a11 ) ) then
if ( present( a12 ) ) then
if ( present( a13 ) ) then
if ( present( a14 ) ) then
if ( present( a15 ) ) then
if ( present( a16 ) ) then
if ( present( a17 ) ) then
if ( present( a18 ) ) then
if ( present( a19 ) ) then
if ( present( a20 ) ) then
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
module procedure grpbcast_set_i, grpbcast_set_i1, grpbcast_set_d, grpbcast_set_d1, grpbcast_set_d2, grpbcast_set_c, grpbcast_set_l
public:: mpi_comm_scatter_pre_compile_time_defined_order
public:: mpi_comm_scatter_run_compile_time_defined_order
public:: mpi_comm_read_scatter_run_compile_time_defined_order
public:: mpi_comm_gather_compile_time_defined_order
@domainDependant{domName(it1), domSize(200), attribute(host)}
ptr_post_calc, ptr_pre_refer
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p0
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
integer(4) :: ios
read(mt) buf_read_all(:,:,ps:pe)
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
p
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(present, autoDom)}
ptr_post_calc
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_post_calc(i)%r
@end domainDependant
@domainDependant{attribute(host)}
nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(autoDom, present), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ptr_post_calc, ptr_pre_refer
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_post_calc(i)%r, ptr_pre_refer(num_comm_halo)%r
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, elem_st_x, elem_st_y,
buf_send_x1, buf_send_x2, buf_recv_x1, buf_recv_x2, buf_send_y1, buf_send_y2, buf_recv_y1, buf_recv_y2,
mpi_request_x_isend, mpi_request_x_irecv, mpi_request_y_isend, mpi_request_y_irecv, mpi_status,
nx_halo, ny_halo, nx_halo_comm, ny_halo_comm, elem_ks, elem_ke
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ptr_pre_refer
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr_pre_refer(l)%r
@end domainDependant
stop 2
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1:nx_halo_comm_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1:nx_halo_comm_in,1-ny_halo_in:ny+ny_halo_in), startAt(1,1-ny_halo_in), endAt(nx_halo_comm_in,ny+ny_halo_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1:nx_halo_comm_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1:nx_halo_comm_in,1-ny_halo_in:ny+ny_halo_in), startAt(1,1-ny_halo_in), endAt(nx_halo_comm_in,ny+ny_halo_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), startAt(1-nx_halo_in,1), endAt(nx+nx_halo_in,ny_halo_comm_in)}
@end parallelRegion
integer(4) :: is_present
@domainDependant{attribute(transferHere), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
buf
@end domainDependant
@domainDependant{attribute(present), domName(k,i,j), domSize(ks:ke, 1-nx_halo_in:nx+nx_halo_in, 1-ny_halo_in:ny+ny_halo_in), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
ptr
@end domainDependant
@parallelRegion{domName(i,j), domSize(1-nx_halo_in:nx+nx_halo_in, 1:ny_halo_comm_in), startAt(1-nx_halo_in,1), endAt(nx+nx_halo_in,ny_halo_comm_in)}
@end parallelRegion
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20
@end domainDependant
if ( present( a01 ) ) then
if ( present( a02 ) ) then
if ( present( a03 ) ) then
if ( present( a04 ) ) then
if ( present( a05 ) ) then
if ( present( a06 ) ) then
if ( present( a07 ) ) then
if ( present( a08 ) ) then
if ( present( a09 ) ) then
if ( present( a10 ) ) then
if ( present( a11 ) ) then
if ( present( a12 ) ) then
if ( present( a13 ) ) then
if ( present( a14 ) ) then
if ( present( a15 ) ) then
if ( present( a16 ) ) then
if ( present( a17 ) ) then
if ( present( a18 ) ) then
if ( present( a19 ) ) then
if ( present( a20 ) ) then
@domainDependant{attribute(present, autoDom), domPP(DOM_TIGHT_STENCIL), accPP(AT_TIGHT_STENCIL)}
a
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2277, combined=2136, changed=237, unchanged=1899, subroutine_definitions=10, calls=21, imports=0, data_definitions=0, save=2, parameter=0, openmp=0, style=7, parallel_loops=0, device_data_init=17, implementation_scheme=6, commented=1, radiation=0, storage_order=0, data_spec=3, other=170)
========== mpi_control =============
refpath: branches/hybrid/asuca-kij/HybridSources/Mpi/mpi_control.h90, hfpath: branches/reference/asuca-kij/Src/Mpi/mpi_control.f90
public
public
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=110, combined=103, changed=4, unchanged=99, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=0, other=1)
========== calendar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/calendar.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/calendar.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=170, combined=168, changed=1, unchanged=167, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== pp_monit =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_monit.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_monit.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=152, combined=148, changed=4, unchanged=144, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=4, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_monit_type =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_monit_type.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_monit_type.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=12, combined=12, changed=0, unchanged=12, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_phys_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_phys_const.h90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_phys_const.f90
@domainDependant{attribute(host)}
pi, ttriple, tkelvn, hlatnt, hlf, rd, rv, e0cw, tetn1w, tetn2w, tetn3w, e0ci, tetn1i, tetn2i, tetn3i, cwater, cice, vkman, grav, stb, sc0,
cp, rdvcp, gdvcp, gdvrd, r_ttriple, r_cp, hls, r_hlf, chlv, chls, chlslf,
epsilon, one_minus_epsilon, c_virtual, cbrt6, one_third, two_thirds,
pi180
@end domainDependant
@domainDependant{attribute(host)}
pi, ttriple, tkelvn, hlatnt, hlf, rd, rv, e0cw, tetn1w, tetn2w, tetn3w, e0ci, tetn1i, tetn2i, tetn3i, cwater, cice, vkman, grav, stb, sc0,
cp, rdvcp, gdvcp, gdvrd, r_ttriple, r_cp, hls, r_hlf, chlv, chls, chlslf,
epsilon, one_minus_epsilon, c_virtual, cbrt6, one_third, two_thirds,
pi180
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=121, combined=116, changed=6, unchanged=110, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=6)
========== pp_print_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_print_parm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_print_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=116, combined=112, changed=0, unchanged=112, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_service =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_service.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_service.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=20, changed=0, unchanged=20, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_tlad_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_tlad_option.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_tlad_option.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=23, combined=22, changed=0, unchanged=22, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_vardef =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/comm/pp_vardef.f90, hfpath: branches/reference/asuca-kij/Src/Physics/comm/pp_vardef.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=8, combined=8, changed=0, unchanged=8, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== conv_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/conv/conv_grid.f90, hfpath: branches/reference/asuca-kij/Src/Physics/conv/conv_grid.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=27, combined=27, changed=0, unchanged=27, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== conv_kf_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/conv/conv_kf_const.f90, hfpath: branches/reference/asuca-kij/Src/Physics/conv/conv_kf_const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=57, combined=54, changed=0, unchanged=54, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== conv_kf_lut =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/conv/conv_kf_lut.f90, hfpath: branches/reference/asuca-kij/Src/Physics/conv/conv_kf_lut.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=122, combined=120, changed=0, unchanged=120, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== conv_kf_main =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/conv/conv_kf_main.f90, hfpath: branches/reference/asuca-kij/Src/Physics/conv/conv_kf_main.f90
wkl = (w0avg1d(klclm1) + (w0avg1d(klcl) - w0avg1d(klclm1)) * dlp) * dx * 4.0d-5 - wklcl
wkl = (w0avg1d(klclm1) + (w0avg1d(klcl) - w0avg1d(klclm1)) * dlp) * dx * 4.0d-5 - wklcl
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2473, combined=2317, changed=1, unchanged=2316, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== conv_kf_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/conv/conv_kf_parm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/conv/conv_kf_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=186, combined=180, changed=0, unchanged=180, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== caltabl =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/caltabl.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/caltabl.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=28, combined=26, changed=0, unchanged=26, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== cldemi_msm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/cldemi_msm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/cldemi_msm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=82, combined=78, changed=0, unchanged=78, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== fsi_comm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/fsi_comm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/fsi_comm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=54, combined=49, changed=0, unchanged=49, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== fsi_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/fsi_const.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/fsi_const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=13, combined=13, changed=0, unchanged=13, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== fsi_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/fsi_grid.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/fsi_grid.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=14, combined=14, changed=0, unchanged=14, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== gprf =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/gprf.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/gprf.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=67, combined=38, changed=0, unchanged=38, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== khlli0 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/khlli0.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/khlli0.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=111, combined=111, changed=0, unchanged=111, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== maxoverlap =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/maxoverlap.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/maxoverlap.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=62, combined=57, changed=0, unchanged=57, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkrfunc_ir =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/mkrfunc_ir.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/mkrfunc_ir.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=128, combined=128, changed=0, unchanged=128, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkrfunc_wv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/mkrfunc_wv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/mkrfunc_wv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=128, combined=128, changed=0, unchanged=128, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== msmfir =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/msmfir.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/msmfir.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=87, combined=72, changed=0, unchanged=72, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== msmfvs =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/msmfvs.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/msmfvs.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=119, combined=110, changed=0, unchanged=110, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== msmfwv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/msmfwv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/msmfwv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=87, combined=72, changed=0, unchanged=72, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== plank =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/plank.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/plank.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=18, combined=18, changed=0, unchanged=18, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== q2cvr =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/q2cvr.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/q2cvr.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=84, combined=70, changed=0, unchanged=70, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== rairad =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/rairad.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/rairad.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=93, combined=86, changed=0, unchanged=86, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== reftrs =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/reftrs.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/reftrs.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=407, combined=257, changed=0, unchanged=257, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== satcosz =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/satcosz.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/satcosz.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=59, combined=57, changed=0, unchanged=57, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== suncos =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/suncos.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/suncos.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=85, combined=78, changed=0, unchanged=78, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== transeir =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/transeir.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/transeir.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=41, combined=39, changed=0, unchanged=39, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== transewv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/transewv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/transewv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=88, combined=80, changed=0, unchanged=80, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== xdata =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/fsi/xdata.f90, hfpath: branches/reference/asuca-kij/Src/Physics/fsi/xdata.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=775, combined=115, changed=0, unchanged=115, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== read_constfile =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mjsib_input_sample/read_constfile.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mjsib_input_sample/read_constfile.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=157, combined=141, changed=79, unchanged=62, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=79, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_ac =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_ac.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_ac.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=573, combined=476, changed=0, unchanged=476, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_aut =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_aut.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_aut.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=51, combined=50, changed=0, unchanged=50, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_cnd =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_cnd.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_cnd.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=55, combined=45, changed=0, unchanged=45, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_comm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_comm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_comm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=70, combined=67, changed=0, unchanged=67, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_const.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=20, changed=0, unchanged=20, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_dep =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_dep.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_dep.f90
if (cimass > 0.0_r_size) then
if (cimass > 0.0_r_size) then
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=190, combined=167, changed=1, unchanged=166, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== mp_evp =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_evp.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_evp.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=30, combined=28, changed=0, unchanged=28, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_frz =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_frz.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_frz.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=91, combined=85, changed=0, unchanged=85, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_gamma =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_gamma.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_gamma.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=51, combined=50, changed=0, unchanged=50, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_grid.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_grid.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=12, combined=12, changed=0, unchanged=12, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_main_crain =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_main_crain.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_main_crain.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=246, combined=196, changed=0, unchanged=196, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_main_wrain =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_main_wrain.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_main_wrain.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=128, combined=117, changed=0, unchanged=117, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_mce =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_mce.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_mce.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=130, combined=125, changed=0, unchanged=125, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_mlt =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_mlt.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_mlt.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=137, combined=117, changed=0, unchanged=117, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nud =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_nud.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_nud.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=59, combined=56, changed=1, unchanged=55, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_option.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_option.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=13, combined=13, changed=0, unchanged=13, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_parm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=107, combined=98, changed=0, unchanged=98, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_sediment =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_sediment.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_sediment.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=57, combined=56, changed=0, unchanged=56, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_slope =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_slope.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_slope.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=73, combined=73, changed=0, unchanged=73, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_tend =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_tend.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_tend.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=438, combined=331, changed=0, unchanged=331, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_tv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_tv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_tv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=82, combined=82, changed=0, unchanged=82, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_vent =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp/mp_vent.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp/mp_vent.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=149, combined=138, changed=0, unchanged=138, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== module_mp_morr_two_moment =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/module_mp_morr_two_moment.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/module_mp_morr_two_moment.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2611, combined=2292, changed=384, unchanged=1908, subroutine_definitions=0, calls=1, imports=0, data_definitions=0, save=0, parameter=2, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=380, other=0)
========== module_mp_thompson09 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/module_mp_thompson09.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/module_mp_thompson09.f90
if (SNGL(Di_mean) .gt. 5.*D0s) then
elseif (SNGL(Di_mean) .lt. D0i) then
tpi_ide(i,j) = GAMMP(mu_i+2.0, SNGL(lami)*D0s) * 1.0D0
t_Efrw(i,j) = MAX(0.0, MIN(SNGL(Ef_rw), 0.95))
t_Efsw(i,j) = MAX(0.0, MIN(SNGL(Ef_sw), 0.95))
tnr_rev(i,j,k) = GAMMP(mu_r+1.0, SNGL(Dr(i)*lam)) * Nt_r
if (SNGL(Di_mean) .gt. 5.*D0s) then
elseif (SNGL(Di_mean) .lt. D0i) then
tpi_ide(i,j) = GAMMP(mu_i+2.0, SNGL(lami)*D0s) * 1.0D0
t_Efrw(i,j) = MAX(0.0, MIN(SNGL(Ef_rw), 0.95))
t_Efsw(i,j) = MAX(0.0, MIN(SNGL(Ef_sw), 0.95))
tnr_rev(i,j,k) = GAMMP(mu_r+1.0, SNGL(Dr(i)*lam)) * Nt_r
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=3171, combined=2764, changed=318, unchanged=2446, subroutine_definitions=1, calls=0, imports=0, data_definitions=10, save=0, parameter=83, openmp=0, style=8, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=209, other=6)
========== module_mp_wdm6 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/module_mp_wdm6.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/module_mp_wdm6.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1689, combined=1407, changed=153, unchanged=1254, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=1, parameter=41, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=110, other=0)
========== module_mp_wsm6 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/module_mp_wsm6.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/module_mp_wsm6.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1419, combined=1144, changed=129, unchanged=1015, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=1, parameter=28, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=99, other=0)
========== mp_ext_morr_two_moment =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/mp_ext_morr_two_moment.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/mp_ext_morr_two_moment.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=320, combined=279, changed=0, unchanged=279, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_ext_thompson =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/mp_ext_thompson.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/mp_ext_thompson.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=222, combined=201, changed=0, unchanged=201, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_ext_wdm6 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/mp_ext_wdm6.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/mp_ext_wdm6.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=312, combined=289, changed=0, unchanged=289, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_ext_wsm6 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_ext/mp_ext_wsm6.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_ext/mp_ext_wsm6.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=284, combined=264, changed=0, unchanged=264, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm.f90
if (t_pccnr == 'ks') then
else if (t_pccnr == 'br') then
else if (t_pccnr == 'rc') then
logarg = bcdlr * dns_a(kz) * qcw(kz) / max(qncw(kz), 1.0e-10)
logarg = brdlr * dns_a(kz) * qr(kz) / max(qnr(kz), 1.0e-10)
logarg = qs(kz) * brdls * dns_a(kz) / max(qns(kz), 1.0e-10)
if (t_pccnr == 'ks') then
else if (t_pccnr == 'br') then
else if (t_pccnr == 'rc') then
logarg = bcdlr * dns_a(kz) * qcw(kz) / max(qncw(kz), 1.0e-10)
logarg = brdlr * dns_a(kz) * qr(kz) / max(qnr(kz), 1.0e-10)
logarg = qs(kz) * brdls * dns_a(kz) / max(qns(kz), 1.0e-10)
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2260, combined=1721, changed=6, unchanged=1715, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=6)
========== mp_nhm_adjnum =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_adjnum.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_adjnum.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=321, combined=314, changed=0, unchanged=314, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_diag_qnx =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_diag_qnx.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_diag_qnx.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=60, combined=54, changed=0, unchanged=54, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_func =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_func.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_func.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=93, combined=85, changed=0, unchanged=85, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_gamma =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_gamma.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_gamma.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=60, combined=55, changed=0, unchanged=55, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_ice =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_ice.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_ice.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=856, combined=697, changed=0, unchanged=697, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_option.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_option.f90
character(2), intent(in), optional :: t_pccnr_in
character(2), intent(in), optional :: t_pccnr_in
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=34, combined=32, changed=2, unchanged=30, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=1, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== mp_nhm_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_parm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=229, combined=214, changed=0, unchanged=214, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_nhm_sat_adj =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_sat_adj.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_sat_adj.f90
if (qci(kz) > 0.0) then
qc_dmy(kz) = qci(kz) + qcw(kz)
qc_dmy(kz) = qci(kz)
if (qci(kz) > 0.0) then
qc_dmy(kz) = qcw(kz) + qci(kz)
pt_dmy(kz) = pt(kz) - hlf * r_cp * r_pi_loc(kz)  * qci(kz)
qc_dmy(kz) = qci(kz) + qcw(kz) + (qvsw_dmy - qvsi_dmy) * xfact
if (iregion(kz) == -1 .and. (qc_dmy(kz) + qci(kz) > qsum_min) )then
qi_dmy(kz) = qci(kz)
bcnclsat = 1.0 / (jiust1 * 2.0 * pi * dnsr * jiust2 * gamma(0.5*jiust2) * gamma(1.5_r_size) / gamma(0.5 * jiust2 + 1.5) )
if (qci(kz) > 0.0) then
qc_dmy(kz) = qci(kz) + qcw(kz)
qc_dmy(kz) = qci(kz)
if (qci(kz) > 0.0) then
qc_dmy(kz) = qcw(kz) + qci(kz)
pt_dmy(kz) = pt(kz) - hlf * r_cp * r_pi_loc(kz)  * qci(kz)
qc_dmy(kz) = qci(kz) + qcw(kz) + (qvsw_dmy - qvsi_dmy) * xfact
if (iregion(kz) == -1 .and. (qc_dmy(kz) + qci(kz) > qsum_min) )then
qi_dmy(kz) = qci(kz)
bcnclsat = 1.0 / (jiust1 * 2.0 * pi * dnsr * jiust2 * gamma(0.5*jiust2) * gamma(1.5_r_size) / gamma(0.5 * jiust2 + 1.5) )
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1223, combined=1025, changed=12, unchanged=1013, subroutine_definitions=0, calls=2, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=10)
========== mp_nhm_tv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/mp_nhm/mp_nhm_tv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/mp_nhm/mp_nhm_tv.f90
brdlr = 6.0 / pi / dns_r * gm(7, 1) / gm(8, 1)
r_lmd_r(kz) = exp(log(logarg) * one_third)
brdlr = sqrt ( sqrt (1.0 / pi / dns_r / pn0r_const) )
r_lmd_r(kz) = brdlr * sqrt(sqrt(dns_a(kz) * qr(kz)))
r_lmd_r(kz) = 0.0
r_lmd_r_p2r(kz) = 0.d0
r_lmd_s(kz) = exp(log(logarg) * one_third)
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
if (mod(mswc, 10) <= -1) then
pn0s(kz) = qns(kz) / r_lmd_s(kz)
pn0s(kz) = pn0s_const
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdls = sqrt ( sqrt (1.0 / pi / dns_s) )
pn0s(kz) = pn0s_const
r_lmd_s(kz) = brdls * sqrt(sqrt(dns_a(kz) * qs(kz) / pn0s(kz)))
if (r_lmd_s(kz) > 0.0_r_size) then
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
r_lmd_s_p2s(kz) = 0.0_r_size
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdls = sqrt( sqrt (1.0 / pi / dns_s) )
pn0s(kz) = puiss1_pow * exp(log(( 6.0 * dns_r * r_dns_a(kz) / qs(kz) / p1s / gm(1, 2) / sqrt_dns0_rdnsa(kz) * exp(log(( pi * dns_s * r_dns_a(kz) / qs(kz)) ) * puiss3)) ) * puiss2)
r_lmd_s(kz) = brdls * sqrt(sqrt( dns_a(kz) * qs(kz) / pn0s(kz)))
if (r_lmd_s(kz) > 0.0_r_size) then
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
r_lmd_s_p2s(kz) = 0.0_r_size
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdlg = 1.0 / pi / dns_g
r_lmd_g(kz) = exp(log(tmp_r_lmd_g) * one_third)
r_lmd_g_p2g(kz) = exp(log(r_lmd_g(kz)) * p2g)
if (mod(mswc, 10) <= -2) then
pn0g(kz) = qng(kz) / r_lmd_g(kz)
pn0g(kz) = pn0g_const
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
brdlg = sqrt( sqrt(1.0 / pi / dns_g) )
pn0g(kz) = pn0g_const
r_lmd_g(kz) = brdlg * sqrt(sqrt( dns_a(kz) * qg(kz) / pn0g(kz) ))
if (r_lmd_g(kz) > 0.0_r_size) then
r_lmd_g_p2g(kz) = exp(log(r_lmd_g(kz)) * p2g)
r_lmd_g_p2g(kz) = 0.0_r_size
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
r_lmd_i = sqrt(sqrt(dns_a(kz) * qci(kz) * brdli))
if (r_lmd_i > 0.0_r_size) then
r_lmd_i_p2i = exp(log(r_lmd_i) * p2i)
r_lmd_i_p2i = 0.0_r_size
braci = exp(log(6.0 / pi / dnsci) * one_third)
logarg = dns_a(kz) * qci(kz) / max(qnci(kz), 1.0e-10)
if(qnci(kz) > 1.0 .and. qci(kz) > 0.d0 .and. logarg > 0.0_r_size) then
tv_i(kz) = braci * exp(log(logarg) * one_third) * 700.0 * sqrt_dns0_rdnsa(kz) ** 0.7
brdlr = 6.0 / pi / dns_r * gm(7, 1) / gm(8, 1)
r_lmd_r(kz) = exp(log(logarg) * one_third)
brdlr = sqrt ( sqrt (1.0 / pi / dns_r / pn0r_const) )
r_lmd_r(kz) = brdlr * sqrt(sqrt(dns_a(kz) * qr(kz)))
r_lmd_r(kz) = 0.0
r_lmd_r_p2r(kz) = 0.d0
r_lmd_s(kz) = exp(log(logarg) * one_third)
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
if (mod(mswc, 10) <= -1) then
pn0s(kz) = qns(kz) / r_lmd_s(kz)
pn0s(kz) = pn0s_const
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdls = sqrt ( sqrt (1.0 / pi / dns_s) )
pn0s(kz) = pn0s_const
r_lmd_s(kz) = brdls * sqrt(sqrt(dns_a(kz) * qs(kz) / pn0s(kz)))
if (r_lmd_s(kz) > 0.0_r_size) then
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
r_lmd_s_p2s(kz) = 0.0_r_size
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdls = sqrt( sqrt (1.0 / pi / dns_s) )
pn0s(kz) = puiss1_pow * exp(log(( 6.0 * dns_r * r_dns_a(kz) / qs(kz) / p1s / gm(1, 2) / sqrt_dns0_rdnsa(kz) * exp(log(( pi * dns_s * r_dns_a(kz) / qs(kz)) ) * puiss3)) ) * puiss2)
r_lmd_s(kz) = brdls * sqrt(sqrt( dns_a(kz) * qs(kz) / pn0s(kz)))
if (r_lmd_s(kz) > 0.0_r_size) then
r_lmd_s_p2s(kz) = exp(log(r_lmd_s(kz)) * p2s)
r_lmd_s_p2s(kz) = 0.0_r_size
pn0s(kz) = 0.0
r_lmd_s(kz) = 0.0
brdlg = 1.0 / pi / dns_g
r_lmd_g(kz) = exp(log(tmp_r_lmd_g) * one_third)
r_lmd_g_p2g(kz) = exp(log(r_lmd_g(kz)) * p2g)
if (mod(mswc, 10) <= -2) then
pn0g(kz) = qng(kz) / r_lmd_g(kz)
pn0g(kz) = pn0g_const
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
brdlg = sqrt( sqrt(1.0 / pi / dns_g) )
pn0g(kz) = pn0g_const
r_lmd_g(kz) = brdlg * sqrt(sqrt( dns_a(kz) * qg(kz) / pn0g(kz) ))
if (r_lmd_g(kz) > 0.0_r_size) then
r_lmd_g_p2g(kz) = exp(log(r_lmd_g(kz)) * p2g)
r_lmd_g_p2g(kz) = 0.0_r_size
pn0g(kz) = 0.0
r_lmd_g(kz) = 0.0
r_lmd_i = sqrt(sqrt(dns_a(kz) * qci(kz) * brdli))
if (r_lmd_i > 0.0_r_size) then
r_lmd_i_p2i = exp(log(r_lmd_i) * p2i)
r_lmd_i_p2i = 0.0_r_size
braci = exp(log(6.0 / pi / dnsci) * one_third)
logarg = dns_a(kz) * qci(kz) / max(qnci(kz), 1.0e-10)
if(qnci(kz) > 1.0 .and. qci(kz) > 0.d0 .and. logarg > 0.0_r_size) then
tv_i(kz) = braci * exp(log(logarg) * one_third) * 700.0 * sqrt_dns0_rdnsa(kz) ** 0.7
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=361, combined=336, changed=62, unchanged=274, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=4, other=57)
========== pbl_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_const.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_const.f90
@domainDependant{attribute(host)}
pref, timestep, e_emit, r_pref
@end domainDependant
@domainDependant{attribute(host)}
pref, timestep, e_emit, r_pref
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=24, combined=24, changed=3, unchanged=21, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=3)
========== pbl_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_grid.H90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_grid.f90
@domainDependant{attribute(host)}
nz, shcu_levels
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_h, z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p
@end domainDependant
end subroutine
#define PBL_GRID_SET_1D_MACRO() `\
kz = 1 `\
dz_f(kz) = z_h(kz) `\
do kz = 2, nz - 1 `\
dz_f(kz) = z_h(kz) - z_h(kz - 1) `\
end do `\
do kz = 1, nz - 1 `\
dz_h = z_f(kz + 1) - z_f(kz) `\
rdz_f(kz) = 1.0 / dz_f(kz) `\
rdz_h(kz) = 1.0 / dz_h `\
f2h_m(kz) = (z_f(kz + 1) - z_h(kz)) * rdz_h(kz) `\
f2h_p(kz) = 1.0 - f2h_m(kz) `\
h2f_m(kz) = (z_h(kz) - z_f(kz)) * rdz_f(kz) `\
h2f_p(kz) = 1.0 - h2f_m(kz) `\
end do `\
kz = nz `\
rdz_f(kz) = 2.0 / (z_f(kz) - z_h(kz - 1))
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_h, z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_GRID_SET_1D_MACRO()
@end parallelRegion
if (z_h(1) == 0.0) then
STOP
if (z_h(kz) - z_h(kz - 1) == 0.0) then
STOP
if (z_f(kz + 1) - z_f(kz) == 0.0) then
STOP
PBL_GRID_SET_1D_MACRO()
@domainDependant{attribute(host)}
nz, shcu_levels
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_h, z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p
@end domainDependant
end subroutine
#define PBL_GRID_SET_1D_MACRO() `\
kz = 1 `\
dz_f(kz) = z_h(kz) `\
do kz = 2, nz - 1 `\
dz_f(kz) = z_h(kz) - z_h(kz - 1) `\
end do `\
do kz = 1, nz - 1 `\
dz_h = z_f(kz + 1) - z_f(kz) `\
rdz_f(kz) = 1.0 / dz_f(kz) `\
rdz_h(kz) = 1.0 / dz_h `\
f2h_m(kz) = (z_f(kz + 1) - z_h(kz)) * rdz_h(kz) `\
f2h_p(kz) = 1.0 - f2h_m(kz) `\
h2f_m(kz) = (z_h(kz) - z_f(kz)) * rdz_f(kz) `\
h2f_p(kz) = 1.0 - h2f_m(kz) `\
end do `\
kz = nz `\
rdz_f(kz) = 2.0 / (z_f(kz) - z_h(kz - 1))
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_h, z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_GRID_SET_1D_MACRO()
@end parallelRegion
if (z_h(1) == 0.0) then
STOP
if (z_h(kz) - z_h(kz - 1) == 0.0) then
STOP
if (z_f(kz + 1) - z_f(kz) == 0.0) then
STOP
PBL_GRID_SET_1D_MACRO()
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=120, combined=116, changed=53, unchanged=63, subroutine_definitions=3, calls=1, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=5, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=42)
========== pbl_gsmym =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_gsmym.f90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_gsmym.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=642, combined=592, changed=1, unchanged=591, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== pbl_implic =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_implic.H90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_implic.f90
public :: pbl_implic_solve, pbl_implic_solve_1D
#define PBL_IMPLIC_SOLVE_1D_MACRO() `\
do kz = nz, 2, -1 `\
aa(kz - 1) = aa(kz - 1) * bb(kz) `\
bb(kz - 1) = bb(kz - 1) * bb(kz) - aa(kz) * cc(kz - 1) `\
qq(kz - 1) = qq(kz - 1) * bb(kz) - qq(kz) * cc(kz - 1) `\
end do `\
qq(1) = qq(1) / bb(1) `\
do kz = 2, nz `\
qq(kz) = (qq(kz) - aa(kz) * qq(kz - 1)) / bb(kz) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa, bb, cc, qq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_IMPLIC_SOLVE_1D_MACRO()
@end parallelRegion
PBL_IMPLIC_SOLVE_1D_MACRO()
public :: pbl_implic_solve, pbl_implic_solve_1D
#define PBL_IMPLIC_SOLVE_1D_MACRO() `\
do kz = nz, 2, -1 `\
aa(kz - 1) = aa(kz - 1) * bb(kz) `\
bb(kz - 1) = bb(kz - 1) * bb(kz) - aa(kz) * cc(kz - 1) `\
qq(kz - 1) = qq(kz - 1) * bb(kz) - qq(kz) * cc(kz - 1) `\
end do `\
qq(1) = qq(1) / bb(1) `\
do kz = 2, nz `\
qq(kz) = (qq(kz) - aa(kz) * qq(kz - 1)) / bb(kz) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa, bb, cc, qq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_IMPLIC_SOLVE_1D_MACRO()
@end parallelRegion
PBL_IMPLIC_SOLVE_1D_MACRO()
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=51, combined=51, changed=26, unchanged=25, subroutine_definitions=2, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=21)
========== pbl_mym =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym.H90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym.f90
#define PBL_MYM_LEVEL2_1D_MACRO() `\
do kz = 1, nz `\
gm(kz) =   dvdzm(kz) * dvdzm(kz) `\
gh(kz) = - dbdz(kz) `\
ri = - gh(kz) / max( gm(kz), 1.0e-10_r_size ) `\
rf = min(ri1 * (ri + ri2 - sqrt(ri ** 2 - ri3 * ri + ri4)), rfc ) `\
sh(kz) = shc * (rfc - rf) / (1.0 - rf) `\
sm(kz) = smc * (rf1 - rf) / (rf2 - rf) * sh(kz) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dbdz, dvdzm, gm, gh, sm, sh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_LEVEL2_1D_MACRO()
@end parallelRegion
PBL_MYM_LEVEL2_1D_MACRO()
#define PBL_MYM_LENGTH_1D_MACRO() `\
elt = 0.0 `\
vsc = 0.0 `\
do kz = 1, nz - 1 `\
qdz = qkw(kz) * dz_f(kz) `\
elt = elt + qdz * z_f(kz) `\
vsc = vsc + qdz `\
end do `\
elt = max(my_alpha1 * elt / (vsc + 1.e-10_r_size), elt_min) `\
vsc = (elt * max(fb_surf, 0.0_r_size)) ** one_third `\
do kz = 1, nz `\
if (dbdz(kz) > 0.0) then `\
rbv = 1.0 / sqrt(dbdz(kz)) `\
elb = my_alpha2 * qkw(kz) * rbv `\ * (1.0 + alp32 * sqrt(vsc * rbv / elt)) `\
else `\
elb = 1.0e10 `\
end if `\
if (z_f(kz) > my_z_limit_elb) then `\
elb = min(elb, dz_f(min(kz, nz - 1))) `\
end if `\
zeta = z_f(kz) * r_mosurf `\
if (zeta > 0.0) then `\
els = vkman * z_f(kz) / (1.0 + cns * min(zeta, zmax)) `\
else `\
els = vkman * z_f(kz) `\
* min((1.0_r_size - my_alpha4 * zeta) ** 0.2_r_size, 2.0_r_size) `\
end if `\
el(kz) = elb / ( elb / elt + elb / els + 1.0) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, r_mosurf, z_f, dz_f, dbdz, qkw, el
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_LENGTH_1D_MACRO()
@end parallelRegion
PBL_MYM_LENGTH_1D_MACRO()
#define PBL_MYM_PHI_CALC_1D_MACRO() `\
if (my_lowest_pd_surf == businger) then `\
zeta = min(z_f1 * r_mosurf, my_zeta_max) `\
if (zeta >= 0.0) then `\
pmz = 1.0 + 4.7 * zeta `\
phh = pr + 4.7 * zeta `\
else `\
pmz = 1.0 / sqrt(sqrt(1.0 - 15.0 * zeta)) `\
phh = pr / sqrt(1.0 - 9.0 * zeta) `\
end if `\
pmz = pmz - zeta `\
else if (my_lowest_pd_surf == bh1991) then `\
zeta = min(z_f1 * r_mosurf, my_zeta_max) `\
if(zeta >= 0) then `\
tmp = bel_b * exp(-bel_d * zeta) `\
* (bel_d * zeta - bel_c - 1.0) `\
pmz = 1.0 - zeta * (tmp - bel_a) `\
phh = 1.0 - zeta * (tmp - `\
sqrt(1.0 + two_thirds * bel_a * zeta)) `\
else `\
tmp = sqrt(1.0 - 16.0 * zeta) `\
pmz = 1.0 / sqrt(tmp) `\
phh = 1.0 / tmp `\
end if `\
pmz = pmz - zeta `\
integer(4), intent(in) :: my_lowest_pd_surf, businger, bh1991
@domainDependant{}
nx, ny, my_lowest_pd_surf, businger, bh1991, one_third, two_thirds, pr, r_mosurf, z_f1, pmz, phh
@end domainDependant
PBL_MYM_PHI_CALC_1D_MACRO()
PBL_MYM_PHI_CALC_1D_MACRO()
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
r_mosurf, u_s, ftl_surf, fqw_surf, z_f1, pdk1, pdt1, pdq1, pdc1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, gm, gh, el, sm, sh, qdiv, cw25
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, r_mosurf, qkw, dbdz, dvdzm, z_f, dz_f, gm, gh, sm, sh, qdiv, el, cw25
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
gm, gh, sm, sh, vt, vq, gtr, wb_ng, dtldz, dqwdz, dudz, dvdz,
tsq, qsq, cov, qkw, cw25, el, rdz_f,
qdiv, dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg,
pdk, pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
c2sq, smd_coef, gamv_coef
gamt, gamt_tsq, gamt_cov, gamt_res, gamt_factor, gamq,
gamq_qsq, gamq_cov, gamq_res, gamq_factor, pdc_factor, smd
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, r_mosurf, u_s, gm, gh, sm, sh, vt, vq, gtr, wb_ng,
dtldz, dqwdz, dudz, dvdz, tsq, qsq, cov, qkw, cw25, el, z_f, rdz_f, qdiv,
dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg, pdk,
pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
c2sq, smd_coef, gamv_coef
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, qdiv, sm, sh, gm, gh, wb_ng, dtldz, dqwdz, el, pdk, pdt, pdq, pdc, dfm, dfh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
r_mosurf, u_s, ftl_surf, fqw_surf, qkw, qdiv, sm, sh, gm, gh, wb_ng, dtldz, dqwdz, el, z_f, pdk, pdt, pdq, pdc, dfm, dfh
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, pdt_tsq, pdt, pdq_qsq, pdq, pdc_cov, pdc,
bp_tsq, rp_tsq, bp_qsq, rp_qsq, bp_cov, rp_cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
f2h_m, f2h_p, rdz_f, rdz_h, qkw, el, dfm, pdt_tsq, pdt_cov,
pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
tsq, qsq, cov, tend_tsq, tend_qsq, tend_cov
bp_tsq, rp_tsq, bp_qsq, rp_qsq, bp_cov, rp_cov
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
el, pdt, pdq, pdc, qkw, tsq, qsq, cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, tsq, qsq, cov, tend_tsq, tend_qsq, tend_cov, el, vt, vq, c2sq,
gm, smd_coef, gamv_coef,
pdk, rp, bp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qke, qkw, tsq, qsq, cov, dfm, tend_tsq, tend_qsq, tend_cov,
el, vt, vq, c2sq, gm, smd_coef, gamv_coef, f2h_m, f2h_p, rdz_f, rdz_h, pdk, tend_qke
rp, bp
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, pdk, rp, bp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qke, qkw, dfm, el, f2h_m, f2h_p, rdz_f, rdz_h, pdk, tend_qke
rp, bp
@end domainDependant
#define PBL_MYM_PREPARE_1D_MACRO() `\
do kz = 1, nz `\
qkw(kz) = sqrt(max(qke(kz), 1.e-20_r_size)) `\
ptv = pt(kz) * (1.0 + c_virtual * qv(kz) - qc(kz) - qci(kz)) `\
gtr(kz) = grav / ptv `\
r_exner = (pref / prs(kz)) ** rdvcp `\
temp(kz) = pt(kz) / r_exner `\
tl(kz) = pt(kz) - r_cp * r_exner * (hlatnt * qc(kz) + hls * qci(kz)) `\
qw(kz) = qv(kz) + qc(kz) + qci(kz) `\
end do `\
do kz = 1, nz - 1 `\
tl_h(kz) = f2h_m(kz) * tl(kz) + f2h_p(kz) * tl(kz + 1) `\
qw_h(kz) = f2h_m(kz) * qw(kz) + f2h_p(kz) * qw(kz + 1) `\
u_h(kz) = f2h_m(kz) * uvel(kz) + f2h_p(kz) * uvel(kz + 1) `\
v_h(kz) = f2h_m(kz) * vvel(kz) + f2h_p(kz) * vvel(kz + 1) `\
end do `\
kz = 1 `\
dtldz(kz) = (tl(kz + 1) - tl(kz)) * rdz_h(kz) `\
dqwdz(kz) = (qw(kz + 1) - qw(kz)) * rdz_h(kz) `\
dudz(kz) = u_h(kz) * rdz_f(kz) `\
dvdz(kz) = v_h(kz) * rdz_f(kz) `\
dvdzm(kz) = sqrt(dudz(kz) ** 2 + dvdz(kz) ** 2) `\
do kz = 2, nz - 1 `\
dtldz(kz) = (tl_h(kz) - tl_h(kz - 1)) * rdz_f(kz) `\
dqwdz(kz) = (qw_h(kz) - qw_h(kz - 1)) * rdz_f(kz) `\
dudz(kz) = (u_h(kz) - u_h(kz - 1)) * rdz_f(kz) `\
dvdz(kz) = (v_h(kz) - v_h(kz - 1)) * rdz_f(kz) `\
dvdzm(kz) = sqrt(dudz(kz) ** 2 + dvdz(kz) ** 2) `\
end do `\
kz = nz `\
dtldz(kz) = dtldz(kz - 1) `\
dqwdz(kz) = dqwdz(kz - 1) `\
dudz(kz) = dudz(kz - 1) `\
dvdz(kz) = dvdz(kz - 1) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
uvel, vvel, pt, qv, qc, qci, prs, qke, rdz_f, rdz_h, f2h_m, f2h_p,
qkw, gtr, temp, tl, qw, dtldz, dqwdz, dudz, dvdz, dvdzm
tl_h, qw_h, u_h, v_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_PREPARE_1D_MACRO()
@end parallelRegion
PBL_MYM_PREPARE_1D_MACRO()
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, dtldz, dqwdz, gtr, fb_surf, vt, vq, dbdz
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
cld_gauss, cld, wb_ng
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, ustar, p_surf, z_f, u, v, temp, pt, qv, qc, qci, tl, qw, prs,
exner, dtldz, dqwdz, tsq, qsq, cov, gtr,
fb_surf, vt, vq, cld, ql, dbdz, wb_ng
q1, cld_gauss, zhpar
@end domainDependant
#define PBL_MYM_LEVEL2_1D_MACRO() `\
do kz = 1, nz `\
gm(kz) =   dvdzm(kz) * dvdzm(kz) `\
gh(kz) = - dbdz(kz) `\
ri = - gh(kz) / max( gm(kz), 1.0e-10_r_size ) `\
rf = min(ri1 * (ri + ri2 - sqrt(ri ** 2 - ri3 * ri + ri4)), rfc ) `\
sh(kz) = shc * (rfc - rf) / (1.0 - rf) `\
sm(kz) = smc * (rf1 - rf) / (rf2 - rf) * sh(kz) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dbdz, dvdzm, gm, gh, sm, sh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_LEVEL2_1D_MACRO()
@end parallelRegion
PBL_MYM_LEVEL2_1D_MACRO()
#define PBL_MYM_LENGTH_1D_MACRO() `\
elt = 0.0 `\
vsc = 0.0 `\
do kz = 1, nz - 1 `\
qdz = qkw(kz) * dz_f(kz) `\
elt = elt + qdz * z_f(kz) `\
vsc = vsc + qdz `\
end do `\
elt = max(my_alpha1 * elt / (vsc + 1.e-10_r_size), elt_min) `\
vsc = (elt * max(fb_surf, 0.0_r_size)) ** one_third `\
do kz = 1, nz `\
if (dbdz(kz) > 0.0) then `\
rbv = 1.0 / sqrt(dbdz(kz)) `\
elb = my_alpha2 * qkw(kz) * rbv `\ * (1.0 + alp32 * sqrt(vsc * rbv / elt)) `\
else `\
elb = 1.0e10 `\
end if `\
if (z_f(kz) > my_z_limit_elb) then `\
elb = min(elb, dz_f(min(kz, nz - 1))) `\
end if `\
zeta = z_f(kz) * r_mosurf `\
if (zeta > 0.0) then `\
els = vkman * z_f(kz) / (1.0 + cns * min(zeta, zmax)) `\
else `\
els = vkman * z_f(kz) `\
* min((1.0_r_size - my_alpha4 * zeta) ** 0.2_r_size, 2.0_r_size) `\
end if `\
el(kz) = elb / ( elb / elt + elb / els + 1.0) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, r_mosurf, z_f, dz_f, dbdz, qkw, el
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_LENGTH_1D_MACRO()
@end parallelRegion
PBL_MYM_LENGTH_1D_MACRO()
#define PBL_MYM_PHI_CALC_1D_MACRO() `\
if (my_lowest_pd_surf == businger) then `\
zeta = min(z_f1 * r_mosurf, my_zeta_max) `\
if (zeta >= 0.0) then `\
pmz = 1.0 + 4.7 * zeta `\
phh = pr + 4.7 * zeta `\
else `\
pmz = 1.0 / sqrt(sqrt(1.0 - 15.0 * zeta)) `\
phh = pr / sqrt(1.0 - 9.0 * zeta) `\
end if `\
pmz = pmz - zeta `\
else if (my_lowest_pd_surf == bh1991) then `\
zeta = min(z_f1 * r_mosurf, my_zeta_max) `\
if(zeta >= 0) then `\
tmp = bel_b * exp(-bel_d * zeta) `\
* (bel_d * zeta - bel_c - 1.0) `\
pmz = 1.0 - zeta * (tmp - bel_a) `\
phh = 1.0 - zeta * (tmp - `\
sqrt(1.0 + two_thirds * bel_a * zeta)) `\
else `\
tmp = sqrt(1.0 - 16.0 * zeta) `\
pmz = 1.0 / sqrt(tmp) `\
phh = 1.0 / tmp `\
end if `\
pmz = pmz - zeta `\
integer(4), intent(in) :: my_lowest_pd_surf, businger, bh1991
@domainDependant{}
nx, ny, my_lowest_pd_surf, businger, bh1991, one_third, two_thirds, pr, r_mosurf, z_f1, pmz, phh
@end domainDependant
PBL_MYM_PHI_CALC_1D_MACRO()
PBL_MYM_PHI_CALC_1D_MACRO()
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
r_mosurf, u_s, ftl_surf, fqw_surf, z_f1, pdk1, pdt1, pdq1, pdc1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, gm, gh, el, sm, sh, qdiv, cw25
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, r_mosurf, qkw, dbdz, dvdzm, z_f, dz_f, gm, gh, sm, sh, qdiv, el, cw25
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
gm, gh, sm, sh, vt, vq, gtr, wb_ng, dtldz, dqwdz, dudz, dvdz,
tsq, qsq, cov, qkw, cw25, el, rdz_f,
qdiv, dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg,
pdk, pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
c2sq, smd_coef, gamv_coef
gamt, gamt_tsq, gamt_cov, gamt_res, gamt_factor, gamq,
gamq_qsq, gamq_cov, gamq_res, gamq_factor, pdc_factor, smd
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, r_mosurf, u_s, gm, gh, sm, sh, vt, vq, gtr, wb_ng,
dtldz, dqwdz, dudz, dvdz, tsq, qsq, cov, qkw, cw25, el, z_f, rdz_f, qdiv,
dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg, pdk,
pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
c2sq, smd_coef, gamv_coef
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, qdiv, sm, sh, gm, gh, wb_ng, dtldz, dqwdz, el, pdk, pdt, pdq, pdc, dfm, dfh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
r_mosurf, u_s, ftl_surf, fqw_surf, qkw, qdiv, sm, sh, gm, gh, wb_ng, dtldz, dqwdz, el, z_f, pdk, pdt, pdq, pdc, dfm, dfh
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, pdt_tsq, pdt, pdq_qsq, pdq, pdc_cov, pdc,
bp_tsq, rp_tsq, bp_qsq, rp_qsq, bp_cov, rp_cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
f2h_m, f2h_p, rdz_f, rdz_h, qkw, el, dfm, pdt_tsq, pdt_cov,
pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc,
tsq, qsq, cov, tend_tsq, tend_qsq, tend_cov
bp_tsq, rp_tsq, bp_qsq, rp_qsq, bp_cov, rp_cov
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
el, pdt, pdq, pdc, qkw, tsq, qsq, cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, tsq, qsq, cov, tend_tsq, tend_qsq, tend_cov, el, vt, vq, c2sq,
gm, smd_coef, gamv_coef,
pdk, rp, bp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qke, qkw, tsq, qsq, cov, dfm, tend_tsq, tend_qsq, tend_cov,
el, vt, vq, c2sq, gm, smd_coef, gamv_coef, f2h_m, f2h_p, rdz_f, rdz_h, pdk, tend_qke
rp, bp
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, pdk, rp, bp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qke, qkw, dfm, el, f2h_m, f2h_p, rdz_f, rdz_h, pdk, tend_qke
rp, bp
@end domainDependant
#define PBL_MYM_PREPARE_1D_MACRO() `\
do kz = 1, nz `\
qkw(kz) = sqrt(max(qke(kz), 1.e-20_r_size)) `\
ptv = pt(kz) * (1.0 + c_virtual * qv(kz) - qc(kz) - qci(kz)) `\
gtr(kz) = grav / ptv `\
r_exner = (pref / prs(kz)) ** rdvcp `\
temp(kz) = pt(kz) / r_exner `\
tl(kz) = pt(kz) - r_cp * r_exner * (hlatnt * qc(kz) + hls * qci(kz)) `\
qw(kz) = qv(kz) + qc(kz) + qci(kz) `\
end do `\
do kz = 1, nz - 1 `\
tl_h(kz) = f2h_m(kz) * tl(kz) + f2h_p(kz) * tl(kz + 1) `\
qw_h(kz) = f2h_m(kz) * qw(kz) + f2h_p(kz) * qw(kz + 1) `\
u_h(kz) = f2h_m(kz) * uvel(kz) + f2h_p(kz) * uvel(kz + 1) `\
v_h(kz) = f2h_m(kz) * vvel(kz) + f2h_p(kz) * vvel(kz + 1) `\
end do `\
kz = 1 `\
dtldz(kz) = (tl(kz + 1) - tl(kz)) * rdz_h(kz) `\
dqwdz(kz) = (qw(kz + 1) - qw(kz)) * rdz_h(kz) `\
dudz(kz) = u_h(kz) * rdz_f(kz) `\
dvdz(kz) = v_h(kz) * rdz_f(kz) `\
dvdzm(kz) = sqrt(dudz(kz) ** 2 + dvdz(kz) ** 2) `\
do kz = 2, nz - 1 `\
dtldz(kz) = (tl_h(kz) - tl_h(kz - 1)) * rdz_f(kz) `\
dqwdz(kz) = (qw_h(kz) - qw_h(kz - 1)) * rdz_f(kz) `\
dudz(kz) = (u_h(kz) - u_h(kz - 1)) * rdz_f(kz) `\
dvdz(kz) = (v_h(kz) - v_h(kz - 1)) * rdz_f(kz) `\
dvdzm(kz) = sqrt(dudz(kz) ** 2 + dvdz(kz) ** 2) `\
end do `\
kz = nz `\
dtldz(kz) = dtldz(kz - 1) `\
dqwdz(kz) = dqwdz(kz - 1) `\
dudz(kz) = dudz(kz - 1) `\
dvdz(kz) = dvdz(kz - 1) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
uvel, vvel, pt, qv, qc, qci, prs, qke, rdz_f, rdz_h, f2h_m, f2h_p,
qkw, gtr, temp, tl, qw, dtldz, dqwdz, dudz, dvdz, dvdzm
tl_h, qw_h, u_h, v_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_PREPARE_1D_MACRO()
@end parallelRegion
PBL_MYM_PREPARE_1D_MACRO()
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, dtldz, dqwdz, gtr, fb_surf, vt, vq, dbdz
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
cld_gauss, cld, wb_ng
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ftl_surf, fqw_surf, ustar, p_surf, z_f, u, v, temp, pt, qv, qc, qci, tl, qw, prs,
exner, dtldz, dqwdz, tsq, qsq, cov, gtr,
fb_surf, vt, vq, cld, ql, dbdz, wb_ng
q1, cld_gauss, zhpar
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1383, combined=1281, changed=384, unchanged=897, subroutine_definitions=25, calls=21, imports=17, data_definitions=0, save=0, parameter=10, openmp=0, style=11, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=20, other=278)
========== pbl_mym_condensation =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_condensation.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_condensation.f90
public :: pbl_mym_condensation_run, pbl_mym_condensation_ini
@domainDependant{attribute(host)}
rr2, rrp, temp_ice, c01, c03, c05, c07, c09, c11, c13, factor
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
temp, ptl, qw, prs, tsq, qsq, cov, vt, vq, cld, ql, q1
hl_ovr_cp, exner, alp, bet, sgm, erf_arg, erf_val
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ptl, qw, prs, tsq, qsq, cov, erf_arg, q1, hl_ovr_cp, exner, alp, bet, sgm
qmq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
integer(4) :: iter
@domainDependant{}
nx, ny, nn
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
x, y
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
x02 = x(iter) * x(iter)
y(iter) = x(iter) * ( + c01 - c03 * x02 + c05 * x04 - c07 * x06 + c09 * x08 - c11 * x10 + c13 * x12)
if(x(iter) > 0) then
y(iter) = min(y(iter), erfmax)
y(iter) = max(y(iter), -erfmax)
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
temp, qw, q1, sgm, exner, hl_ovr_cp, alp, bet, erf_val, vt, vq, cld, ql
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
vt(kz) = qt - rac * bet(kz)
vq(kz) = c_virtual * pt_tmp + rac
@end parallelRegion
public :: pbl_mym_condensation_run, pbl_mym_condensation_ini
@domainDependant{attribute(host)}
rr2, rrp, temp_ice, c01, c03, c05, c07, c09, c11, c13, factor
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
temp, ptl, qw, prs, tsq, qsq, cov, vt, vq, cld, ql, q1
hl_ovr_cp, exner, alp, bet, sgm, erf_arg, erf_val
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ptl, qw, prs, tsq, qsq, cov, erf_arg, q1, hl_ovr_cp, exner, alp, bet, sgm
qmq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
integer(4) :: iter
@domainDependant{}
nx, ny, nn
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
x, y
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
x02 = x(iter) * x(iter)
y(iter) = x(iter) * ( + c01 - c03 * x02 + c05 * x04 - c07 * x06 + c09 * x08 - c11 * x10 + c13 * x12)
if(x(iter) > 0) then
y(iter) = min(y(iter), erfmax)
y(iter) = max(y(iter), -erfmax)
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
temp, qw, q1, sgm, exner, hl_ovr_cp, alp, bet, erf_val, vt, vq, cld, ql
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
vt(kz) = qt - rac * bet(kz)
vq(kz) = c_virtual * pt_tmp + rac
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=268, combined=251, changed=84, unchanged=167, subroutine_definitions=5, calls=3, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=3, parallel_loops=1, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=21, other=45)
========== pbl_mym_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_const.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_const.f90
pp_qke_max = 500.0
pp_qke_max = 500.0
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=101, combined=100, changed=2, unchanged=98, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=1, other=1)
========== pbl_mym_flux =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_flux.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_flux.f90
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg, u, v, tl, qw, rdz_h, f2h_m, f2h_p,
taux, tauy, ftl, fqw
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, dfh, u, v, tl, qw, rdz_h, f2h_m, f2h_p, taux, tauy, ftl, fqw
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, dfh, dfu_cg, dfv_cg, dft_cg, dfq_cg, u, v, tl, qw, rdz_h, f2h_m, f2h_p,
taux, tauy, ftl, fqw
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, dfh, u, v, tl, qw, rdz_h, f2h_m, f2h_p, taux, tauy, ftl, fqw
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=116, combined=110, changed=23, unchanged=87, subroutine_definitions=2, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=19)
========== pbl_mym_initialize =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_initialize.f90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_initialize.f90
dbdz(kz) = gtr(kz) * (vt * dtldz(kz) + vq * dqwdz(kz))
if (bb_qke(kz) == 0.0_r_size) then
qke(kz) = min(max(qke(kz), 1.0e-20_r_size), pp_qke_max)
dbdz(kz) = gtr(kz) * (vt * dtldz(kz) + vq * dqwdz(kz))
if (bb_qke(kz) == 0.0_r_size) then
qke(kz) = min(max(qke(kz), 1.0e-20_r_size), pp_qke_max)
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=217, combined=204, changed=17, unchanged=187, subroutine_definitions=0, calls=10, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=3)
========== pbl_mym_main =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_main.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_main.f90
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf, tauy_surf, ftl_surf, fqw_surf, u_s, r_mosurf, p_surf,
uvel, vvel, pt, qv, qc, qci, prs, exner, qke, tsq, qsq, cov, z_f, dz_f, rdz_f, rdz_h,
f2h_m, f2h_p, h2f_m, h2f_p, dfm, dfh, tend_qke, tend_tsq, tend_qsq, tend_cov, taux_ex, tauy_ex, ftl_ex, fqw_ex
fb_surf, qkw, gtr, temp, tl, qw, wb_ng, dtldz, dqwdz, dbdz, dudz, dvdz, dvdzm,
vt, vq, cld, ql, gm, gh, sm, sh, qdiv, el, cw25, dfu_cg, dfv_cg, dft_cg, dfq_cg,
pdk, pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc, c2sq, smd_coef, gamv_coef
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf, tauy_surf, ftl_surf, fqw_surf, u_s,
r_mosurf, p_surf, uvel, vvel, pt, qv, qc, qci, prs, exner, qke, tsq, qsq, cov,
z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p,
dfm, dfh, tend_qke, tsq_new, qsq_new, cov_new, taux_ex, tauy_ex, ftl_ex, fqw_ex
fb_surf, qkw, gtr, temp, tl, qw, wb_ng, dtldz, dqwdz, dbdz, dudz, dvdz, dvdzm,
vt, vq, cld, ql, gm, gh, sm, sh, qdiv, el, cw25, pdk, pdt, pdq, pdc
@end domainDependant
qke(kz) = min(max(qke(kz), 1.e-20_r_size), pp_qke_max)
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf, tauy_surf, ftl_surf, fqw_surf, u_s, r_mosurf, p_surf,
uvel, vvel, pt, qv, qc, qci, prs, exner, qke, tsq, qsq, cov, z_f, dz_f, rdz_f, rdz_h,
f2h_m, f2h_p, h2f_m, h2f_p, dfm, dfh, tend_qke, tend_tsq, tend_qsq, tend_cov, taux_ex, tauy_ex, ftl_ex, fqw_ex
fb_surf, qkw, gtr, temp, tl, qw, wb_ng, dtldz, dqwdz, dbdz, dudz, dvdz, dvdzm,
vt, vq, cld, ql, gm, gh, sm, sh, qdiv, el, cw25, dfu_cg, dfv_cg, dft_cg, dfq_cg,
pdk, pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_tsq, pdc_qsq, pdc_cov, pdc, c2sq, smd_coef, gamv_coef
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf, tauy_surf, ftl_surf, fqw_surf, u_s,
r_mosurf, p_surf, uvel, vvel, pt, qv, qc, qci, prs, exner, qke, tsq, qsq, cov,
z_f, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p,
dfm, dfh, tend_qke, tsq_new, qsq_new, cov_new, taux_ex, tauy_ex, ftl_ex, fqw_ex
fb_surf, qkw, gtr, temp, tl, qw, wb_ng, dtldz, dqwdz, dbdz, dudz, dvdz, dvdzm,
vt, vq, cld, ql, gm, gh, sm, sh, qdiv, el, cw25, pdk, pdt, pdq, pdc
@end domainDependant
qke(kz) = min(max(qke(kz), 1.e-20_r_size), pp_qke_max)
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=274, combined=218, changed=38, unchanged=180, subroutine_definitions=2, calls=14, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=19)
========== pbl_mym_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_option.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_option.f90
@domainDependant{attribute(host)}
levflag, imp_mode, tke_dlen, my_lowest_pd_surf, l_tke_dlen_blackadar, l_my_improved_closure,
l_my_condense, l_shcu_buoy, l_my_prod_adj, l_my_lowest_pd_surf_tqc
@end domainDependant
@domainDependant{attribute(host)}
levflag, imp_mode, tke_dlen, my_lowest_pd_surf, l_tke_dlen_blackadar, l_my_improved_closure,
l_my_condense, l_shcu_buoy, l_my_prod_adj, l_my_lowest_pd_surf_tqc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=51, combined=43, changed=4, unchanged=39, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=4)
========== pbl_mym_option_symbol =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_option_symbol.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_option_symbol.f90
@domainDependant{attribute(host)}
none, deardorff, mymodel25, mymodel3, my_length, ddf_length, non_local_like_length,
no_pd_surf, businger, bh1991, full_impl, half_impl, expl
@end domainDependant
@domainDependant{attribute(host)}
none, deardorff, mymodel25, mymodel3, my_length, ddf_length, non_local_like_length,
no_pd_surf, businger, bh1991, full_impl, half_impl, expl
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=20, changed=4, unchanged=16, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=4)
========== pbl_mym_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_parm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=46, combined=39, changed=0, unchanged=39, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pbl_mym_simeq =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_mym_simeq.H90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_mym_simeq.f90
public :: pbl_mym_diff_matcoef, pbl_mym_diff_matcoef_1d
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
prod, disp_coef, field, aa, bb, cc, tend
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, prod, disp_coef, field, f2h_m, f2h_p, rdz_f, rdz_h, tend
aa, bb, cc
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa, bb, cc, qkw, el, pdt_tsq, pdt_cov, pdt,
pdq_qsq, pdq_cov, pdq, pdc_cov, pdc_tsq, pdc_qsq, pdc, tsq,
qsq, cov, qq_tsq, qq_qsq, qq_cov,
aa_tsq, bb_tsq, cc_tsq, pp_tc,
aa_qsq, bb_qsq, cc_qsq, pp_qc,
aa_cov, bb_cov, cc_cov, pp_ct, pp_cq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, dfm, f2h_m, f2h_p, rdz_f, rdz_h,
pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_cov, pdc_tsq, pdc_qsq, pdc, tsq, qsq, cov,
tend_tsq, tend_qsq, tend_cov
aa, bb, cc, qq_tsq, qq_qsq, qq_cov,
aa_tsq, bb_tsq, cc_tsq, pp_tc,
aa_qsq, bb_qsq, cc_qsq, pp_qc,
aa_cov, bb_cov, cc_cov, pp_ct, pp_cq
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, tsq_scale, qsq_scale, cov_scale, tc_scale, qc_scale, ct_scale, cq_scale
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, pp_tc_k, pp_qc_k, pp_ct_k, pp_cq_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, r_tsq_scale, r_qsq_scale, r_cov_scale
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_tsq_k, tend_qsq_k, tend_cov_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k,
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tend_tsq_k, tend_qsq_k, tend_cov_k
endflag
@end domainDependant
#define PBL_MYM_SIMEQ_ILUD2(qq_tsq_k, qq_qsq_k, qq_cov_k, tsq_k, qsq_k, cov_k) `\
tsq_k(1) = qq_tsq_k(1) * r_bbp_tsq_k(1) `\
qsq_k(1) = qq_qsq_k(1) * r_bbp_qsq_k(1) `\
`\
do kz = 2, nz `\
tsq_k(kz) = (qq_tsq_k(kz) - aap_tsq_k(kz) * tsq_k(kz - 1)) * r_bbp_tsq_k(kz) `\
qsq_k(kz) = (qq_qsq_k(kz) - aap_qsq_k(kz) * qsq_k(kz - 1)) * r_bbp_qsq_k(kz) `\
end do `\
`\
kz = 1 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_ct_k(kz, 2) * tsq_k(kz + 2) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- ppp_cq_k(kz, 2) * qsq_k(kz + 2)) `\
* r_bbp_cov_k(kz) `\
`\
do kz = 2, nz - 2 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_ct_k(kz, 2) * tsq_k(kz + 2) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- ppp_cq_k(kz, 2) * qsq_k(kz + 2) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
end do `\
`\
kz = nz - 1 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
`\
kz = nz `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
`\
do kz = nz - 1, 1, -1 `\
cov_k(kz) = cov_k(kz) `\
- ccp_cov_k(kz) * cov_k(kz + 1) * r_bbp_cov_k(kz) `\
end do `\
`\
kz = nz `\
qsq_k(kz) = qsq_k(kz) - (ppp_qc_k(kz, 0) * cov_k(kz) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_qc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) - (ppp_tc_k(kz, 0) * cov_k(kz) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_tc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_tsq_k(kz) `\
`\
do kz = nz - 1, 3, -1 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_qc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_tc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_tsq_k(kz) `\
end do `\
`\
kz = 2 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1)) `\
* r_bbp_tsq_k(kz) `\
`\
kz = 1 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1)) `\
* r_bbp_tsq_k(kz)
#define PBL_MYM_SIMEQ_MATRIX_PROD(x_tsq_k, x_qsq_k, x_cov_k, y_tsq_k, y_qsq_k, y_cov_k) `\
kz = 1 `\
y_tsq_k(kz) =      bb_tsq_k(kz) * x_tsq_k(kz) `\
+ cc_tsq_k(kz) * x_tsq_k(kz + 1) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) =      bb_qsq_k(kz) * x_qsq_k(kz) `\
+ cc_qsq_k(kz) * x_qsq_k(kz + 1) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) =     bb_cov_k(kz) * x_cov_k(kz) `\
+ cc_cov_k(kz) * x_cov_k(kz + 1) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
`\
do kz = 2, nz - 1 `\
y_tsq_k(kz) = aa_tsq_k(kz) * x_tsq_k(kz - 1) `\
+ bb_tsq_k(kz) * x_tsq_k(kz) `\
+ cc_tsq_k(kz) * x_tsq_k(kz + 1) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) = aa_qsq_k(kz) * x_qsq_k(kz - 1) `\
+ bb_qsq_k(kz) * x_qsq_k(kz) `\
+ cc_qsq_k(kz) * x_qsq_k(kz + 1) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) = aa_cov_k(kz) * x_cov_k(kz - 1) `\
+ bb_cov_k(kz) * x_cov_k(kz) `\
+ cc_cov_k(kz) * x_cov_k(kz + 1) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
end do `\
`\
kz = nz `\
y_tsq_k(kz) = aa_tsq_k(kz) * x_tsq_k(kz - 1) `\
+ bb_tsq_k(kz) * x_tsq_k(kz) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) = aa_qsq_k(kz) * x_qsq_k(kz - 1) `\
+ bb_qsq_k(kz) * x_qsq_k(kz) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) = aa_cov_k(kz) * x_cov_k(kz - 1) `\
+ bb_cov_k(kz) * x_cov_k(kz) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
integer(4), intent(in) :: nx, ny, max_itr
@domainDependant{}
nx, ny, max_itr, eps
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k, aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k, aap_qsq_k, r_bbp_qsq_k, ccp_qsq_k, aap_cov_k, r_bbp_cov_k, ccp_cov_k,
ppp_tc_k, ppp_qc_k, ppp_ct_k, ppp_cq_k, tend_tsq_k, tend_qsq_k, tend_cov_k, endflag
rvec_tsq, rvec_qsq, rvec_cov, r0vec_tsq, r0vec_qsq, r0vec_cov, pvec_tsq, pvec_qsq, pvec_cov,
ppvec_tsq, ppvec_qsq, ppvec_cov, vvec_tsq, vvec_qsq, vvec_cov, svec_tsq, svec_qsq, svec_cov,
ssvec_tsq, ssvec_qsq, ssvec_cov, tvec_tsq, tvec_qsq, tvec_cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_SIMEQ_ILUD2(pvec_tsq, pvec_qsq, pvec_cov, ppvec_tsq, ppvec_qsq, ppvec_cov)
PBL_MYM_SIMEQ_MATRIX_PROD(ppvec_tsq, ppvec_qsq, ppvec_cov, vvec_tsq, vvec_qsq, vvec_cov)
PBL_MYM_SIMEQ_ILUD2(svec_tsq, svec_qsq, svec_cov, ssvec_tsq, ssvec_qsq, ssvec_cov)
PBL_MYM_SIMEQ_MATRIX_PROD(ssvec_tsq, ssvec_qsq, ssvec_cov, tvec_tsq, tvec_qsq, tvec_cov)
@end parallelRegion
integer(4), intent(in) :: nx, ny, max_itr
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k, aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tend_tsq_k, tend_qsq_k, tend_cov_k, endflag
aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k, aap_qsq_k, r_bbp_qsq_k,
ccp_qsq_k, aap_cov_k, r_bbp_cov_k, ccp_cov_k, ppp_tc_k, ppp_qc_k, ppp_ct_k, ppp_cq_k
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k, aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k, aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k,
ppp_tc_k, pp1_tc_k, pp2_tc_k, aap_qsq_k, r_bbp_qsq_k, ccp_qsq_k, ppp_qc_k, pp1_qc_k, pp2_qc_k,
aap_cov_k, r_bbp_cov_k, ccp_cov_k, ppp_ct_k, ppp_cq_k, pp1_ct_k, pp1_cq_k, pp2_ct_k, pp2_cq_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: endflag
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
endflag, qq_tsq_k, qq_qsq_k, qq_cov_k,
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tsq_k, qsq_k, cov_k
amat, bvec
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
#define PBL_MYM_DIFF_MATCOEF_1D_MACRO() `\
kz = 1 `\
km_p1 = coef * ( `\ f2h_p(kz) * dfm(kz + 1) + f2h_m(kz) * dfm(kz)) `\
cc(kz) = km_p1 * rdz_f(kz) * rdz_h(kz) `\
aa(kz) = 0.0 `\
bb(kz) = - aa(kz) - cc(kz) `\
do kz = 2, nz - 1 `\
km_p1 = coef * ( `\ f2h_p(kz) * dfm(kz + 1) + f2h_m(kz) * dfm(kz)) `\
km_m1 = coef * ( `\ f2h_p(kz - 1) * dfm(kz) + f2h_m(kz - 1) * dfm(kz - 1)) `\
cc(kz) = km_p1 * rdz_f(kz) * rdz_h(kz) `\
aa(kz) = km_m1 * rdz_f(kz) * rdz_h(kz - 1) `\
bb(kz) = -aa(kz) - cc(kz) `\
end do `\
kz = nz `\
km_m1 = coef * ( `\ f2h_p(kz - 1) * dfm(kz) + f2h_m(kz - 1) * dfm(kz - 1)) `\
km_p1 = 0.0 `\
cc(kz) = 0.0 `\
aa(kz) = km_m1 * rdz_f(kz) * rdz_h(kz - 1) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, coef
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, f2h_m, f2h_p, rdz_f, rdz_h, aa, bb, cc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_DIFF_MATCOEF_1D_MACRO()
@end parallelRegion
PBL_MYM_DIFF_MATCOEF_1D_MACRO()
public :: pbl_mym_diff_matcoef, pbl_mym_diff_matcoef_1d
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
prod, disp_coef, field, aa, bb, cc, tend
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, prod, disp_coef, field, f2h_m, f2h_p, rdz_f, rdz_h, tend
aa, bb, cc
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa, bb, cc, qkw, el, pdt_tsq, pdt_cov, pdt,
pdq_qsq, pdq_cov, pdq, pdc_cov, pdc_tsq, pdc_qsq, pdc, tsq,
qsq, cov, qq_tsq, qq_qsq, qq_cov,
aa_tsq, bb_tsq, cc_tsq, pp_tc,
aa_qsq, bb_qsq, cc_qsq, pp_qc,
aa_cov, bb_cov, cc_cov, pp_ct, pp_cq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qkw, el, dfm, f2h_m, f2h_p, rdz_f, rdz_h,
pdt_tsq, pdt_cov, pdt, pdq_qsq, pdq_cov, pdq, pdc_cov, pdc_tsq, pdc_qsq, pdc, tsq, qsq, cov,
tend_tsq, tend_qsq, tend_cov
aa, bb, cc, qq_tsq, qq_qsq, qq_cov,
aa_tsq, bb_tsq, cc_tsq, pp_tc,
aa_qsq, bb_qsq, cc_qsq, pp_qc,
aa_cov, bb_cov, cc_cov, pp_ct, pp_cq
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, tsq_scale, qsq_scale, cov_scale, tc_scale, qc_scale, ct_scale, cq_scale
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, pp_tc_k, pp_qc_k, pp_ct_k, pp_cq_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, r_tsq_scale, r_qsq_scale, r_cov_scale
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_tsq_k, tend_qsq_k, tend_cov_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k,
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tend_tsq_k, tend_qsq_k, tend_cov_k
endflag
@end domainDependant
#define PBL_MYM_SIMEQ_ILUD2(qq_tsq_k, qq_qsq_k, qq_cov_k, tsq_k, qsq_k, cov_k) `\
tsq_k(1) = qq_tsq_k(1) * r_bbp_tsq_k(1) `\
qsq_k(1) = qq_qsq_k(1) * r_bbp_qsq_k(1) `\
`\
do kz = 2, nz `\
tsq_k(kz) = (qq_tsq_k(kz) - aap_tsq_k(kz) * tsq_k(kz - 1)) * r_bbp_tsq_k(kz) `\
qsq_k(kz) = (qq_qsq_k(kz) - aap_qsq_k(kz) * qsq_k(kz - 1)) * r_bbp_qsq_k(kz) `\
end do `\
`\
kz = 1 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_ct_k(kz, 2) * tsq_k(kz + 2) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- ppp_cq_k(kz, 2) * qsq_k(kz + 2)) `\
* r_bbp_cov_k(kz) `\
`\
do kz = 2, nz - 2 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_ct_k(kz, 2) * tsq_k(kz + 2) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- ppp_cq_k(kz, 2) * qsq_k(kz + 2) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
end do `\
`\
kz = nz - 1 `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_ct_k(kz, 1) * tsq_k(kz + 1) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- ppp_cq_k(kz, 1) * qsq_k(kz + 1) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
`\
kz = nz `\
cov_k(kz) = (qq_cov_k(kz) - ppp_ct_k(kz, 0) * tsq_k(kz) `\
- ppp_cq_k(kz, 0) * qsq_k(kz) `\
- aap_cov_k(kz) * cov_k(kz - 1)) `\
* r_bbp_cov_k(kz) `\
`\
do kz = nz - 1, 1, -1 `\
cov_k(kz) = cov_k(kz) `\
- ccp_cov_k(kz) * cov_k(kz + 1) * r_bbp_cov_k(kz) `\
end do `\
`\
kz = nz `\
qsq_k(kz) = qsq_k(kz) - (ppp_qc_k(kz, 0) * cov_k(kz) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_qc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) - (ppp_tc_k(kz, 0) * cov_k(kz) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_tc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_tsq_k(kz) `\
`\
do kz = nz - 1, 3, -1 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_qc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1) `\
+ ppp_tc_k(kz, 2) * cov_k(kz - 2)) `\
* r_bbp_tsq_k(kz) `\
end do `\
`\
kz = 2 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1) `\
+ ppp_qc_k(kz, 1) * cov_k(kz - 1)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1) `\
+ ppp_tc_k(kz, 1) * cov_k(kz - 1)) `\
* r_bbp_tsq_k(kz) `\
`\
kz = 1 `\
qsq_k(kz) = qsq_k(kz) `\
- (ppp_qc_k(kz, 0) * cov_k(kz) + ccp_qsq_k(kz) * qsq_k(kz + 1)) `\
* r_bbp_qsq_k(kz) `\
tsq_k(kz) = tsq_k(kz) `\
- (ppp_tc_k(kz, 0) * cov_k(kz) + ccp_tsq_k(kz) * tsq_k(kz + 1)) `\
* r_bbp_tsq_k(kz)
#define PBL_MYM_SIMEQ_MATRIX_PROD(x_tsq_k, x_qsq_k, x_cov_k, y_tsq_k, y_qsq_k, y_cov_k) `\
kz = 1 `\
y_tsq_k(kz) =      bb_tsq_k(kz) * x_tsq_k(kz) `\
+ cc_tsq_k(kz) * x_tsq_k(kz + 1) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) =      bb_qsq_k(kz) * x_qsq_k(kz) `\
+ cc_qsq_k(kz) * x_qsq_k(kz + 1) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) =     bb_cov_k(kz) * x_cov_k(kz) `\
+ cc_cov_k(kz) * x_cov_k(kz + 1) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
`\
do kz = 2, nz - 1 `\
y_tsq_k(kz) = aa_tsq_k(kz) * x_tsq_k(kz - 1) `\
+ bb_tsq_k(kz) * x_tsq_k(kz) `\
+ cc_tsq_k(kz) * x_tsq_k(kz + 1) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) = aa_qsq_k(kz) * x_qsq_k(kz - 1) `\
+ bb_qsq_k(kz) * x_qsq_k(kz) `\
+ cc_qsq_k(kz) * x_qsq_k(kz + 1) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) = aa_cov_k(kz) * x_cov_k(kz - 1) `\
+ bb_cov_k(kz) * x_cov_k(kz) `\
+ cc_cov_k(kz) * x_cov_k(kz + 1) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
end do `\
`\
kz = nz `\
y_tsq_k(kz) = aa_tsq_k(kz) * x_tsq_k(kz - 1) `\
+ bb_tsq_k(kz) * x_tsq_k(kz) `\
+ pp_tc_k(kz) * x_cov_k(kz) `\
`\
y_qsq_k(kz) = aa_qsq_k(kz) * x_qsq_k(kz - 1) `\
+ bb_qsq_k(kz) * x_qsq_k(kz) `\
+ pp_qc_k(kz) * x_cov_k(kz) `\
`\
y_cov_k(kz) = aa_cov_k(kz) * x_cov_k(kz - 1) `\
+ bb_cov_k(kz) * x_cov_k(kz) `\
+ pp_ct_k(kz) * x_tsq_k(kz) `\
+ pp_cq_k(kz) * x_qsq_k(kz) `\
integer(4), intent(in) :: nx, ny, max_itr
@domainDependant{}
nx, ny, max_itr, eps
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k, aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k, aap_qsq_k, r_bbp_qsq_k, ccp_qsq_k, aap_cov_k, r_bbp_cov_k, ccp_cov_k,
ppp_tc_k, ppp_qc_k, ppp_ct_k, ppp_cq_k, tend_tsq_k, tend_qsq_k, tend_cov_k, endflag
rvec_tsq, rvec_qsq, rvec_cov, r0vec_tsq, r0vec_qsq, r0vec_cov, pvec_tsq, pvec_qsq, pvec_cov,
ppvec_tsq, ppvec_qsq, ppvec_cov, vvec_tsq, vvec_qsq, vvec_cov, svec_tsq, svec_qsq, svec_cov,
ssvec_tsq, ssvec_qsq, ssvec_cov, tvec_tsq, tvec_qsq, tvec_cov
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_SIMEQ_ILUD2(pvec_tsq, pvec_qsq, pvec_cov, ppvec_tsq, ppvec_qsq, ppvec_cov)
PBL_MYM_SIMEQ_MATRIX_PROD(ppvec_tsq, ppvec_qsq, ppvec_cov, vvec_tsq, vvec_qsq, vvec_cov)
PBL_MYM_SIMEQ_ILUD2(svec_tsq, svec_qsq, svec_cov, ssvec_tsq, ssvec_qsq, ssvec_cov)
PBL_MYM_SIMEQ_MATRIX_PROD(ssvec_tsq, ssvec_qsq, ssvec_cov, tvec_tsq, tvec_qsq, tvec_cov)
@end parallelRegion
integer(4), intent(in) :: nx, ny, max_itr
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
qq_tsq_k, qq_qsq_k, qq_cov_k, aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k, aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tend_tsq_k, tend_qsq_k, tend_cov_k, endflag
aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k, aap_qsq_k, r_bbp_qsq_k,
ccp_qsq_k, aap_cov_k, r_bbp_cov_k, ccp_cov_k, ppp_tc_k, ppp_qc_k, ppp_ct_k, ppp_cq_k
@end domainDependant
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k, aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k, aap_tsq_k, r_bbp_tsq_k, ccp_tsq_k,
ppp_tc_k, pp1_tc_k, pp2_tc_k, aap_qsq_k, r_bbp_qsq_k, ccp_qsq_k, ppp_qc_k, pp1_qc_k, pp2_qc_k,
aap_cov_k, r_bbp_cov_k, ccp_cov_k, ppp_ct_k, ppp_cq_k, pp1_ct_k, pp1_cq_k, pp2_ct_k, pp2_cq_k
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: endflag
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
endflag, qq_tsq_k, qq_qsq_k, qq_cov_k,
aa_tsq_k, bb_tsq_k, cc_tsq_k, pp_tc_k,
aa_qsq_k, bb_qsq_k, cc_qsq_k, pp_qc_k,
aa_cov_k, bb_cov_k, cc_cov_k, pp_ct_k, pp_cq_k,
tsq_k, qsq_k, cov_k
amat, bvec
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
#define PBL_MYM_DIFF_MATCOEF_1D_MACRO() `\
kz = 1 `\
km_p1 = coef * ( `\ f2h_p(kz) * dfm(kz + 1) + f2h_m(kz) * dfm(kz)) `\
cc(kz) = km_p1 * rdz_f(kz) * rdz_h(kz) `\
aa(kz) = 0.0 `\
bb(kz) = - aa(kz) - cc(kz) `\
do kz = 2, nz - 1 `\
km_p1 = coef * ( `\ f2h_p(kz) * dfm(kz + 1) + f2h_m(kz) * dfm(kz)) `\
km_m1 = coef * ( `\ f2h_p(kz - 1) * dfm(kz) + f2h_m(kz - 1) * dfm(kz - 1)) `\
cc(kz) = km_p1 * rdz_f(kz) * rdz_h(kz) `\
aa(kz) = km_m1 * rdz_f(kz) * rdz_h(kz - 1) `\
bb(kz) = -aa(kz) - cc(kz) `\
end do `\
kz = nz `\
km_m1 = coef * ( `\ f2h_p(kz - 1) * dfm(kz) + f2h_m(kz - 1) * dfm(kz - 1)) `\
km_p1 = 0.0 `\
cc(kz) = 0.0 `\
aa(kz) = km_m1 * rdz_f(kz) * rdz_h(kz - 1) `\
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny, coef
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm, f2h_m, f2h_p, rdz_f, rdz_h, aa, bb, cc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
PBL_MYM_DIFF_MATCOEF_1D_MACRO()
@end parallelRegion
PBL_MYM_DIFF_MATCOEF_1D_MACRO()
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1219, combined=1044, changed=356, unchanged=688, subroutine_definitions=13, calls=12, imports=6, data_definitions=0, save=0, parameter=2, openmp=0, style=6, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=32, other=283)
========== pbl_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_parm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_parm.f90
@domainDependant{attribute(host)}
imp_rate, wb_ng_max
@end domainDependant
@domainDependant{attribute(host)}
imp_rate, wb_ng_max
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=19, combined=19, changed=3, unchanged=16, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=3)
========== pbl_public =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_public.f90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_public.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=24, combined=24, changed=0, unchanged=24, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== pbl_shcu =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_shcu.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_shcu.f90
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, ustar, pstar, z_tq, u, v, t, th, exner, p_theta_levels, q, qcl, qcf, q1, frac_gauss, zhpar, frac, wb_ng
dthvdz, dthvdzm, thl, tl, qw, thvl, THv, thv_par, qc_par, u_p, v_p, p_rho_levels, z_uv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
zhpar = 3000.0_r_size
do while ( z_uv(k_par) < z_surf .and. thvl(k_par+1) <= thvl(k_par) )
if (vap_press >= 0.0_r_size) then
if ( k-1 > ktpar + 2 .and. ( denv_bydz <= dpar_bydz .or. z_uv(k) > zhpar+min(1000.0_r_size, 0.5_r_size*zhpar) )) then
if ( topbl == 0 .and. k > k_par .and. (  ( thv_par(k)-THv(k) <= - thv_pert) .or. ( above_lcl .and. (denv_bydz > 1.25_r_size*dpar_bydz) ) )) then
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fb_surf, ustar, pstar, z_tq, u, v, t, th, exner, p_theta_levels, q, qcl, qcf, q1, frac_gauss, zhpar, frac, wb_ng
dthvdz, dthvdzm, thl, tl, qw, thvl, THv, thv_par, qc_par, u_p, v_p, p_rho_levels, z_uv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
zhpar = 3000.0_r_size
do while ( z_uv(k_par) < z_surf .and. thvl(k_par+1) <= thvl(k_par) )
if (vap_press >= 0.0_r_size) then
if ( k-1 > ktpar + 2 .and. ( denv_bydz <= dpar_bydz .or. z_uv(k) > zhpar+min(1000.0_r_size, 0.5_r_size*zhpar) )) then
if ( topbl == 0 .and. k > k_par .and. (  ( thv_par(k)-THv(k) <= - thv_pert) .or. ( above_lcl .and. (denv_bydz > 1.25_r_size*dpar_bydz) ) )) then
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=501, combined=436, changed=20, unchanged=416, subroutine_definitions=1, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=2, other=15)
========== pbl_tend_solve =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_tend_solve.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_tend_solve.f90
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm_surf, dfh_surf, dfqb_surf, r_exner_surf, dns_surf, taux_surf_ex, tauy_surf_ex,
ftl_surf_ex, fqw_surf_ex, dns, taux_ex, tauy_ex, ftl_ex, fqw_ex,
dfm, dfh, f2h_m, f2h_p, rdz_f, rdz_h,
aauv, bbuv, ccuv, aat, bbt, cct, aaq, bbq, ccq, ppu, ppv, ppt, ppq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ccuv, cct, ccq, aauv, aat, aaq, bbuv, bbt, bbq, ppu, ppv, ppt, ppq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_u1, tend_v1, tend_pt1, tend_qv1, aauv, bbuv, ppu, ppv, aat, bbt, ppt, aaq, bbq, ppq,
tend_u, tend_v, tend_pt, tend_qv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf_ex, tauy_surf_ex,
ftl_surf_ex, fqw_surf_ex, dfm_surf, dfh_surf, dfqb_surf,
tend_u1, tend_v1, tend_pt1, tend_qv1, tend_tg0, r_exner_surf, tg0, qsatg,
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im, u_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dfm_surf, dfh_surf, dfqb_surf, r_exner_surf, dns_surf, taux_surf_ex, tauy_surf_ex,
ftl_surf_ex, fqw_surf_ex, dns, taux_ex, tauy_ex, ftl_ex, fqw_ex,
dfm, dfh, f2h_m, f2h_p, rdz_f, rdz_h,
aauv, bbuv, ccuv, aat, bbt, cct, aaq, bbq, ccq, ppu, ppv, ppt, ppq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ccuv, cct, ccq, aauv, aat, aaq, bbuv, bbt, bbq, ppu, ppv, ppt, ppq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_u1, tend_v1, tend_pt1, tend_qv1, aauv, bbuv, ppu, ppv, aat, bbt, ppt, aaq, bbq, ppq,
tend_u, tend_v, tend_pt, tend_qv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
taux_surf_ex, tauy_surf_ex,
ftl_surf_ex, fqw_surf_ex, dfm_surf, dfh_surf, dfqb_surf,
tend_u1, tend_v1, tend_pt1, tend_qv1, tend_tg0, r_exner_surf, tg0, qsatg,
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im, u_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=336, combined=312, changed=49, unchanged=263, subroutine_definitions=4, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=43)
========== pbl_tend_solve_scalar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl/pbl_tend_solve_scalar.h90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl/pbl_tend_solve_scalar.f90
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
dns, dfh, f2h_m, f2h_p, rdz_f, rdz_h, aas, bbs, ccs
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
qx, dns, dfh, f2h_m, f2h_p, rdz_f, rdz_h, pps,
flx_ex
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
ccs, aas, bbs, pps, tend_qx
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
dns, dfh, f2h_m, f2h_p, rdz_f, rdz_h, aas, bbs, ccs
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
qx, dns, dfh, f2h_m, f2h_p, rdz_f, rdz_h, pps,
flx_ex
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
ccs, aas, bbs, pps, tend_qx
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=146, combined=140, changed=20, unchanged=120, subroutine_definitions=0, calls=0, imports=3, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=16)
========== pbl_coupler =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl_coupler/pbl_coupler.H90, hfpath: branches/reference/asuca-kij/Src/Physics/pbl_coupler/pbl_coupler.f90
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2hg_m, f2hg_p, z_g
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
r_exner_surf, dns_surf, dlong, prep_rate, fsand, fclay, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
skind, solar, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile, beta, qsatg, fktg_surf, roctg_surf
dfm, dfh, dns, taux_ex, tauy_ex, ftl_ex, fqw_ex, f2h_m, f2h_p, rdz_f, rdz_h, fktg, wg, tlcvr, tend_u, tend_v, tend_pt, tend_qv, tend_tg, tend_wg
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im, taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
tend_u1, tend_v1, tend_pt1, tend_qv1,
aauv, bbuv, ccuv, aat, bbt, cct, aaq, bbq, ccq, ppu, ppv, ppt, ppq
u_coef, v_coef, pt_coef, qv_coef,
dfm_surf, dfh_surf, dfqb_surf, dfqb_tile
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg, tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{attribute(autoDom, present)}
z_g1
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, r_exner_surf, dns_surf, solar, dlong, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex,
dfm_surf, dfh_surf, dfqb_surf, tg0, tg1, qsatg, roctg_surf, fktg_surf, aag1, bbg1, ppg1,
tau_coef, ftl_coef, fqw_coef, tg0_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
tau_coef(nn) = 0.0_r_size
ftl_coef(nn) = 0.0_r_size
fqw_coef(nn) = 0.0_r_size
tg0_coef(nn) = 0.0_r_size
if (lt /= tile_land .and. skind(lt) == kind_sea) then
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, r_exner_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, dfm_surf, dfh_surf, dfqb_surf, tg0, qsatg, tend_tg0
tau_coef, ftl_coef, fqw_coef, tg0_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (skind(lt) /= kind_sea) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
dns2, dfm2, dfh2, dns1, dfm1, dfh1, dns_surf, taux_ex1, tauy_ex1, ftl_ex1, fqw_ex1, f2h_p1, f2h_m1, rdz_f1, rdz_h1
aauv2, aat2, aaq2, bbuv2, bbt2, bbq2, ppu2, ppv2, ppt2, ppq2,
u_coef, v_coef, pt_coef, qv_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tau_coef, ftl_coef, fqw_coef, u_coef, v_coef, pt_coef, qv_coef
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im
tend_u1, tend_v1, tend_pt1, tend_qv1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_pt1, tend_qv1, tg0_coef, tend_tg0
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (lt /= tile_land .and. skind(lt) /= kind_ice) then
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2hg_m, f2hg_p, z_g
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
r_exner_surf, dns_surf, dlong, prep_rate, fsand, fclay,
u_coef, v_coef, pt_coef, qv_coef
skind, solar, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfqb_tile, qsatg, fktg_surf, roctg_surf,
fktg, tlcvr, tend_u1, tend_v1, tend_pt1, tend_qv1, tend_tg, tend_wg,
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im,
taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1, tend_wg_ex0, tend_wg_ex1,
aag, bbg, ccg, ppg,
tg0, tg1, tend_tg0, tg0_coef, tau_coef, ftl_coef, fqw_coef,
tau_coef_ave, ftl_coef_ave, fqw_coef_ave
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg, tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tg0 = tg(0, lt)
tg1 = tg(1, lt)
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tg0 = tg(0, lt)
tg1 = tg(1, lt)
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_u1, tend_v1, tend_pt1, tend_qv1, tau_coef, ftl_coef, fqw_coef
taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2hg_m, f2hg_p, z_g
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
r_exner_surf, dns_surf, dlong, prep_rate, fsand, fclay, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
skind, solar, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile, beta, qsatg, fktg_surf, roctg_surf
dfm, dfh, dns, taux_ex, tauy_ex, ftl_ex, fqw_ex, f2h_m, f2h_p, rdz_f, rdz_h, fktg, wg, tlcvr, tend_u, tend_v, tend_pt, tend_qv, tend_tg, tend_wg
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im, taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
tend_u1, tend_v1, tend_pt1, tend_qv1,
aauv, bbuv, ccuv, aat, bbt, cct, aaq, bbq, ccq, ppu, ppv, ppt, ppq
u_coef, v_coef, pt_coef, qv_coef,
dfm_surf, dfh_surf, dfqb_surf, dfqb_tile
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg, tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{attribute(autoDom, present)}
z_g1
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, r_exner_surf, dns_surf, solar, dlong, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex,
dfm_surf, dfh_surf, dfqb_surf, tg0, tg1, qsatg, roctg_surf, fktg_surf, aag1, bbg1, ppg1,
tau_coef, ftl_coef, fqw_coef, tg0_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
tau_coef(nn) = 0.0_r_size
ftl_coef(nn) = 0.0_r_size
fqw_coef(nn) = 0.0_r_size
tg0_coef(nn) = 0.0_r_size
if (lt /= tile_land .and. skind(lt) == kind_sea) then
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, r_exner_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, dfm_surf, dfh_surf, dfqb_surf, tg0, qsatg, tend_tg0
tau_coef, ftl_coef, fqw_coef, tg0_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (skind(lt) /= kind_sea) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
dns2, dfm2, dfh2, dns1, dfm1, dfh1, dns_surf, taux_ex1, tauy_ex1, ftl_ex1, fqw_ex1, f2h_p1, f2h_m1, rdz_f1, rdz_h1
aauv2, aat2, aaq2, bbuv2, bbt2, bbq2, ppu2, ppv2, ppt2, ppq2,
u_coef, v_coef, pt_coef, qv_coef
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tau_coef, ftl_coef, fqw_coef, u_coef, v_coef, pt_coef, qv_coef
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im
tend_u1, tend_v1, tend_pt1, tend_qv1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_pt1, tend_qv1, tg0_coef, tend_tg0
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (lt /= tile_land .and. skind(lt) /= kind_ice) then
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2hg_m, f2hg_p, z_g
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
r_exner_surf, dns_surf, dlong, prep_rate, fsand, fclay,
u_coef, v_coef, pt_coef, qv_coef
skind, solar, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfqb_tile, qsatg, fktg_surf, roctg_surf,
fktg, tlcvr, tend_u1, tend_v1, tend_pt1, tend_qv1, tend_tg, tend_wg,
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im,
taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1, tend_wg_ex0, tend_wg_ex1,
aag, bbg, ccg, ppg,
tg0, tg1, tend_tg0, tg0_coef, tau_coef, ftl_coef, fqw_coef,
tau_coef_ave, ftl_coef_ave, fqw_coef_ave
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg, tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tg0 = tg(0, lt)
tg1 = tg(1, lt)
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tg0 = tg(0, lt)
tg1 = tg(1, lt)
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tend_u1, tend_v1, tend_pt1, tend_qv1, tau_coef, ftl_coef, fqw_coef
taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im, u_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=819, combined=660, changed=139, unchanged=521, subroutine_definitions=3, calls=16, imports=13, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=1, other=106)
========== pbl_coupler_mjsib =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/pbl_coupler/pbl_coupler_mjsib.f90, hfpath: None
module pbl_coupler_mjsib
implicit none
private
public :: pbl_mjsib_coupler_tend
contains
implicit none
integer(4), intent(in) :: nx, ny
dfqb_surf = dfq_surf * beta
implicit none
stb_tg0_3 = e_emit * stb * tg0 ** 3
flx_fac = cp * dns_surf * dfh_surf
rad_flx = solar + dlong - stb_tg0_3 * tg0
sh_flx_ex = cp * dns_surf * ftl_surf_ex
lh_flx_ex = hlatnt * dns_surf * fqw_surf_ex
ex_flx_in = rad_flx - sh_flx_ex - lh_flx_ex - hflxg_surf_ex
coef_th1 = - flx_fac * timestep
coef_tg0 = capg0 + (+ 4.0 * stb_tg0_3 + flx_fac * r_exner_surf + hlatnt * dns_surf * dfqb_surf * hlatnt * qsatg / (rv * tg0 ** 2) + hcoefg_h0) * timestep
coef_qv1 = - dns_surf * hlatnt * dfqb_surf * timestep
coef_tg1 = - hcoefg_h0 * timestep
implicit none
tend_u1 = ppu1 / bbuv1
tend_v1 = ppv1 / bbuv1
amat(1, 1) = coef_th1
amat(1, 2) = coef_qv1
amat(1, 3) = coef_tg0 + coef_tg1 * soil_coef1
amat(2, 1) = bbt1
amat(2, 2) = 0.0_r_size
amat(2, 3) = aat1
amat(3, 1) = 0.0_r_size
amat(3, 2) = bbq1
amat(3, 3) = aaq1
bvec(1) = ex_flux_in - coef_tg1 * soil_coef2
bvec(2) = ppt1
bvec(3) = ppq1
tend_pt1 = bvec(1)
tend_qv1 = bvec(2)
tend_tg0 = bvec(3)
implicit none
integer(4), intent(in) :: n
integer(4) :: kk
integer(4) :: l
integer(4) :: m
integer(4) :: kpiv
do kk = 1, n
kpiv = kk
wk  = abs(amat(kk, kk))
do l = kk + 1, n
if(abs(amat(l, kk)) > wk) then
kpiv = l
wk  = abs(amat(l, kk))
end if
end do
if(kpiv /= kk) then
do m = 1, n
wk       = amat(kk, m)
amat(kk, m)    = amat(kpiv, m)
amat(kpiv, m) = wk
end do
wk   = bvec(kk)
bvec(kk) = bvec(kpiv)
bvec(kpiv) = wk
end if
amat(kk, kk) = 1.0 / amat(kk, kk)
do l = kk + 1, n
amat(l, kk) = amat(l, kk) * amat(kk, kk)
end do
do m = kk + 1, n
do l = kk + 1, n
amat(l, m) = amat(l, m) - amat(kk, m) * amat(l, kk)
end do
end do
end do
do m = 1, n - 1
do l = m + 1, n
bvec(l) = bvec(l) - bvec(m) * amat(l, m)
end do
end do
do m = n, 1, -1
bvec(m) = bvec(m) * amat(m, m)
do l = 1, m - 1
bvec(l) = bvec(l) - amat(l, m) * bvec(m)
end do
end do
implicit none
aat1_mod = aat1 * dfh_surf * rdz_f1
aaq1_mod = aaq1 * dfqb_surf * rdz_f1 * qsatg * hlatnt / (rv * tg0 ** 2)
end module pbl_coupler_mjsib
module pbl_coupler_mjsib
implicit none
private
public :: pbl_mjsib_coupler_tend
contains
implicit none
integer(4), intent(in) :: nx, ny
dfqb_surf = dfq_surf * beta
implicit none
stb_tg0_3 = e_emit * stb * tg0 ** 3
flx_fac = cp * dns_surf * dfh_surf
rad_flx = solar + dlong - stb_tg0_3 * tg0
sh_flx_ex = cp * dns_surf * ftl_surf_ex
lh_flx_ex = hlatnt * dns_surf * fqw_surf_ex
ex_flx_in = rad_flx - sh_flx_ex - lh_flx_ex - hflxg_surf_ex
coef_th1 = - flx_fac * timestep
coef_tg0 = capg0 + (+ 4.0 * stb_tg0_3 + flx_fac * r_exner_surf + hlatnt * dns_surf * dfqb_surf * hlatnt * qsatg / (rv * tg0 ** 2) + hcoefg_h0) * timestep
coef_qv1 = - dns_surf * hlatnt * dfqb_surf * timestep
coef_tg1 = - hcoefg_h0 * timestep
implicit none
tend_u1 = ppu1 / bbuv1
tend_v1 = ppv1 / bbuv1
amat(1, 1) = coef_th1
amat(1, 2) = coef_qv1
amat(1, 3) = coef_tg0 + coef_tg1 * soil_coef1
amat(2, 1) = bbt1
amat(2, 2) = 0.0_r_size
amat(2, 3) = aat1
amat(3, 1) = 0.0_r_size
amat(3, 2) = bbq1
amat(3, 3) = aaq1
bvec(1) = ex_flux_in - coef_tg1 * soil_coef2
bvec(2) = ppt1
bvec(3) = ppq1
tend_pt1 = bvec(1)
tend_qv1 = bvec(2)
tend_tg0 = bvec(3)
implicit none
integer(4), intent(in) :: n
integer(4) :: kk
integer(4) :: l
integer(4) :: m
integer(4) :: kpiv
do kk = 1, n
kpiv = kk
wk  = abs(amat(kk, kk))
do l = kk + 1, n
if(abs(amat(l, kk)) > wk) then
kpiv = l
wk  = abs(amat(l, kk))
end if
end do
if(kpiv /= kk) then
do m = 1, n
wk       = amat(kk, m)
amat(kk, m)    = amat(kpiv, m)
amat(kpiv, m) = wk
end do
wk   = bvec(kk)
bvec(kk) = bvec(kpiv)
bvec(kpiv) = wk
end if
amat(kk, kk) = 1.0 / amat(kk, kk)
do l = kk + 1, n
amat(l, kk) = amat(l, kk) * amat(kk, kk)
end do
do m = kk + 1, n
do l = kk + 1, n
amat(l, m) = amat(l, m) - amat(kk, m) * amat(l, kk)
end do
end do
end do
do m = 1, n - 1
do l = m + 1, n
bvec(l) = bvec(l) - bvec(m) * amat(l, m)
end do
end do
do m = n, 1, -1
bvec(m) = bvec(m) * amat(m, m)
do l = 1, m - 1
bvec(l) = bvec(l) - amat(l, m) * bvec(m)
end do
end do
implicit none
aat1_mod = aat1 * dfh_surf * rdz_f1
aaq1_mod = aaq1 * dfqb_surf * rdz_f1 * qsatg * hlatnt / (rv * tg0 ** 2)
end module pbl_coupler_mjsib
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=304, combined=252, changed=252, unchanged=0, subroutine_definitions=5, calls=12, imports=14, data_definitions=0, save=0, parameter=0, openmp=0, style=10, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=124, other=87)
========== rad_aer =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_aer.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_aer.f90
@domainDependant{attribute(host), domName(aer), domSize(mxht)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@domainDependant{attribute(host), domName(k, dom1, dom2), domSize(kmax, nbds, nlnd)}
aeroec, aerosa, aeroaf
@end domainDependant
@domainDependant{attribute(host), domName(k, dom1, dom2), domSize(kmax, nbdl_2004, nlnd)}
aeroac
@end domainDependant
@domainDependant{}
nx, ny, grav, rgas, epsilon
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
gtmp, gwv, atau
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT)}
gph, heit
@end domainDependant
@domainDependant{attribute(autoDom, present)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
aeracl, aeraco
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask, aod_2d, atau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
ncmx
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
flnd
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
ods
@end domainDependant
@domainDependant{domName(i, j, vertical, cmx), domSize(nx, ny, kmp1, ncmx), domPP(DOM4), accPP(AT4), attribute(autoDom, present)}
aod, atau
@end domainDependant
@domainDependant{domName(vertical, aer3, aer2), domSize(kmax, 10, 2), attribute(autoDom, present)}
ac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(host), domName(aer), domSize(mxht)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@domainDependant{attribute(host), domName(k, dom1, dom2), domSize(kmax, nbds, nlnd)}
aeroec, aerosa, aeroaf
@end domainDependant
@domainDependant{attribute(host), domName(k, dom1, dom2), domSize(kmax, nbdl_2004, nlnd)}
aeroac
@end domainDependant
@domainDependant{}
nx, ny, grav, rgas, epsilon
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
gtmp, gwv, atau
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT)}
gph, heit
@end domainDependant
@domainDependant{attribute(autoDom, present)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
aeracl, aeraco
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask, aod_2d, atau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
ncmx
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
flnd
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
ods
@end domainDependant
@domainDependant{domName(i, j, vertical, cmx), domSize(nx, ny, kmp1, ncmx), domPP(DOM4), accPP(AT4), attribute(autoDom, present)}
aod, atau
@end domainDependant
@domainDependant{domName(vertical, aer3, aer2), domSize(kmax, 10, 2), attribute(autoDom, present)}
ac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=744, combined=605, changed=80, unchanged=525, subroutine_definitions=4, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=5, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=15, storage_order=0, data_spec=0, other=54)
========== rad_albed =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_albed.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_albed.f90
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
skind, zmean, albed, avisb, avisd, anirb, anird
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end if
@end parallelRegion
end subroutine
@domainDependant{}
albed_land, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant{}
zmean, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
skind, zmean, albed, avisb, avisd, anirb, anird
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end if
@end parallelRegion
end subroutine
@domainDependant{}
albed_land, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant{}
zmean, avisb, avisd, anirb, anird
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=74, combined=73, changed=28, unchanged=45, subroutine_definitions=1, calls=2, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=6, storage_order=0, data_spec=0, other=16)
========== rad_bnd_tbl =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_bnd_tbl.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_bnd_tbl.f90
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(12, 20, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblo
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(12, 15, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblc
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(36, 30, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblh
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2), domSize(81, 81)}
sblco2, sblo2n, sblo2s
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(12, 20, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblo
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(12, 15, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblc
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2, dom3), domSize(36, 30, 20), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tblh
@end domainDependant
@domainDependant{attribute(host), domName(dom1, dom2), domSize(81, 81)}
sblco2, sblo2n, sblo2s
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=60, combined=60, changed=28, unchanged=32, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=13, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=1, storage_order=0, data_spec=0, other=12)
========== rad_cld =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_cld.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_cld.f90
@domainDependant{attribute(host)}
tgmma, kcltpo, p2set, p3, sig1, cwdmax, gpf0, tmin, cnscw, cwdmin,
tempc_ice, c01, c03, c05, c07, c09, c11, c13, factor, temp_ice, rr2, rrp
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf_first, tlev, qlev, qc, qci, tsq, qsq, cov, plev, delp, z_f, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{attribute(autoDom, present)}
rtable
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, cloud, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{attribute(autoDom, present)}
rtable, smgcfl, smgcfm, smgcfh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, rice, cloud, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
smgcfl, smgcfm, smgcfh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, rice, cloud, cwcr, cicr, tlev_out
tlev_mod, qlev_mod, log_tlev, rh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, qc, qci, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, qlev, qc, qci, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tlev, plev, qlev, qc, qci, tsq, qsq, cov, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(host)}
tgmma, kcltpo, p2set, p3, sig1, cwdmax, gpf0, tmin, cnscw, cwdmin,
tempc_ice, c01, c03, c05, c07, c09, c11, c13, factor, temp_ice, rr2, rrp
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf_first, tlev, qlev, qc, qci, tsq, qsq, cov, plev, delp, z_f, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{attribute(autoDom, present)}
rtable
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, cloud, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{attribute(autoDom, present)}
rtable, smgcfl, smgcfm, smgcfh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, rice, cloud, cwcr, cicr, tlev_out
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
smgcfl, smgcfm, smgcfh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, delp, qlev, z_f, rice, cloud, cwcr, cicr, tlev_out
tlev_mod, qlev_mod, log_tlev, rh
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, qc, qci, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
tlev, plev, qlev, qc, qci, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tlev, plev, qlev, qc, qci, tsq, qsq, cov, cvrr, cwcr, cicr, tlev_out
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=574, combined=531, changed=94, unchanged=437, subroutine_definitions=8, calls=7, imports=3, data_definitions=3, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=17, storage_order=0, data_spec=0, other=52)
========== rad_comm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_comm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_comm.f90
@domainDependant{attribute(host)}
rdim
@end domainDependant
@domainDependant{attribute(host), domName(ir), domSize(rdim)}
rtable
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tbtm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
gpf, gph, tlev, qlev
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT)}
tmlv, qmlv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(host)}
rdim
@end domainDependant
@domainDependant{attribute(host), domName(ir), domSize(rdim)}
rtable
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tbtm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
gpf, gph, tlev, qlev
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT)}
tmlv, qmlv
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=121, combined=117, changed=33, unchanged=84, subroutine_definitions=4, calls=0, imports=0, data_definitions=0, save=0, parameter=1, openmp=0, style=1, parallel_loops=1, device_data_init=0, implementation_scheme=2, commented=0, radiation=4, storage_order=0, data_spec=0, other=20)
========== rad_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_const.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_const.f90
@domainDependant{attribute(host)}
idate
@end domainDependant
@domainDependant{attribute(host)}
idate
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=33, combined=33, changed=11, unchanged=22, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=6, storage_order=0, data_spec=0, other=3)
========== rad_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_grid.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_grid.f90
@domainDependant{attribute(host)}
kmax, kmp1
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, press, gpf, gph, gdp
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
p_surf
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
press, gpf, gdp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
gph
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(host)}
kmax, kmp1
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, press, gpf, gph, gdp
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
p_surf
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
press, gpf, gdp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
gph
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=78, combined=78, changed=31, unchanged=47, subroutine_definitions=2, calls=1, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=4, storage_order=0, data_spec=0, other=20)
========== rad_jma =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_jma.h90, hfpath: None
module rad_jma
implicit none
private
contains
implicit none
implicit none
implicit none
end if
end if
else
end if
else
end if
end if
implicit none
@domainDependant{attribute(autoDom, present)}
aerodl, aerodo, aeracl, aeraco, aeroec, aerosa, aeroaf, rtable
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tin_surf, ztemp, zmean, clat, clon, amask,
avisb, avisd, anirb, anird, aod, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, nkeb
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
gwv, ozon, cvrr, cwcr, cicr, rlong, rshrt, rlongn, rshrtn, ppt, plev, delp, tlev, gq
qlev, ozon_w, cvrr_w, ataus, cic, cwp, cip, re_qci, re_qc, cwc
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT), attribute(autoDom, present)}
coefc, ttrans, pmlv
tmlv, qmlv
@end domainDependant
end if
end if
end if
implicit none
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
amask, aod_2d, tcvr, tcwc, nkeb
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
plev, delp, tlev, gwv, ozon, cvrr, cwcr, cicr, qlev, ozon_w, cvrr_w, ataus,
cwc, cic, cwp, cip, re_qci, re_qc, sliq, sice, cwcr_w, cicr_w,
wrk1, wrk2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT), attribute(autoDom, present)}
pmlv, tmlv, qmlv, heit
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(aer), domSize(mxht)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(r), domSize(rdim)}
rtable
@end domainDependant
end if
end if
implicit none
@domainDependant{}
nx, ny, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
nkeb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
plev, ozon, gwv, cvrr, cwcr, cicr, qlev, ozon_w, cvrr_w, cwcr_w, cicr_w
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end if
end do
STOP
end if
else
end if
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, grav
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tcvr, tcwc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
delp, cwcr_w, cicr_w, cvrr_w
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, rgas, epsilon, one_minus_epsilon, grav
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwcr_w, cicr_w
plev, delp, tlev, qlev,
cwc, cic, cwp, cip
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwp, sliq, sice, re_qc, re_qci, cip
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
else
end if
else
end if
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, presrf, g_emit, sq2_g_emit, rdvcp, gdvcp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tin_surf, dlwb, ztemp, zmean, temp_lowest
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
plev, delp, rlong, rshrt, rlongn, rshrtn, ppt
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
coefc, ttrans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
module rad_jma
implicit none
private
contains
implicit none
implicit none
implicit none
end if
end if
else
end if
else
end if
end if
implicit none
@domainDependant{attribute(autoDom, present)}
aerodl, aerodo, aeracl, aeraco, aeroec, aerosa, aeroaf, rtable
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tin_surf, ztemp, zmean, clat, clon, amask,
avisb, avisd, anirb, anird, aod, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, nkeb
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
gwv, ozon, cvrr, cwcr, cicr, rlong, rshrt, rlongn, rshrtn, ppt, plev, delp, tlev, gq
qlev, ozon_w, cvrr_w, ataus, cic, cwp, cip, re_qci, re_qc, cwc
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT), attribute(autoDom, present)}
coefc, ttrans, pmlv
tmlv, qmlv
@end domainDependant
end if
end if
end if
implicit none
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
amask, aod_2d, tcvr, tcwc, nkeb
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT), attribute(autoDom, present)}
plev, delp, tlev, gwv, ozon, cvrr, cwcr, cicr, qlev, ozon_w, cvrr_w, ataus,
cwc, cic, cwp, cip, re_qci, re_qc, sliq, sice, cwcr_w, cicr_w,
wrk1, wrk2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), domPP(DOM), accPP(AT), attribute(autoDom, present)}
pmlv, tmlv, qmlv, heit
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(aer), domSize(mxht)}
aerodl, aerodo, aeracl, aeraco
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(r), domSize(rdim)}
rtable
@end domainDependant
end if
end if
implicit none
@domainDependant{}
nx, ny, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
nkeb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax), domPP(DOM), accPP(AT)}
plev, ozon, gwv, cvrr, cwcr, cicr, qlev, ozon_w, cvrr_w, cwcr_w, cicr_w
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end if
end do
STOP
end if
else
end if
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, grav
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tcvr, tcwc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
delp, cwcr_w, cicr_w, cvrr_w
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, rgas, epsilon, one_minus_epsilon, grav
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwcr_w, cicr_w
plev, delp, tlev, qlev,
cwc, cic, cwp, cip
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwp, sliq, sice, re_qc, re_qci, cip
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
else
end if
else
end if
end do
@end parallelRegion
implicit none
@domainDependant{}
nx, ny, presrf, g_emit, sq2_g_emit, rdvcp, gdvcp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
tin_surf, dlwb, ztemp, zmean, temp_lowest
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
plev, delp, rlong, rshrt, rlongn, rshrtn, ppt
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
coefc, ttrans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end do
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=525, combined=477, changed=477, unchanged=0, subroutine_definitions=10, calls=30, imports=51, data_definitions=0, save=0, parameter=0, openmp=0, style=19, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=230, storage_order=0, data_spec=0, other=135)
========== rad_lw =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_lw.H90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_lw.f90
@domainDependant{attribute(host)}
gi10, gp0i, ppmcmatm, prefi, prefco2i
@end domainDependant
@domainDependant{}
@end domainDependant
enddo
enddo
STOP
end subroutine
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb, amask, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), domPP(DOM), accPP(AT), attribute(autoDom, present)}
plev, tlev, gq, delp, ozon_w, cwp, cip, sice, sliq, ataus, cvrr_w, rlong, qlev,
pmlv, tmlv, qmlv, coefc, ttrans
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
amask, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, nkeb,
plev, tlev, gq, delp, ozon_w, cwp, cip, sice, sliq, ataus, cvrr_w, rlong, qlev
pmlv, tmlv, qmlv, coefc, ttrans, lwflx, lwflxcs, fmlv, fmlc,
tran1, tran1_cs, tran2, tran2_cs,
taodl, ataul,
ctau,
bmlv, blev,
dbdts,
trans, trans_cs,
work_bmlv, work_cs, work_ttrans,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2, wkum, wkum1, wkum2,
wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
@domainDependant{attribute(autoDom, present)}
al, bl, cl, alphax, gammax
cpl,
aeroac,
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, sfa, sfb, thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, pmlv, tlev, tmlv, qlev, qmlv, gdp, ozvt, odaer,
plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2,
wkum, wkum1, wkum2, wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present)}
dk1, mxk, powers_for_trnsk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
ozon_w, delp, plev, qlev, tlev, pmlv, qmlv, tmlv, taodl,
tran1, tran2, trans,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2,
wkum, wkum1, wkum2, wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
wuml1, wuml2, wkum1, wkum2, wcue1, wcue2, odae1, odae2,
trnst1, trnst2, transca1_1, transca1_2, transca1_3, transca2_1, transca2_2, transca2_3,
tdef1, tdef2, wcup1, wcup2, pefl1, pefl2,
ozon_w, delp, plev, qlev, tlev, pmlv, qmlv, tmlv, taodl,
tran1, tran2
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, dk1, mxk, powers_for_trnsk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
end select
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
plev, tlev, delp, qlev, ozon_w, taodl, trans,
wum, pwum, twum, wkum, wcue_pre1, wcue_pre2, trnst, wcup
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, dk1, mxk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
end select
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
coefccs, work_bmlv, work_cs,
lwflx, lwflxcs, coefc, ttrans, work_ttrans,
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
n, jcn_rad_jma_lwdble
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
trans_singleband, trans_cs_singleband,
ctau,
tran1_singleband, tran1_cs_singleband, tran2_singleband, tran2_cs_singleband
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
lwflx, lwflxcs, fmlv, fmlc, bmlv, trans, trans_cs, work_ttrans, coefc, work_cs, work_bmlv, coefccs, dbdts
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lwflx, lwflxcs, work_ttrans, work_cs, work_bmlv
dlwb, ulwt, dlwbcs, ulwtcs, ttranscs,
gq, delp, tlev, rlong, ttrans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb,
blev,
bmlv, bup, bdn, db, fmlv, fmlc,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
bmlv, blev, fmlv, fmlc, bb, dbdn, dbup,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, pmlv, tlev, tmlv, qlev, qmlv,
plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2, tdef1, tdef2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny, pscaleFactor1
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, sfa, sfb,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, tlev, qlev, gdp,
wkum
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sfa, sfb,
thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, gdp, tlev, qlev,
pmlv, tmlv, qmlv, plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2, wh2o, eh2o, wcup1, wcup2,
odaer, wcue1, wcue2, odae1, odae2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, tlev, qlev, gdp, ozvt,
wcue_pre1, wcue_pre2, wcup,
wum, pwum, twum,
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dp1, dp2, qlv1, qlv2, plv1, plv2, gdp, ozvt, wuml1, wuml2, pefl1, pefl2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
LOOP_TAIL_2D
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wum, pwum, twum,
trnst
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
LOOP_TAIL_1D
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wuml, pefl, tdef, trnst
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
dk1, dgk, mxk
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf,
thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wkum,
trns, trik,
trnst,
wcup, wcue, odaer,
plev, qlev, tlev, gdp,
wcue_pre1, wcue_pre2,
trans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
dk1, mxk, powers_for_trnsk, dgk
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
trnsca, trnsca2, trnsca3
wkum, trnsk, trnst,
trans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(cmx), domSize(NCMX_CONST), attribute(present)}
was, aas, bbs, cas, ccs, cbs, cds, waf, aaf, bbf, caf, ccf, cbf, cdf
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wcup,
wcue, odaer, trnsca_1D
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
cpl
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dbdts,
tlev,
tmlv,
bmlv, blev
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb,
bmlv, blev,
bup, bdn, db, bu1, bu2, bd1, bd2, db01, db12, tu1, tu2, tc1, tc2, fmlv, fmlc,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
bb, dbdn, dbup, b1, b2, db01u, db01d, db12, bmlv, blev, tu1, tu2, tc1, tc2,
tau, tac, fmlv, fmlc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(host)}
gi10, gp0i, ppmcmatm, prefi, prefco2i
@end domainDependant
@domainDependant{}
@end domainDependant
enddo
enddo
STOP
end subroutine
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb, amask, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), domPP(DOM), accPP(AT), attribute(autoDom, present)}
plev, tlev, gq, delp, ozon_w, cwp, cip, sice, sliq, ataus, cvrr_w, rlong, qlev,
pmlv, tmlv, qmlv, coefc, ttrans
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
amask, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, nkeb,
plev, tlev, gq, delp, ozon_w, cwp, cip, sice, sliq, ataus, cvrr_w, rlong, qlev
pmlv, tmlv, qmlv, coefc, ttrans, lwflx, lwflxcs, fmlv, fmlc,
tran1, tran1_cs, tran2, tran2_cs,
taodl, ataul,
ctau,
bmlv, blev,
dbdts,
trans, trans_cs,
work_bmlv, work_cs, work_ttrans,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2, wkum, wkum1, wkum2,
wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
@domainDependant{attribute(autoDom, present)}
al, bl, cl, alphax, gammax
cpl,
aeroac,
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, sfa, sfb, thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, pmlv, tlev, tmlv, qlev, qmlv, gdp, ozvt, odaer,
plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2,
wkum, wkum1, wkum2, wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present)}
dk1, mxk, powers_for_trnsk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
ozon_w, delp, plev, qlev, tlev, pmlv, qmlv, tmlv, taodl,
tran1, tran2, trans,
wum, pwum, twum, wuml1, wuml2, pefl1, pefl2, tdef1, tdef2,
wkum, wkum1, wkum2, wcue_pre1, wcue_pre2, wcue1, wcue2, wcup, wcup1, wcup2, odae1, odae2
@end domainDependant
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
wuml1, wuml2, wkum1, wkum2, wcue1, wcue2, odae1, odae2,
trnst1, trnst2, transca1_1, transca1_2, transca1_3, transca2_1, transca2_2, transca2_3,
tdef1, tdef2, wcup1, wcup2, pefl1, pefl2,
ozon_w, delp, plev, qlev, tlev, pmlv, qmlv, tmlv, taodl,
tran1, tran2
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, dk1, mxk, powers_for_trnsk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
end select
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
plev, tlev, delp, qlev, ozon_w, taodl, trans,
wum, pwum, twum, wkum, wcue_pre1, wcue_pre2, trnst, wcup
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, dk1, mxk, dgk,
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf, thta,
tblo, tblc, tblh
@end domainDependant
end select
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
coefccs, work_bmlv, work_cs,
lwflx, lwflxcs, coefc, ttrans, work_ttrans,
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
n, jcn_rad_jma_lwdble
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
trans_singleband, trans_cs_singleband,
ctau,
tran1_singleband, tran1_cs_singleband, tran2_singleband, tran2_cs_singleband
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
lwflx, lwflxcs, fmlv, fmlc, bmlv, trans, trans_cs, work_ttrans, coefc, work_cs, work_bmlv, coefccs, dbdts
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lwflx, lwflxcs, work_ttrans, work_cs, work_bmlv
dlwb, ulwt, dlwbcs, ulwtcs, ttranscs,
gq, delp, tlev, rlong, ttrans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb,
blev,
bmlv, bup, bdn, db, fmlv, fmlc,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
bmlv, blev, fmlv, fmlc, bb, dbdn, dbup,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, pmlv, tlev, tmlv, qlev, qmlv,
plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2, tdef1, tdef2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny, pscaleFactor1
@end domainDependant
@domainDependant{attribute(autoDom, present)}
ppma, sfa, sfb,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, tlev, qlev, gdp,
wkum
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sfa, sfb,
thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, gdp, tlev, qlev,
pmlv, tmlv, qmlv, plv1, plv2, dp1, dp2, tlv1, tlv2, qlv1, qlv2, wh2o, eh2o, wcup1, wcup2,
odaer, wcue1, wcue2, odae1, odae2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
plev, tlev, qlev, gdp, ozvt,
wcue_pre1, wcue_pre2, wcup,
wum, pwum, twum,
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny,
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dp1, dp2, qlv1, qlv2, plv1, plv2, gdp, ozvt, wuml1, wuml2, pefl1, pefl2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
LOOP_TAIL_2D
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wum, pwum, twum,
trnst
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
LOOP_TAIL_1D
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tblo, tblc, tblh
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wuml, pefl, tdef, trnst
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
dk1, dgk, mxk
cas, cbs, ccs, cds, aas, bbs, was, caf, cbf, ccf, cdf, aaf, bbf, waf,
thta
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wkum,
trns, trik,
trnst,
wcup, wcue, odaer,
plev, qlev, tlev, gdp,
wcue_pre1, wcue_pre2,
trans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
dk1, mxk, powers_for_trnsk, dgk
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
trnsca, trnsca2, trnsca3
wkum, trnsk, trnst,
trans
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(cmx), domSize(NCMX_CONST), attribute(present)}
was, aas, bbs, cas, ccs, cbs, cds, waf, aaf, bbf, caf, ccf, cbf, cdf
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wcup,
wcue, odaer, trnsca_1D
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
end select
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present)}
cpl
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
dbdts,
tlev,
tmlv,
bmlv, blev
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
nkeb,
bmlv, blev,
bup, bdn, db, bu1, bu2, bd1, bd2, db01, db12, tu1, tu2, tc1, tc2, fmlv, fmlc,
tau, tac
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
bb, dbdn, dbup, b1, b2, db01u, db01d, db12, bmlv, blev, tu1, tu2, tc1, tc2,
tau, tac, fmlv, fmlc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2616, combined=2418, changed=1586, unchanged=832, subroutine_definitions=27, calls=43, imports=11, data_definitions=33, save=0, parameter=7, openmp=0, style=4, parallel_loops=2, device_data_init=12, implementation_scheme=2, commented=0, radiation=1130, storage_order=0, data_spec=0, other=315)
========== rad_moncld =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_moncld.f90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_moncld.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=156, combined=148, changed=1, unchanged=147, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== rad_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_option.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_option.f90
@domainDependant{attribute(host)}
vl_exp, ozone, my_trp_nocld, raisa, sw_sice, sw_sliq, cld_rd, aersl, diag_cwc
@end domainDependant
@domainDependant{attribute(host)}
vl_exp, ozone, my_trp_nocld, raisa, sw_sice, sw_sliq, cld_rd, aersl, diag_cwc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=46, combined=43, changed=5, unchanged=38, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=3)
========== rad_option_symbol =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_option_symbol.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_option_symbol.f90
@domainDependant{attribute(host)}
sice_ou_liou_jma, sice_ou_liou_org, sice_wyser, sliq_gsm0103, sliq_kawamoto,
aer_none, aer_clim, aer_clim_month, cld_rh, cld_all_or_nothing, cld_xu_randall, cld_my_pcond,
diag_cwc_heymsfield, diag_cwc_hack
@end domainDependant
@domainDependant{attribute(host)}
sice_ou_liou_jma, sice_ou_liou_org, sice_wyser, sliq_gsm0103, sliq_kawamoto,
aer_none, aer_clim, aer_clim_month, cld_rh, cld_all_or_nothing, cld_xu_randall, cld_my_pcond,
diag_cwc_heymsfield, diag_cwc_hack
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=25, combined=25, changed=5, unchanged=20, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=5)
========== rad_overlp =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_overlp.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_overlp.f90
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
cloud, gdp, gpf, ctau
wrk1, wrk2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gdp, gpf, cloud, wrk1, wrk2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical1, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, n
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(spectral), domSize(10)}
al, bl, cl, alphax, gammax
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cloud, plev, cwp, cip, sice, slqd, w, wsum, emis
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical1, vertical2), domSize(nx, ny, kmp1, kmp1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
cwp, cip, sice, sliq, cvr
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(present, autoDom)}
cloud, gdp, gpf, ctau
wrk1, wrk2
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gdp, gpf, cloud, wrk1, wrk2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical1, stub), domSize(nx, ny, kmp1, 1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, n
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(spectral), domSize(10)}
al, bl, cl, alphax, gammax
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cloud, plev, cwp, cip, sice, slqd, w, wsum, emis
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical1, vertical2), domSize(nx, ny, kmp1, kmp1)}
ctau
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
cwp, cip, sice, sliq, cvr
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=343, combined=317, changed=74, unchanged=243, subroutine_definitions=5, calls=0, imports=0, data_definitions=5, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=19, storage_order=0, data_spec=0, other=43)
========== rad_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_parm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_parm.f90
@domainDependant{attribute(host)}
presrf, g_emit, dtrads, dtradl, ppmco2m, ppmch4, ppmn2o, ppmf11, ppmf12, ppmf22,
cwcl0, cldrd2_qc_th, cldrd2_qci_th, pfact, gam, alphazero, temp_ice, my_sgm_min_fct,
my_sgm_max_fct, my_pcond_rad_qcth, sliq0, co2ppm, sq2_g_emit
@end domainDependant
@domainDependant{attribute(host)}
presrf, g_emit, dtrads, dtradl, ppmco2m, ppmch4, ppmn2o, ppmf11, ppmf12, ppmf22,
cwcl0, cldrd2_qc_th, cldrd2_qci_th, pfact, gam, alphazero, temp_ice, my_sgm_min_fct,
my_sgm_max_fct, my_pcond_rad_qcth, sliq0, co2ppm, sq2_g_emit
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=92, combined=85, changed=8, unchanged=77, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=0, other=5)
========== rad_radius =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_radius.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_radius.f90
@domainDependant{}
nx, ny, r_nec, t20, r_dtice, sice_t20, sice_t60, sliq0, rdim, sw_sice, sw_sliq, cld_rd
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
amask
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
tlev, cwc, cic, sice, sliq, cic_tmp, rice
@end domainDependant
@domainDependant{domName(r), domSize(rdim), attribute(autoDom, present)}
rtable
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, rice
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(rx), domSize(rdim)}
rtable
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, t20, r_dtice
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, sice_t20, sice_t60
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, r_nec
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, cic, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, sliq0
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
sliq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
sliq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwc, rice, cic
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, r_nec, t20, r_dtice, sice_t20, sice_t60, sliq0, rdim, sw_sice, sw_sliq, cld_rd
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
amask
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
tlev, cwc, cic, sice, sliq, cic_tmp, rice
@end domainDependant
@domainDependant{domName(r), domSize(rdim), attribute(autoDom, present)}
rtable
@end domainDependant
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, rice
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(rx), domSize(rdim)}
rtable
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, t20, r_dtice
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, sice_t20, sice_t60
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, r_nec
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gtmp, cic, sice
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, sliq0
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
sliq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
amask
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
sliq
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
cwc, rice, cic
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=298, combined=294, changed=128, unchanged=166, subroutine_definitions=11, calls=8, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=30, storage_order=0, data_spec=0, other=74)
========== rad_sw =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_sw.H90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_sw.f90
@domainDependant{attribute(host), domName(dom1), domSize(nb)}
frac, weit, fkry, fkwv, fko3, aice, alqd, bice, blqd, cice, clqd, dice, dlqd, eice, elqd, fice, flqd, prob, nar
@end domainDependant
@domainDependant{attribute(host)}
gi05
@end domainDependant
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
czeta, amask, avisb, avisd, anirb, anird, tcvr, rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
plev, delp, gq, qlev, ozon_w, atau, cwp, cip, sice, slqd, rshrt, tco2, to2n, to2s, aas
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), attribute(autoDom, present)}
pmlv, qmlv, sh2o, so3, wktr
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd)}
aec, asa, aaf
@end domainDependant
@domainDependant{domName(vertical), domSize(kmax), attribute(autoDom, present)}
cvr_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(bnd_tbl1, bnd_tbl2), domSize(81, 81)}
sblco2, sblo2n, sblo2s
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
atau, cwp, cip, sice, slqd, gpf, gdp, tco2, to2n, to2s, aas, wrk3, amass, cvr, cvr_in
@end domainDependant
@domainDependant{domName(i, j, verticalPlus), domSize(nx, ny, kmp1), attribute(autoDom, present)}
sh2o, so3
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
cmu, amask, avisb, avisd, anirb, anird, tcvr
@end domainDependant
@domainDependant{domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd), attribute(autoDom, present)}
aec, asa, aaf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar, prob, fko3, fkwv, fkry, aice, bice,
cice, dice, eice, fice, alqd, blqd, clqd, dlqd, elqd, flqd
@end domainDependant
@domainDependant{}
nx, ny, rgrav, s0
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
cmu, tcvr, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, rvisb, rvisd, rnirb, rnird
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gdp, cvr, amass, wrk3, aas, cvr_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
sh2o
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, nbir1, nsr, na, nbds, nlnd, prob_b, fko3_b, fkwv_b, fkry_b, aice_b, bice_b, cice_b, dice_b,
eice_b, fice_b, alqd_b, blqd_b, clqd_b, dlqd_b, elqd_b, flqd_b, fnr, fsr, cray, rgps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
czeta, cmu, amask, tcvr, ab, ad, rb, rd, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
wrk3, gdp, gpf, cvr, amass, tco2, to2s, to2n, atau, cwp, cip, sice, slqd, aas, tau0, tau9, ssc0, ssc9, g0, g9
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus), domSize(nx, ny, kmp1)}
sh2o, so3, sdir0, sdir1, sdir9, tb0, tb1, td0, td1, tdnb0, tdnb1, rdnd0, tdir0, tdir1, up, dn
rdnd1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
rb0, rb1, rd0, rd1, rupb0, rupb1, rupd0, rupd1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd)}
aec, asa, aaf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, cp, grav, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
czeta
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gq, aas, delp, rshrt
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
czeta
gdp, qlev, ozvt, tco2, to2n, to2s
pmlv, qmlv, sh2o, so3, wktr
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sblco2, sblo2n, sblo2s
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
tau_init, tausct, asymmetry_factor, f_scattered_factor, wrk_2
@end domainDependant
@domainDependant{}
g_k, cmu, ssc_k, wrk2, tau_k, sdir_kPlus1
@end domainDependant
@domainDependant{}
tdnb_kPlus1, rdnd_kPlus1, tb_kPlus1, rb_kPlus1, rd_kPlus1, td_kPlus1, tdir_k, tdir_kPlus1
@end domainDependant
@domainDependant{attribute(host), domName(dom1), domSize(nb)}
frac, weit, fkry, fkwv, fko3, aice, alqd, bice, blqd, cice, clqd, dice, dlqd, eice, elqd, fice, flqd, prob, nar
@end domainDependant
@domainDependant{attribute(host)}
gi05
@end domainDependant
end subroutine
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
czeta, amask, avisb, avisd, anirb, anird, tcvr, rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
plev, delp, gq, qlev, ozon_w, atau, cwp, cip, sice, slqd, rshrt, tco2, to2n, to2s, aas
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmp1), attribute(autoDom, present)}
pmlv, qmlv, sh2o, so3, wktr
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd)}
aec, asa, aaf
@end domainDependant
@domainDependant{domName(vertical), domSize(kmax), attribute(autoDom, present)}
cvr_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(bnd_tbl1, bnd_tbl2), domSize(81, 81)}
sblco2, sblo2n, sblo2s
@end domainDependant
@domainDependant{domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autoDom, present)}
atau, cwp, cip, sice, slqd, gpf, gdp, tco2, to2n, to2s, aas, wrk3, amass, cvr, cvr_in
@end domainDependant
@domainDependant{domName(i, j, verticalPlus), domSize(nx, ny, kmp1), attribute(autoDom, present)}
sh2o, so3
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
cmu, amask, avisb, avisd, anirb, anird, tcvr
@end domainDependant
@domainDependant{domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd), attribute(autoDom, present)}
aec, asa, aaf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar, prob, fko3, fkwv, fkry, aice, bice,
cice, dice, eice, fice, alqd, blqd, clqd, dlqd, elqd, flqd
@end domainDependant
@domainDependant{}
nx, ny, rgrav, s0
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
cmu, tcvr, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, rvisb, rvisd, rnirb, rnird
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gdp, cvr, amass, wrk3, aas, cvr_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
sh2o
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, nbir1, nsr, na, nbds, nlnd, prob_b, fko3_b, fkwv_b, fkry_b, aice_b, bice_b, cice_b, dice_b,
eice_b, fice_b, alqd_b, blqd_b, clqd_b, dlqd_b, elqd_b, flqd_b, fnr, fsr, cray, rgps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
czeta, cmu, amask, tcvr, ab, ad, rb, rd, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
wrk3, gdp, gpf, cvr, amass, tco2, to2s, to2n, atau, cwp, cip, sice, slqd, aas, tau0, tau9, ssc0, ssc9, g0, g9
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, verticalPlus), domSize(nx, ny, kmp1)}
sh2o, so3, sdir0, sdir1, sdir9, tb0, tb1, td0, td1, tdnb0, tdnb1, rdnd0, tdir0, tdir1, up, dn
rdnd1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmp1)}
rb0, rb1, rd0, rd1, rupb0, rupb1, rupd0, rupd1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(vertical, aer1, aer2), domSize(kmax, nbds, nlnd)}
aec, asa, aaf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
nx, ny, cp, grav, eps
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
czeta
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j, vertical), domSize(nx, ny, kmax)}
gq, aas, delp, rshrt
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
czeta
gdp, qlev, ozvt, tco2, to2n, to2s
pmlv, qmlv, sh2o, so3, wktr
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sblco2, sblo2n, sblo2s
@end domainDependant
@domainDependant{attribute(autoDom, host)}
nar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
tau_init, tausct, asymmetry_factor, f_scattered_factor, wrk_2
@end domainDependant
@domainDependant{}
g_k, cmu, ssc_k, wrk2, tau_k, sdir_kPlus1
@end domainDependant
@domainDependant{}
tdnb_kPlus1, rdnd_kPlus1, tb_kPlus1, rb_kPlus1, rd_kPlus1, td_kPlus1, tdir_k, tdir_kPlus1
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1036, combined=867, changed=537, unchanged=330, subroutine_definitions=10, calls=23, imports=6, data_definitions=18, save=0, parameter=0, openmp=0, style=6, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=0, radiation=346, storage_order=0, data_spec=0, other=124)
========== rad_zenith =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad/rad_zenith.h90, hfpath: branches/reference/asuca-kij/Src/Physics/rad/rad_zenith.f90
@domainDependant{attribute(host)}
pai12, pai432, cpie, hour_ini
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, zmean, clat, clon
@end domainDependant
end subroutine
@domainDependant{}
nx, ny, ishrt,
totalsec, sindel, cosdel, etime,
kt0, nrdstp, sumn, sumcos, sc, cs, ctime, btime, atime, tcosz
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, zmean, clat, clon
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
cpie, pai12, pai432, hour_ini, totalsec, sindel, cosdel, etime
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, clat, clon
@end domainDependant
@domainDependant{attribute(host)}
pai12, pai432, cpie, hour_ini
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, zmean, clat, clon
@end domainDependant
end subroutine
@domainDependant{}
nx, ny, ishrt,
totalsec, sindel, cosdel, etime,
kt0, nrdstp, sumn, sumcos, sc, cs, ctime, btime, atime, tcosz
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, zmean, clat, clon
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{}
cpie, pai12, pai432, hour_ini, totalsec, sindel, cosdel, etime
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ztemp, clat, clon
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=180, combined=168, changed=39, unchanged=129, subroutine_definitions=3, calls=2, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=0, radiation=6, storage_order=0, data_spec=0, other=23)
========== rad_aer_2d =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad_input_sample/rad_aer_2d.f90, hfpath: branches/reference/asuca-kij/Src/Physics/rad_input_sample/rad_aer_2d.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=257, combined=247, changed=9, unchanged=238, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=9, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== rad_ozn_3d =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/rad_input_sample/rad_ozn_3d.f90, hfpath: branches/reference/asuca-kij/Src/Physics/rad_input_sample/rad_ozn_3d.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=471, combined=410, changed=11, unchanged=399, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=11, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_const.h90, hfpath: None
module sf_const
implicit none
@domainDependant{attribute(host)}
timestep
@end domainDependant
contains
implicit none
timestep = timestep_in
end module sf_const
module sf_const
implicit none
@domainDependant{attribute(host)}
timestep
@end domainDependant
contains
implicit none
timestep = timestep_in
end module sf_const
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=16, combined=16, changed=16, unchanged=0, subroutine_definitions=1, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=2, other=9)
========== sf_conv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_conv.f90, hfpath: None
module sf_conv
implicit none
contains
implicit none
ptgrd = tg0 * r_exner_surf
qvgrd = beta * qsatg + (1.d0 - beta) * qv1
if (qvgrd > qsatg) then
qvgrd = qsatg
end if
implicit none
integer(4), intent(in) :: skind
if  (skind == kind_land .or. skind == kind_sea) then
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
else if (skind == kind_snow .or. skind == kind_ice) then
if (tg0 <= tkelvn) then
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) / (tg0 - tetn3i))
else
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
end if
end if
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
end module sf_conv
module sf_conv
implicit none
contains
implicit none
ptgrd = tg0 * r_exner_surf
qvgrd = beta * qsatg + (1.d0 - beta) * qv1
if (qvgrd > qsatg) then
qvgrd = qsatg
end if
implicit none
integer(4), intent(in) :: skind
if  (skind == kind_land .or. skind == kind_sea) then
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
else if (skind == kind_snow .or. skind == kind_ice) then
if (tg0 <= tkelvn) then
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) / (tg0 - tetn3i))
else
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
end if
end if
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
end module sf_conv
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=48, combined=43, changed=43, unchanged=0, subroutine_definitions=2, calls=0, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=4, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=11, other=22)
========== sf_flx =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_flx.h90, hfpath: None
module sf_flx
implicit none
private
public :: sf_flx_l_mo_inv_ini
public :: sf_flx_run
public :: sf_flx_screen_diag_run
contains
implicit none
l_mo_inv = 1.0d30
u_f = 0.01d0
implicit none
integer(4), intent(in) :: nx, ny, month
integer(4), intent(in) :: skind
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u1, v1, pt1, qv1, tg0,
beta, qsatg, r_exner_surf, solar, u_f, z_f1, z_0m, z_0h, z_0q, l_mo_inv,
dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
v_abs_a, ptgrd, qvgrd, pt_v, ptgrd_v, ri_b, z_a_m,
psi_m0, psi_h0, psi_q0, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q,
c_m, c_h, c_q
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, u_f
z_f1, z_0m, z_0h, z_0q, l_mo_inv,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
z_0m_wmo, z_0h_wmo, z_0q_wmo,
z_10_m, z_sfc_m, ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b,
z_a_m, psi_m0, psi_h0, psi_q0, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q,
c_m_a, c_h_a, c_q_a, c_m_10, c_h_10, c_q_10, c_m_sfc, c_h_sfc, c_q_sfc
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_0m, z_0h, z_0q, z_0m_wmo, z_0h_wmo, z_0q_wmo
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_0m_wmo = z_0m
z_0h_wmo = z_0h
z_0q_wmo = z_0q
if (skind /= kind_sea) then
if(z_0m_limit > 0.0_r_size) then
if(z_0m >= z_0m_limit) then
z_0m_wmo = z_0m_limit
z_0h_wmo = z_0m_limit * z_0h_fact
z_0q_wmo = z_0h_wmo
end if
else
z_0m_wmo = z_0m
z_0h_wmo = 0.1_r_size
z_0q_wmo = 0.1_r_size
end if
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, r_exner_surf, z_f1, z_0m, z_0h, z_0q,
ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b, z_a_m
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
ptgrd = tg0 * r_exner_surf
qvgrd = min((1.0e0_r_size - beta) * qv1 + beta * qsatg, qsatg)
v_abs_a = sqrt(u1 ** 2 + v1 ** 2)
pt_v = pt1 * (1.0d0 + c_virtual * qv1)
ptgrd_v = ptgrd * (1.0d0 + c_virtual * qvgrd)
ri_b = grav * z_f1 * (pt_v - ptgrd_v) * 2.0d0 / ((pt_v + ptgrd_v) * v_abs_a ** 2)
ri_b = min(ri_b, ri_b_max)
z_a_m = z_f1 + z_0m
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, ptgrd, qvgrd, c_m, c_h, c_q, v_abs_a,
dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
dfm_surf = c_m * v_abs_a
dfh_surf = c_h * v_abs_a
dfq_surf = c_q * v_abs_a
taux_surf_ex = - dfm_surf * u1
tauy_surf_ex = - dfm_surf * v1
ftl_surf_ex = - dfh_surf * (pt1 - ptgrd)
fqw_surf_ex = - dfq_surf * (qv1 - qvgrd)
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_a_m, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
psi_m0 = log(z_a_m / z_0m)
psi_h0 = log(z_a_m / z_0h)
if (skind == kind_sea) then
psi_q0 = log(z_a_m / z_0q)
else
psi_q0 = psi_h0
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: flag_use_z0q
integer(4), intent(in) :: calc_mode
@domainDependant{}
calc_mode
@end domainDependant
@domainDependant{attribute(autoDom, present)}
pi, two_thirds,
z_a_m, l_mo_inv, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q,
psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
bcd = bel_b * bel_c / bel_d
if (l_mo_inv >= 0.d0) then
zeta_tmp = z_a_m * l_mo_inv
exp_a_0m = exp(- bel_d * zeta_tmp)
psi_m_zeta_a_0m = - (bel_b * zeta_tmp - bcd) *  exp_a_0m - bel_a * zeta_tmp - bcd
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_hq_zeta_a_0m = - (bel_b * zeta_tmp - bcd) * exp_a_0m - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_h_zeta_a_0m = psi_hq_zeta_a_0m
zeta_tmp = z_0m * l_mo_inv
exp_0m = exp(- bel_d * zeta_tmp)
psi_m_zeta_0m = - (bel_b * zeta_tmp - bcd) * exp_0m - bel_a * zeta_tmp - bcd
zeta_tmp = z_0h * l_mo_inv
exp_0h = exp(- bel_d * zeta_tmp)
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_h_zeta_0h = - (bel_b * zeta_tmp - bcd) * exp_0h - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_m = psi_m0 - psi_m_zeta_a_0m + psi_m_zeta_0m
psi_h = psi_h0 - psi_h_zeta_a_0m + psi_h_zeta_0h
else
x_a_0m = sqrt(sqrt(1.d0 - 16.d0 * z_a_m * l_mo_inv))
psi_m_zeta_a_0m = pi * 0.5d0 - 2.d0 * atan(x_a_0m) + log(((1.d0 + x_a_0m) ** 2 * (1.d0 + x_a_0m ** 2)) * 0.125d0)
psi_hq_zeta_a_0m = 2.d0 * log((1.d0 + x_a_0m ** 2) * 0.5d0)
psi_h_zeta_a_0m = psi_hq_zeta_a_0m
x_0m = sqrt(sqrt(1.d0 - 16.d0 * z_0m * l_mo_inv))
psi_m_zeta_0m = pi * 0.5d0 - 2.d0 * atan(x_0m) + log(((1.d0 + x_0m) ** 2 * (1.d0 + x_0m ** 2)) * 0.125d0)
x_0h = sqrt(sqrt(1.d0 - 16.d0 * z_0h * l_mo_inv))
psi_h_zeta_0h = 2.d0 * log((1.d0 + x_0h ** 2) * 0.5d0)
psi_m = psi_m0 - psi_m_zeta_a_0m + psi_m_zeta_0m
psi_h = psi_h0 - psi_h_zeta_a_0m + psi_h_zeta_0h
end if
if(calc_mode == 1) then
if(l_mo_inv >= 0.0d0) then
zeta_tmp = (z_a_m) * l_mo_inv
dpsi_m_dl_a_0m = z_a_m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_a_0m - bel_a)
dpsi_h_dl_a_0m = z_a_m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_a_0m - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
zeta_tmp = z_0m * l_mo_inv
dpsi_m_dl_0m = z_0m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0m - bel_a)
zeta_tmp = z_0h * l_mo_inv
dpsi_h_dl_0h = z_0h * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0h - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
dpsi_m = - dpsi_m_dl_a_0m + dpsi_m_dl_0m
dpsi_h = - dpsi_h_dl_a_0m + dpsi_h_dl_0h
else
dpsi_m_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m * (1.d0 + x_a_0m) * (1.d0 + x_a_0m ** 2))
dpsi_h_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m ** 2 * (1.d0 + x_a_0m ** 2))
dpsi_m_dl_0m = - 16.d0 * z_0m / (x_0m * (1.d0 + x_0m) * (1.d0 + x_0m ** 2))
dpsi_h_dl_0h = - 16.d0 * z_0h / (x_0h ** 2 * (1.d0 + x_0h ** 2))
dpsi_m = - dpsi_m_dl_a_0m + dpsi_m_dl_0m
dpsi_h = - dpsi_h_dl_a_0m + dpsi_h_dl_0h
end if
end if
if(flag_use_z0q == 1) then
if (l_mo_inv >= 0.d0) then
zeta_tmp = z_0q * l_mo_inv
exp_0q = exp(- bel_d * zeta_tmp)
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_q_zeta_0q = - (bel_b * zeta_tmp - bcd) * exp_0q - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_q_zeta_a_0m = psi_hq_zeta_a_0m
psi_q = log(z_a_m / z_0q) - psi_q_zeta_a_0m + psi_q_zeta_0q
else
x_0q = sqrt(sqrt(1.d0 - 16.d0 * z_0q * l_mo_inv))
psi_q_zeta_0q = 2.d0 * log((1.d0 + x_0q ** 2) * 0.5d0)
psi_q_zeta_a_0m = psi_hq_zeta_a_0m
psi_q = psi_q0 - psi_q_zeta_a_0m + psi_q_zeta_0q
end if
if(calc_mode == 1) then
if(l_mo_inv >= 0.0d0) then
zeta_tmp = z_a_m * l_mo_inv
dpsi_q_dl_a_0m = z_a_m* ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0q - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
zeta_tmp = z_0q * l_mo_inv
dpsi_q_dl_0q = z_0q * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp(- bel_d * zeta_tmp) - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
dpsi_q = - dpsi_q_dl_a_0m + dpsi_q_dl_0q
else
dpsi_q_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m ** 2 * (1.d0 + x_a_0m ** 2))
dpsi_q_dl_0q = - 16.d0 * z_0q / (x_0q ** 2 * (1.d0 + x_0q ** 2))
dpsi_q = - dpsi_q_dl_a_0m + dpsi_q_dl_0q
end if
end if
else
psi_q = psi_h
if(calc_mode == 1) then
dpsi_q = dpsi_h
end if
end if
implicit none
integer(4), intent(in) :: nx, ny, calc_mode
integer(4), intent(in) :: skind
integer(4) :: flag_use_z0q
@domainDependant{}
nx, ny, calc_mode
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_a_m, l_mo_inv, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q,
psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
flag_use_z0q = 1
else
flag_use_z0q = 0
end if
@end parallelRegion
end subroutine
implicit none
@domainDependant{attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q, vkman
@end domainDependant
c_m = (vkman / psi_m) ** 2
c_h = vkman ** 2 / (psi_m * psi_h)
c_q = vkman ** 2 / (psi_m * psi_q)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: flag_use_z0q
integer(4) :: flag_iterate
integer(4) :: nn
integer(4) :: itr_num
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_a, z_a_m, ri_b, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0, l_mo_inv
@end domainDependant
flag_use_z0q = 0
flag_iterate = 0
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if((ri_b >= 0.0d0 .and. l_mo_inv < 0.0d0) .or. (ri_b < 0.0d0 .and. l_mo_inv >= 0.0d0) .or. abs(l_mo_inv) > 1.0d10) then
l_mo_inv = ri_b / z_a
flag_iterate = 1
end if
if (flag_iterate == 1) then
itr_num = itr_num_it_ini + itr_num_it
else
itr_num = itr_num_it
end if
do nn = 1, itr_num
l_mo_inv = ri_b * vkman * c_h / (c_m * sqrt(c_m) * z_a)
end do
newton_itr: do nn = 1, itr_num_newton
flag_iterate = 0
l_mo_inv_old = l_mo_inv
d_f = 2.0d0 * ri_b * psi_m * dpsi_m - z_a * (psi_h + l_mo_inv * dpsi_h)
f = ri_b * psi_m ** 2 - z_a * l_mo_inv * psi_h
l_mo_inv_tmp = l_mo_inv - f / d_f
if((ri_b >= 0 .and. l_mo_inv_tmp < 0) .or. (ri_b < 0 .and. l_mo_inv_tmp >= 0)) then
flag_iterate = 1
else
l_mo_inv = l_mo_inv_tmp
if(abs(l_mo_inv - l_mo_inv_old) < abs(l_mo_inv) * eps) then
exit newton_itr
end if
end if
if(flag_iterate == 1) then
l_mo_inv = ri_b * vkman * c_h / (c_m * sqrt(c_m) * z_a)
end if
end do newton_itr
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny, month
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny, month
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, v_abs_a, solar, c_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea .and. month > 0) then
if (month >= 4 .and. month <= 10) then
r_s_day = 30.d0
else
r_s_day = 60.d0
end if
if (c_q /= 0.d0) then
r_s = r_s_night / (1.d0 + solar) + r_s_day
c_q = 1.d0 / v_abs_a / ( + r_s + 1.d0 / (c_q * v_abs_a) )
end if
end if
@end parallelRegion
implicit none
@domainDependant{attribute(autoDom, present)}
grav, u_f, z_0m, z_0h, z_0q
@end domainDependant
nu_div_u_f = nu / u_f
z_0m = a_m * nu_div_u_f + alpha * u_f * u_f / grav
z_0h = a_h * nu_div_u_f
z_0q = a_q * nu_div_u_f
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u_f, z_0m, z_0h, z_0q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_0m, z_10_m, z_sfc_m
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_10_m  = z_diag_sfc_uv + z_0m
z_sfc_m = z_diag_sfc_tq + z_0m
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, qv1, p_surf, r_exner_surf,
c_m_a, c_m_10, c_m_sfc, c_h_a, c_h_sfc, c_q_a, c_q_sfc,
ptgrd_v, qvgrd, pt_v, v_abs_a, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
v_abs_a = max(v_abs_a, eps)
v_abs_10 = sqrt(c_m_a / c_m_10) * v_abs_a
u2v2 = u1 ** 2 + v1 ** 2
if (u2v2 /= 0.0_r_size) then
v_abs_a_inv = 1.0d0 / sqrt(u2v2)
u_10 = v_abs_10 * u1 * v_abs_a_inv
v_10 = v_abs_10 * v1 * v_abs_a_inv
else
u_10 = 0.0_r_size
v_10 = 0.0_r_size
end if
v_abs_sfc_fac = sqrt(c_m_sfc / c_m_a)
ptv_fact = v_abs_sfc_fac * c_h_a / c_h_sfc
ptv_fact = min(max(ptv_fact, ptv_fact_min), ptv_fact_max)
ptv_sfc = ptgrd_v + (pt_v - ptgrd_v) * ptv_fact
qv_fact = v_abs_sfc_fac * c_q_a / c_q_sfc
qv_fact = min(max(qv_fact, qv_fact_min), qv_fact_max)
qv_sfc = max(qvgrd + (qv1 - qvgrd) * qv_fact, qv_min)
t_sfc = ptv_sfc / (r_exner_surf * (1.0_r_size + c_virtual * qv_sfc))
tt = log(p_surf * qv_sfc / (e0cw * (epsilon + one_minus_epsilon * qv_sfc)))
ttd_sfc = t_sfc - tkelvn - (tetn2w - tetn3w) * tt / (tetn1w - tt)
ttd_sfc = min(max(ttd_sfc, ttd_min), ttd_max)
t_d = t_sfc - ttd_sfc
e_1_div_e_2 = exp(tetn1w * ((t_d - tetn2w) / (t_d - tetn3w) - (t_sfc - tetn2w) / (t_sfc - tetn3w)))
rh_sfc = max(0.0_r_size, min(1.0_r_size, e_1_div_e_2))
@end parallelRegion
module sf_flx
implicit none
private
public :: sf_flx_l_mo_inv_ini
public :: sf_flx_run
public :: sf_flx_screen_diag_run
contains
implicit none
l_mo_inv = 1.0d30
u_f = 0.01d0
implicit none
integer(4), intent(in) :: nx, ny, month
integer(4), intent(in) :: skind
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u1, v1, pt1, qv1, tg0,
beta, qsatg, r_exner_surf, solar, u_f, z_f1, z_0m, z_0h, z_0q, l_mo_inv,
dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
v_abs_a, ptgrd, qvgrd, pt_v, ptgrd_v, ri_b, z_a_m,
psi_m0, psi_h0, psi_q0, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q,
c_m, c_h, c_q
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, u_f
z_f1, z_0m, z_0h, z_0q, l_mo_inv,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
z_0m_wmo, z_0h_wmo, z_0q_wmo,
z_10_m, z_sfc_m, ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b,
z_a_m, psi_m0, psi_h0, psi_q0, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q,
c_m_a, c_h_a, c_q_a, c_m_10, c_h_10, c_q_10, c_m_sfc, c_h_sfc, c_q_sfc
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_0m, z_0h, z_0q, z_0m_wmo, z_0h_wmo, z_0q_wmo
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_0m_wmo = z_0m
z_0h_wmo = z_0h
z_0q_wmo = z_0q
if (skind /= kind_sea) then
if(z_0m_limit > 0.0_r_size) then
if(z_0m >= z_0m_limit) then
z_0m_wmo = z_0m_limit
z_0h_wmo = z_0m_limit * z_0h_fact
z_0q_wmo = z_0h_wmo
end if
else
z_0m_wmo = z_0m
z_0h_wmo = 0.1_r_size
z_0q_wmo = 0.1_r_size
end if
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, r_exner_surf, z_f1, z_0m, z_0h, z_0q,
ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b, z_a_m
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
ptgrd = tg0 * r_exner_surf
qvgrd = min((1.0e0_r_size - beta) * qv1 + beta * qsatg, qsatg)
v_abs_a = sqrt(u1 ** 2 + v1 ** 2)
pt_v = pt1 * (1.0d0 + c_virtual * qv1)
ptgrd_v = ptgrd * (1.0d0 + c_virtual * qvgrd)
ri_b = grav * z_f1 * (pt_v - ptgrd_v) * 2.0d0 / ((pt_v + ptgrd_v) * v_abs_a ** 2)
ri_b = min(ri_b, ri_b_max)
z_a_m = z_f1 + z_0m
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, ptgrd, qvgrd, c_m, c_h, c_q, v_abs_a,
dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
dfm_surf = c_m * v_abs_a
dfh_surf = c_h * v_abs_a
dfq_surf = c_q * v_abs_a
taux_surf_ex = - dfm_surf * u1
tauy_surf_ex = - dfm_surf * v1
ftl_surf_ex = - dfh_surf * (pt1 - ptgrd)
fqw_surf_ex = - dfq_surf * (qv1 - qvgrd)
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_a_m, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
psi_m0 = log(z_a_m / z_0m)
psi_h0 = log(z_a_m / z_0h)
if (skind == kind_sea) then
psi_q0 = log(z_a_m / z_0q)
else
psi_q0 = psi_h0
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: flag_use_z0q
integer(4), intent(in) :: calc_mode
@domainDependant{}
calc_mode
@end domainDependant
@domainDependant{attribute(autoDom, present)}
pi, two_thirds,
z_a_m, l_mo_inv, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q,
psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
bcd = bel_b * bel_c / bel_d
if (l_mo_inv >= 0.d0) then
zeta_tmp = z_a_m * l_mo_inv
exp_a_0m = exp(- bel_d * zeta_tmp)
psi_m_zeta_a_0m = - (bel_b * zeta_tmp - bcd) *  exp_a_0m - bel_a * zeta_tmp - bcd
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_hq_zeta_a_0m = - (bel_b * zeta_tmp - bcd) * exp_a_0m - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_h_zeta_a_0m = psi_hq_zeta_a_0m
zeta_tmp = z_0m * l_mo_inv
exp_0m = exp(- bel_d * zeta_tmp)
psi_m_zeta_0m = - (bel_b * zeta_tmp - bcd) * exp_0m - bel_a * zeta_tmp - bcd
zeta_tmp = z_0h * l_mo_inv
exp_0h = exp(- bel_d * zeta_tmp)
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_h_zeta_0h = - (bel_b * zeta_tmp - bcd) * exp_0h - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_m = psi_m0 - psi_m_zeta_a_0m + psi_m_zeta_0m
psi_h = psi_h0 - psi_h_zeta_a_0m + psi_h_zeta_0h
else
x_a_0m = sqrt(sqrt(1.d0 - 16.d0 * z_a_m * l_mo_inv))
psi_m_zeta_a_0m = pi * 0.5d0 - 2.d0 * atan(x_a_0m) + log(((1.d0 + x_a_0m) ** 2 * (1.d0 + x_a_0m ** 2)) * 0.125d0)
psi_hq_zeta_a_0m = 2.d0 * log((1.d0 + x_a_0m ** 2) * 0.5d0)
psi_h_zeta_a_0m = psi_hq_zeta_a_0m
x_0m = sqrt(sqrt(1.d0 - 16.d0 * z_0m * l_mo_inv))
psi_m_zeta_0m = pi * 0.5d0 - 2.d0 * atan(x_0m) + log(((1.d0 + x_0m) ** 2 * (1.d0 + x_0m ** 2)) * 0.125d0)
x_0h = sqrt(sqrt(1.d0 - 16.d0 * z_0h * l_mo_inv))
psi_h_zeta_0h = 2.d0 * log((1.d0 + x_0h ** 2) * 0.5d0)
psi_m = psi_m0 - psi_m_zeta_a_0m + psi_m_zeta_0m
psi_h = psi_h0 - psi_h_zeta_a_0m + psi_h_zeta_0h
end if
if(calc_mode == 1) then
if(l_mo_inv >= 0.0d0) then
zeta_tmp = (z_a_m) * l_mo_inv
dpsi_m_dl_a_0m = z_a_m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_a_0m - bel_a)
dpsi_h_dl_a_0m = z_a_m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_a_0m - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
zeta_tmp = z_0m * l_mo_inv
dpsi_m_dl_0m = z_0m * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0m - bel_a)
zeta_tmp = z_0h * l_mo_inv
dpsi_h_dl_0h = z_0h * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0h - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
dpsi_m = - dpsi_m_dl_a_0m + dpsi_m_dl_0m
dpsi_h = - dpsi_h_dl_a_0m + dpsi_h_dl_0h
else
dpsi_m_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m * (1.d0 + x_a_0m) * (1.d0 + x_a_0m ** 2))
dpsi_h_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m ** 2 * (1.d0 + x_a_0m ** 2))
dpsi_m_dl_0m = - 16.d0 * z_0m / (x_0m * (1.d0 + x_0m) * (1.d0 + x_0m ** 2))
dpsi_h_dl_0h = - 16.d0 * z_0h / (x_0h ** 2 * (1.d0 + x_0h ** 2))
dpsi_m = - dpsi_m_dl_a_0m + dpsi_m_dl_0m
dpsi_h = - dpsi_h_dl_a_0m + dpsi_h_dl_0h
end if
end if
if(flag_use_z0q == 1) then
if (l_mo_inv >= 0.d0) then
zeta_tmp = z_0q * l_mo_inv
exp_0q = exp(- bel_d * zeta_tmp)
tmp_r = 1.d0 + two_thirds * bel_a * zeta_tmp
psi_q_zeta_0q = - (bel_b * zeta_tmp - bcd) * exp_0q - tmp_r * sqrt(tmp_r) - bcd + 1.d0
psi_q_zeta_a_0m = psi_hq_zeta_a_0m
psi_q = log(z_a_m / z_0q) - psi_q_zeta_a_0m + psi_q_zeta_0q
else
x_0q = sqrt(sqrt(1.d0 - 16.d0 * z_0q * l_mo_inv))
psi_q_zeta_0q = 2.d0 * log((1.d0 + x_0q ** 2) * 0.5d0)
psi_q_zeta_a_0m = psi_hq_zeta_a_0m
psi_q = psi_q0 - psi_q_zeta_a_0m + psi_q_zeta_0q
end if
if(calc_mode == 1) then
if(l_mo_inv >= 0.0d0) then
zeta_tmp = z_a_m * l_mo_inv
dpsi_q_dl_a_0m = z_a_m* ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp_0q - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
zeta_tmp = z_0q * l_mo_inv
dpsi_q_dl_0q = z_0q * ( - bel_b * (1.d0 - bel_d * zeta_tmp + bel_c) * exp(- bel_d * zeta_tmp) - bel_a * sqrt(1.d0 + two_thirds * bel_a * zeta_tmp))
dpsi_q = - dpsi_q_dl_a_0m + dpsi_q_dl_0q
else
dpsi_q_dl_a_0m = - 16.d0 * z_a_m / (x_a_0m ** 2 * (1.d0 + x_a_0m ** 2))
dpsi_q_dl_0q = - 16.d0 * z_0q / (x_0q ** 2 * (1.d0 + x_0q ** 2))
dpsi_q = - dpsi_q_dl_a_0m + dpsi_q_dl_0q
end if
end if
else
psi_q = psi_h
if(calc_mode == 1) then
dpsi_q = dpsi_h
end if
end if
implicit none
integer(4), intent(in) :: nx, ny, calc_mode
integer(4), intent(in) :: skind
integer(4) :: flag_use_z0q
@domainDependant{}
nx, ny, calc_mode
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, z_a_m, l_mo_inv, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q,
psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
flag_use_z0q = 1
else
flag_use_z0q = 0
end if
@end parallelRegion
end subroutine
implicit none
@domainDependant{attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q, vkman
@end domainDependant
c_m = (vkman / psi_m) ** 2
c_h = vkman ** 2 / (psi_m * psi_h)
c_q = vkman ** 2 / (psi_m * psi_q)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: flag_use_z0q
integer(4) :: flag_iterate
integer(4) :: nn
integer(4) :: itr_num
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_a, z_a_m, ri_b, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0, l_mo_inv
@end domainDependant
flag_use_z0q = 0
flag_iterate = 0
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if((ri_b >= 0.0d0 .and. l_mo_inv < 0.0d0) .or. (ri_b < 0.0d0 .and. l_mo_inv >= 0.0d0) .or. abs(l_mo_inv) > 1.0d10) then
l_mo_inv = ri_b / z_a
flag_iterate = 1
end if
if (flag_iterate == 1) then
itr_num = itr_num_it_ini + itr_num_it
else
itr_num = itr_num_it
end if
do nn = 1, itr_num
l_mo_inv = ri_b * vkman * c_h / (c_m * sqrt(c_m) * z_a)
end do
newton_itr: do nn = 1, itr_num_newton
flag_iterate = 0
l_mo_inv_old = l_mo_inv
d_f = 2.0d0 * ri_b * psi_m * dpsi_m - z_a * (psi_h + l_mo_inv * dpsi_h)
f = ri_b * psi_m ** 2 - z_a * l_mo_inv * psi_h
l_mo_inv_tmp = l_mo_inv - f / d_f
if((ri_b >= 0 .and. l_mo_inv_tmp < 0) .or. (ri_b < 0 .and. l_mo_inv_tmp >= 0)) then
flag_iterate = 1
else
l_mo_inv = l_mo_inv_tmp
if(abs(l_mo_inv - l_mo_inv_old) < abs(l_mo_inv) * eps) then
exit newton_itr
end if
end if
if(flag_iterate == 1) then
l_mo_inv = ri_b * vkman * c_h / (c_m * sqrt(c_m) * z_a)
end if
end do newton_itr
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny, month
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny, month
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, v_abs_a, solar, c_q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea .and. month > 0) then
if (month >= 4 .and. month <= 10) then
r_s_day = 30.d0
else
r_s_day = 60.d0
end if
if (c_q /= 0.d0) then
r_s = r_s_night / (1.d0 + solar) + r_s_day
c_q = 1.d0 / v_abs_a / ( + r_s + 1.d0 / (c_q * v_abs_a) )
end if
end if
@end parallelRegion
implicit none
@domainDependant{attribute(autoDom, present)}
grav, u_f, z_0m, z_0h, z_0q
@end domainDependant
nu_div_u_f = nu / u_f
z_0m = a_m * nu_div_u_f + alpha * u_f * u_f / grav
z_0h = a_h * nu_div_u_f
z_0q = a_q * nu_div_u_f
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, u_f, z_0m, z_0h, z_0q
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_0m, z_10_m, z_sfc_m
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_10_m  = z_diag_sfc_uv + z_0m
z_sfc_m = z_diag_sfc_tq + z_0m
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, qv1, p_surf, r_exner_surf,
c_m_a, c_m_10, c_m_sfc, c_h_a, c_h_sfc, c_q_a, c_q_sfc,
ptgrd_v, qvgrd, pt_v, v_abs_a, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
v_abs_a = max(v_abs_a, eps)
v_abs_10 = sqrt(c_m_a / c_m_10) * v_abs_a
u2v2 = u1 ** 2 + v1 ** 2
if (u2v2 /= 0.0_r_size) then
v_abs_a_inv = 1.0d0 / sqrt(u2v2)
u_10 = v_abs_10 * u1 * v_abs_a_inv
v_10 = v_abs_10 * v1 * v_abs_a_inv
else
u_10 = 0.0_r_size
v_10 = 0.0_r_size
end if
v_abs_sfc_fac = sqrt(c_m_sfc / c_m_a)
ptv_fact = v_abs_sfc_fac * c_h_a / c_h_sfc
ptv_fact = min(max(ptv_fact, ptv_fact_min), ptv_fact_max)
ptv_sfc = ptgrd_v + (pt_v - ptgrd_v) * ptv_fact
qv_fact = v_abs_sfc_fac * c_q_a / c_q_sfc
qv_fact = min(max(qv_fact, qv_fact_min), qv_fact_max)
qv_sfc = max(qvgrd + (qv1 - qvgrd) * qv_fact, qv_min)
t_sfc = ptv_sfc / (r_exner_surf * (1.0_r_size + c_virtual * qv_sfc))
tt = log(p_surf * qv_sfc / (e0cw * (epsilon + one_minus_epsilon * qv_sfc)))
ttd_sfc = t_sfc - tkelvn - (tetn2w - tetn3w) * tt / (tetn1w - tt)
ttd_sfc = min(max(ttd_sfc, ttd_min), ttd_max)
t_d = t_sfc - ttd_sfc
e_1_div_e_2 = exp(tetn1w * ((t_d - tetn2w) / (t_d - tetn3w) - (t_sfc - tetn2w) / (t_sfc - tetn3w)))
rh_sfc = max(0.0_r_size, min(1.0_r_size, e_1_div_e_2))
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=869, combined=771, changed=771, unchanged=0, subroutine_definitions=17, calls=28, imports=30, data_definitions=0, save=0, parameter=23, openmp=0, style=23, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=265, other=383)
========== sf_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_grid.h90, hfpath: None
module sf_grid
implicit none
private
integer(4), public :: ngm
public :: sf_ngm_set
public :: sf_tgf_grid_set
@domainDependant{attribute(host)}
ngm
@end domainDependant
contains
implicit none
integer(4), intent(in) :: ngm_in
ngm = ngm_in
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p
@end domainDependant
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p
z_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_h(0) = 0.0
do kz = 1, ngm - 1
z_h(kz) = (z_f(kz + 1) + z_f(kz)) * 0.5d0
end do
do kz = 1, ngm - 1
dz_f = z_h(kz) - z_h(kz - 1)
dz_h = z_f(kz + 1) - z_f(kz)
rdz_f(kz) = 1.0 / dz_f
rdz_h(kz) = 1.0 / dz_h
f2h_m(kz) = (z_f(kz + 1) - z_h(kz)) / (z_f(kz + 1) - z_f(kz))
f2h_p(kz) = (z_h(kz) - z_f(kz)) / (z_f(kz + 1) - z_f(kz))
end do
@end parallelRegion
module sf_grid
implicit none
private
integer(4), public :: ngm
public :: sf_ngm_set
public :: sf_tgf_grid_set
@domainDependant{attribute(host)}
ngm
@end domainDependant
contains
implicit none
integer(4), intent(in) :: ngm_in
ngm = ngm_in
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p
@end domainDependant
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p
z_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
z_h(0) = 0.0
do kz = 1, ngm - 1
z_h(kz) = (z_f(kz + 1) + z_f(kz)) * 0.5d0
end do
do kz = 1, ngm - 1
dz_f = z_h(kz) - z_h(kz - 1)
dz_h = z_f(kz + 1) - z_f(kz)
rdz_f(kz) = 1.0 / dz_f
rdz_h(kz) = 1.0 / dz_h
f2h_m(kz) = (z_f(kz + 1) - z_h(kz)) / (z_f(kz + 1) - z_f(kz))
f2h_p(kz) = (z_h(kz) - z_f(kz)) / (z_f(kz + 1) - z_f(kz))
end do
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=67, combined=67, changed=67, unchanged=0, subroutine_definitions=3, calls=1, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=3, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=13, other=43)
========== sf_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_parm.h90, hfpath: None
module sf_parm
implicit none
@domainDependant{attribute(host)}
w_g_max_fct, w_g_min_fct, w_2_max_fct, w_2_min_fct,
z_diag_sfc_uv, z_diag_sfc_tq, z_0m_limit, z_0h_fact
@end domainDependant
contains
implicit none
if (present(w_g_max_fct_in)) w_g_max_fct = w_g_max_fct_in
if (present(w_g_min_fct_in)) w_g_min_fct = w_g_min_fct_in
if (present(w_2_max_fct_in)) w_2_max_fct = w_2_max_fct_in
if (present(w_2_min_fct_in)) w_2_min_fct = w_2_min_fct_in
if (present(z_diag_sfc_uv_in)) z_diag_sfc_uv = z_diag_sfc_uv_in
if (present(z_diag_sfc_tq_in)) z_diag_sfc_tq = z_diag_sfc_tq_in
if (present(z_0m_limit_in)) z_0m_limit = z_0m_limit_in
if (present(z_0h_fact_in)) z_0h_fact = z_0h_fact_in
end module sf_parm
module sf_parm
implicit none
@domainDependant{attribute(host)}
w_g_max_fct, w_g_min_fct, w_2_max_fct, w_2_min_fct,
z_diag_sfc_uv, z_diag_sfc_tq, z_0m_limit, z_0h_fact
@end domainDependant
contains
implicit none
if (present(w_g_max_fct_in)) w_g_max_fct = w_g_max_fct_in
if (present(w_g_min_fct_in)) w_g_min_fct = w_g_min_fct_in
if (present(w_2_max_fct_in)) w_2_max_fct = w_2_max_fct_in
if (present(w_2_min_fct_in)) w_2_min_fct = w_2_min_fct_in
if (present(z_diag_sfc_uv_in)) z_diag_sfc_uv = z_diag_sfc_uv_in
if (present(z_diag_sfc_tq_in)) z_diag_sfc_tq = z_diag_sfc_tq_in
if (present(z_0m_limit_in)) z_0m_limit = z_0m_limit_in
if (present(z_0h_fact_in)) z_0h_fact = z_0h_fact_in
end module sf_parm
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=40, combined=38, changed=38, unchanged=0, subroutine_definitions=1, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=16, other=17)
========== sf_phys_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_phys_const.f90, hfpath: None
module sf_phys_const
contains
implicit none
grav = grav_in
c_virtual = c_virtual_in
end module sf_phys_const
module sf_phys_const
contains
implicit none
grav = grav_in
c_virtual = c_virtual_in
end module sf_phys_const
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=14, combined=14, changed=14, unchanged=0, subroutine_definitions=1, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=4, other=6)
========== sf_qsatg =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_qsatg.H90, hfpath: None
module sf_qsatg
implicit none
contains
#define SF_QSATG_CALC_SCALAR() `\
if      (skind == kind_land .or. skind == kind_sea) then `\
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) `\ / (tg0 - tetn3w)) `\
else if (skind == kind_snow .or. skind == kind_ice) then `\
if (tg0 <= tkelvn) then `\
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) `\ / (tg0 - tetn3i)) `\
else `\
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) `\ / (tg0 - tetn3w)) `\
end if `\
end if `\
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
implicit none
integer(4), intent(in) :: skind
SF_QSATG_CALC_SCALAR()
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, p_surf, tg0, qsatg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
SF_QSATG_CALC_SCALAR()
@end parallelRegion
module sf_qsatg
implicit none
contains
#define SF_QSATG_CALC_SCALAR() `\
if      (skind == kind_land .or. skind == kind_sea) then `\
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) `\ / (tg0 - tetn3w)) `\
else if (skind == kind_snow .or. skind == kind_ice) then `\
if (tg0 <= tkelvn) then `\
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) `\ / (tg0 - tetn3i)) `\
else `\
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) `\ / (tg0 - tetn3w)) `\
end if `\
end if `\
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
implicit none
integer(4), intent(in) :: skind
SF_QSATG_CALC_SCALAR()
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, p_surf, tg0, qsatg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
SF_QSATG_CALC_SCALAR()
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=54, combined=50, changed=50, unchanged=0, subroutine_definitions=2, calls=0, imports=6, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=8, other=30)
========== sf_skind =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_skind.h90, hfpath: None
module sf_skind
implicit none
@domainDependant{attribute(host)}
kind_land, kind_sea, kind_snow, kind_ice
@end domainDependant
end module sf_skind
module sf_skind
implicit none
@domainDependant{attribute(host)}
kind_land, kind_sea, kind_snow, kind_ice
@end domainDependant
end module sf_skind
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=10, combined=10, changed=10, unchanged=0, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=4, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=6)
========== sf_tgf_tend_solve =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_tgf_tend_solve.h90, hfpath: None
module sf_tgf_tend_solve
implicit none
private
public :: sf_tgf_matcoef
public :: sf_tgf_solve_downward
public :: sf_tgf_solve_upward
contains
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, fktg_surf, fktg, tg, z_g, rdzg_f, rdzg_h, f2h_m, f2h_p, aag, bbg, ccg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea) then
rdzg_34 = 1.0 / z_g(1)
kz = 1
kmh_p1 = f2h_p(kz) * fktg(kz + 1) + f2h_m(kz) * fktg(kz)
ccg(kz) = kmh_p1 * rdzg_f(kz) * rdzg_h(kz)
aag(kz) = fktg_surf * rdzg_34 * rdzg_f(kz)
bbg(kz) = -aag(kz) - ccg(kz)
do kz = 2, ngm - 1
kmh_p1 = f2h_p(kz) * fktg(kz + 1) + f2h_m(kz) * fktg(kz)
kmh_m1 = f2h_p(kz - 1) * fktg(kz) + f2h_m(kz - 1) * fktg(kz - 1)
ccg(kz) = kmh_p1 * rdzg_f(kz) * rdzg_h(kz)
aag(kz) = kmh_m1 * rdzg_f(kz) * rdzg_h(kz - 1)
bbg(kz) = -aag(kz) - ccg(kz)
end do
do kz = 1, ngm - 2
ppg(kz) = aag(kz) * tg(kz - 1) + bbg(kz) * tg(kz) + ccg(kz) * tg(kz + 1)
aag(kz) = - aag(kz) * timestep
ccg(kz) = - ccg(kz) * timestep
bbg(kz) = 1.0 - bbg(kz) * timestep
end do
kz = ngm - 1
ppg(kz) = aag(kz) * tg(kz - 1) + bbg(kz) * tg(kz) + ccg(kz) * tg(kz + 1)
aag(kz) = - aag(kz) * timestep
ccg(kz) = 0.0
bbg(kz) = 1.0 - bbg(kz) * timestep
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, aag, ccg, bbg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea) then
do kz = ngm - 1, 2, -1
fac = ccg(kz - 1) / bbg(kz)
ppg(kz - 1) = ppg(kz - 1) - ppg(kz) * fac
bbg(kz - 1) = bbg(kz - 1) - aag(kz) * fac
end do
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, aag, bbg, ppg, tend_tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
do kz = 0, ngm
tend_tg(kz) = 0.0_r_size
end do
else
do kz = 2, ngm - 1
tend_tg(kz) = (ppg(kz) - aag(kz) * tend_tg(kz - 1)) / bbg(kz)
end do
tend_tg(ngm) = 0.0
end if
@end parallelRegion
module sf_tgf_tend_solve
implicit none
private
public :: sf_tgf_matcoef
public :: sf_tgf_solve_downward
public :: sf_tgf_solve_upward
contains
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, fktg_surf, fktg, tg, z_g, rdzg_f, rdzg_h, f2h_m, f2h_p, aag, bbg, ccg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea) then
rdzg_34 = 1.0 / z_g(1)
kz = 1
kmh_p1 = f2h_p(kz) * fktg(kz + 1) + f2h_m(kz) * fktg(kz)
ccg(kz) = kmh_p1 * rdzg_f(kz) * rdzg_h(kz)
aag(kz) = fktg_surf * rdzg_34 * rdzg_f(kz)
bbg(kz) = -aag(kz) - ccg(kz)
do kz = 2, ngm - 1
kmh_p1 = f2h_p(kz) * fktg(kz + 1) + f2h_m(kz) * fktg(kz)
kmh_m1 = f2h_p(kz - 1) * fktg(kz) + f2h_m(kz - 1) * fktg(kz - 1)
ccg(kz) = kmh_p1 * rdzg_f(kz) * rdzg_h(kz)
aag(kz) = kmh_m1 * rdzg_f(kz) * rdzg_h(kz - 1)
bbg(kz) = -aag(kz) - ccg(kz)
end do
do kz = 1, ngm - 2
ppg(kz) = aag(kz) * tg(kz - 1) + bbg(kz) * tg(kz) + ccg(kz) * tg(kz + 1)
aag(kz) = - aag(kz) * timestep
ccg(kz) = - ccg(kz) * timestep
bbg(kz) = 1.0 - bbg(kz) * timestep
end do
kz = ngm - 1
ppg(kz) = aag(kz) * tg(kz - 1) + bbg(kz) * tg(kz) + ccg(kz) * tg(kz + 1)
aag(kz) = - aag(kz) * timestep
ccg(kz) = 0.0
bbg(kz) = 1.0 - bbg(kz) * timestep
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, aag, ccg, bbg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_sea) then
do kz = ngm - 1, 2, -1
fac = ccg(kz - 1) / bbg(kz)
ppg(kz - 1) = ppg(kz - 1) - ppg(kz) * fac
bbg(kz - 1) = bbg(kz - 1) - aag(kz) * fac
end do
end if
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, aag, bbg, ppg, tend_tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind == kind_sea) then
do kz = 0, ngm
tend_tg(kz) = 0.0_r_size
end do
else
do kz = 2, ngm - 1
tend_tg(kz) = (ppg(kz) - aag(kz) * tend_tg(kz - 1)) / bbg(kz)
end do
tend_tg(ngm) = 0.0
end if
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=135, combined=131, changed=131, unchanged=0, subroutine_definitions=3, calls=0, imports=10, data_definitions=0, save=0, parameter=0, openmp=0, style=6, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=24, other=86)
========== sf_wet =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf/sf_wet.h90, hfpath: None
module sf_wet
implicit none
private
public :: sf_soil_matcoef
public :: sf_wet_adjust
public :: sf_wet_wg_beta
public :: sf_wet_maxmin_set
contains
implicit none
if      (wg(0) >= 0.75d0 * w_max) then
c_1 = 0.5d0
else if (wg(0) > 0.15d0 * w_max) then
c_1 = 14.d0 - 22.5d0 * (wg(0) / w_max - 0.15d0)
else
c_1 = 14.d0
end if
rest = - (wg(0) - wg(1)) * r_tau_g
fg = - c_1 * (fqw_surf_ex - prep_rate) / (dns_rain * d_1)
f1 = - (fqw_surf_ex - prep_rate) / (dns_rain * d_2)
tend_wg(0) = rest + fg
tend_wg(1) = f1
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, dns_lowest, dfqb_surf, tg, qsatg, fqw_surf_ex, wg,
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1,
tend_wg_ex0, tend_wg_ex1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_land) then
soil_coefg_q1 = 0.0_r_size
soil_coefg_t12 = 0.0_r_size
soil_coefg_w12 = 1.0_r_size
soil_coefg_w1 = 0.0_r_size
soil_coef1_q1 = 0.0_r_size
soil_coef1_t12 = 0.0_r_size
soil_coef1_w1 = 1.0_r_size
tend_wg_ex0 = 0.0_r_size
tend_wg_ex1 = 0.0_r_size
else
if      (wg(0) >= 0.75d0 * w_max) then
c_1 = 0.5d0
else if (wg(0) > 0.15d0 * w_max) then
c_1 = 14.d0 - 22.5d0 * (wg(0) / w_max - 0.15d0)
else
c_1 = 14.d0
end if
rest = - (wg(0) - wg(1)) * r_tau_g
fg = - c_1 * (fqw_surf_ex - prep_rate) / (dns_rain * d_1)
f1 = - (fqw_surf_ex - prep_rate) / (dns_rain * d_2)
tend_wg_ex0 = rest + fg
tend_wg_ex1 = f1
dqdt = hlatnt * qsatg / (rv * tg(0) ** 2)
soil_coefg_w12 = 1.0_r_size + r_tau_g * timestep
soil_coefg_w1 = - r_tau_g * timestep
soil_coefg_q1 = c_1 * dns_lowest * dfqb_surf / (dns_rain * d_1) * timestep
soil_coefg_t12 = - c_1 * dns_lowest * dfqb_surf / (dns_rain * d_1) * dqdt * timestep
soil_coef1_q1 = dns_lowest * dfqb_surf / (dns_rain * d_2) * timestep
soil_coef1_t12 = - dns_lowest * dfqb_surf / (dns_rain * d_2) * dqdt * timestep
soil_coef1_w1 = 1.0_r_size
end if
@end parallelRegion
implicit none
wg(1) = min(wg(1), wg_max, w_max)
wg(1) = max(wg(1), wg_min, 0.e0_r_size)
wg(2) = min(wg(2), w2_max, w_max)
wg(2) = max(wg(2), w2_min, 0.e0_r_size)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wg1, beta
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
beta = min(1.e0_r_size, wg1 * r_w_k)
@end parallelRegion
implicit none
w_g_max = w_g_ini * w_g_max_fct
w_g_min = w_g_ini * w_g_min_fct
w_2_max = w_g_ini * w_2_max_fct
w_2_min = w_g_ini * w_2_min_fct
module sf_wet
implicit none
private
public :: sf_soil_matcoef
public :: sf_wet_adjust
public :: sf_wet_wg_beta
public :: sf_wet_maxmin_set
contains
implicit none
if      (wg(0) >= 0.75d0 * w_max) then
c_1 = 0.5d0
else if (wg(0) > 0.15d0 * w_max) then
c_1 = 14.d0 - 22.5d0 * (wg(0) / w_max - 0.15d0)
else
c_1 = 14.d0
end if
rest = - (wg(0) - wg(1)) * r_tau_g
fg = - c_1 * (fqw_surf_ex - prep_rate) / (dns_rain * d_1)
f1 = - (fqw_surf_ex - prep_rate) / (dns_rain * d_2)
tend_wg(0) = rest + fg
tend_wg(1) = f1
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, dns_lowest, dfqb_surf, tg, qsatg, fqw_surf_ex, wg,
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1,
tend_wg_ex0, tend_wg_ex1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (skind /= kind_land) then
soil_coefg_q1 = 0.0_r_size
soil_coefg_t12 = 0.0_r_size
soil_coefg_w12 = 1.0_r_size
soil_coefg_w1 = 0.0_r_size
soil_coef1_q1 = 0.0_r_size
soil_coef1_t12 = 0.0_r_size
soil_coef1_w1 = 1.0_r_size
tend_wg_ex0 = 0.0_r_size
tend_wg_ex1 = 0.0_r_size
else
if      (wg(0) >= 0.75d0 * w_max) then
c_1 = 0.5d0
else if (wg(0) > 0.15d0 * w_max) then
c_1 = 14.d0 - 22.5d0 * (wg(0) / w_max - 0.15d0)
else
c_1 = 14.d0
end if
rest = - (wg(0) - wg(1)) * r_tau_g
fg = - c_1 * (fqw_surf_ex - prep_rate) / (dns_rain * d_1)
f1 = - (fqw_surf_ex - prep_rate) / (dns_rain * d_2)
tend_wg_ex0 = rest + fg
tend_wg_ex1 = f1
dqdt = hlatnt * qsatg / (rv * tg(0) ** 2)
soil_coefg_w12 = 1.0_r_size + r_tau_g * timestep
soil_coefg_w1 = - r_tau_g * timestep
soil_coefg_q1 = c_1 * dns_lowest * dfqb_surf / (dns_rain * d_1) * timestep
soil_coefg_t12 = - c_1 * dns_lowest * dfqb_surf / (dns_rain * d_1) * dqdt * timestep
soil_coef1_q1 = dns_lowest * dfqb_surf / (dns_rain * d_2) * timestep
soil_coef1_t12 = - dns_lowest * dfqb_surf / (dns_rain * d_2) * dqdt * timestep
soil_coef1_w1 = 1.0_r_size
end if
@end parallelRegion
implicit none
wg(1) = min(wg(1), wg_max, w_max)
wg(1) = max(wg(1), wg_min, 0.e0_r_size)
wg(2) = min(wg(2), w2_max, w_max)
wg(2) = max(wg(2), w2_min, 0.e0_r_size)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
wg1, beta
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
beta = min(1.e0_r_size, wg1 * r_w_k)
@end parallelRegion
implicit none
w_g_max = w_g_ini * w_g_max_fct
w_g_min = w_g_ini * w_g_min_fct
w_2_max = w_g_ini * w_2_max_fct
w_2_min = w_g_ini * w_2_min_fct
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=171, combined=165, changed=165, unchanged=0, subroutine_definitions=5, calls=0, imports=11, data_definitions=0, save=0, parameter=10, openmp=0, style=10, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=40, other=87)
========== sf_slab_albedo =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_albedo.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_albedo.f90
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
skind, albedo_land, zmean, tlcvr, avisb, avisd, anirb, anird, avisb_tile, avisd_tile, anirb_tile, anird_tile
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
skind, albedo_land, zmean, tlcvr, avisb, avisd, anirb, anird, avisb_tile, avisd_tile, anirb_tile, anird_tile
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=110, combined=97, changed=6, unchanged=91, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=5)
========== sf_slab_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_const.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=14, combined=14, changed=0, unchanged=14, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_conv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_conv.f90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_conv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=46, combined=41, changed=0, unchanged=41, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_flx =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_flx.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_flx.f90
integer(4), intent(in) :: kind_land, kind_sea, kind_snow, kind_ice
integer(4), intent(in) :: skind
if      (skind == kind_land .or. skind == kind_sea) then
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
else if (skind == kind_snow .or. skind == kind_ice) then
if (tg0 <= tkelvn) then
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) / (tg0 - tetn3i))
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, r_exner_surf, z_f1,
skind, beta, qsatg, solar, tlcvr,
z_0m, z_0h, z_0q, r_mol, u_f,
taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, r_mol_surf, u_f_surf,
taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile
@end domainDependant
@domainDependant{attribute(present), domName(it1,it2,i,j), domSize(0:ngm,ntlm,0:nx+1,0:ny+1)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
u_10_tile, v_10_tile, t_sfc_tile, ttd_sfc_tile, rh_sfc_tile, qv_sfc_tile,
qsatg, beta, tlcvr,
skind, tg,
u1, v1, pt1, qv1, p_surf, r_exner_surf, z_f1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(0:nx+1, 0:ny+1)}
r_mol,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
z_0m, z_0h, z_0q
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
logical, intent(in) :: sw_dzero_shift
logical, intent(in) :: sw_dzero_shift
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf,
z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
logical, intent(in) :: sw_dzero_shift
@domainDependant{}
u1, v1, pt1, qv1, tg0, qsatg, beta, r_exner_surf, z_f1, z_0m, ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b, z_a_m
@end domainDependant
@domainDependant{attribute(autoDom, present)}
z_a_m, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0
@end domainDependant
@domainDependant{attribute(autoDom, present)}
z_a_m, r_mol, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
@domainDependant{attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q
@end domainDependant
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
integer(4), intent(in) :: kind_land, kind_sea, kind_snow, kind_ice
integer(4), intent(in) :: skind
if      (skind == kind_land .or. skind == kind_sea) then
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
else if (skind == kind_snow .or. skind == kind_ice) then
if (tg0 <= tkelvn) then
e_sat = e0ci * exp(tetn1i * (tg0 - tetn2i) / (tg0 - tetn3i))
e_sat = e0cw * exp(tetn1w * (tg0 - tetn2w) / (tg0 - tetn3w))
qsatg = epsilon * e_sat / (p_surf - one_minus_epsilon * e_sat)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
u1, v1, pt1, qv1, r_exner_surf, z_f1,
skind, beta, qsatg, solar, tlcvr,
z_0m, z_0h, z_0q, r_mol, u_f,
taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, r_mol_surf, u_f_surf,
taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile
@end domainDependant
@domainDependant{attribute(present), domName(it1,it2,i,j), domSize(0:ngm,ntlm,0:nx+1,0:ny+1)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(nx,ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
u_10_tile, v_10_tile, t_sfc_tile, ttd_sfc_tile, rh_sfc_tile, qv_sfc_tile,
qsatg, beta, tlcvr,
skind, tg,
u1, v1, pt1, qv1, p_surf, r_exner_surf, z_f1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(0:nx+1, 0:ny+1)}
r_mol,
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
z_0m, z_0h, z_0q
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
logical, intent(in) :: sw_dzero_shift
logical, intent(in) :: sw_dzero_shift
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf,
z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
logical, intent(in) :: sw_dzero_shift
@domainDependant{}
u1, v1, pt1, qv1, tg0, qsatg, beta, r_exner_surf, z_f1, z_0m, ptgrd, qvgrd, v_abs_a, pt_v, ptgrd_v, ri_b, z_a_m
@end domainDependant
@domainDependant{attribute(autoDom, present)}
z_a_m, z_0m, z_0h, z_0q, psi_m0, psi_h0, psi_q0
@end domainDependant
@domainDependant{attribute(autoDom, present)}
z_a_m, r_mol, psi_m0, psi_h0, psi_q0, z_0m, z_0h, z_0q, psi_m, psi_h, psi_q, dpsi_m, dpsi_h, dpsi_q
@end domainDependant
@domainDependant{attribute(autoDom, present)}
psi_m, psi_h, psi_q, c_m, c_h, c_q
@end domainDependant
logical, intent(in)      :: sw_dzero_shift
@domainDependant{attribute(autoDom, present)}
u1, v1, pt1, qv1, tg0, qsatg, beta, p_surf, r_exner_surf, z_f1, z_0m, z_0h, z_0q, r_mol, u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=2094, combined=1606, changed=159, unchanged=1447, subroutine_definitions=11, calls=51, imports=11, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=0, radiation=0, storage_order=0, data_spec=17, other=64)
========== sf_slab_grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_grid.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_grid.f90
@domainDependant{attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p, z_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(1,1)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
z_f, rdz_f, rdz_h, f2h_m, f2h_p, z_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i,j), domSize(1,1)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=44, combined=44, changed=6, unchanged=38, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=5)
========== sf_slab_option =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_option.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_option.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=22, combined=22, changed=0, unchanged=22, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_option_symbol =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_option_symbol.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_option_symbol.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=9, combined=9, changed=0, unchanged=9, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_parm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_parm.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=49, combined=46, changed=0, unchanged=46, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_phys_const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_phys_const.f90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_phys_const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=14, combined=14, changed=0, unchanged=14, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_qsatg =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_qsatg.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_qsatg.f90
public :: sf_slab_qsatg_tile_run_3D
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
p_surf, tg, skind, tlcvr, qsatg
@end domainDependant
@domainDependant{attribute(present), domName(it1,it2,i,j), domSize(0:ngm,ntlm,0:nx+1,0:ny+1)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
p_surf, tg, skind, tlcvr, qsatg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
integer(4), intent(in) :: kind_land, kind_sea, kind_snow, kind_ice
@domainDependant{attribute(autoDom, present)}
skind, p_surf, tg0, qsatg
@end domainDependant
public :: sf_slab_qsatg_tile_run_3D
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
p_surf, tg, skind, tlcvr, qsatg
@end domainDependant
@domainDependant{attribute(present), domName(it1,it2,i,j), domSize(0:ngm,ntlm,0:nx+1,0:ny+1)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
p_surf, tg, skind, tlcvr, qsatg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
integer(4), intent(in) :: kind_land, kind_sea, kind_snow, kind_ice
@domainDependant{attribute(autoDom, present)}
skind, p_surf, tg0, qsatg
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=353, combined=286, changed=30, unchanged=256, subroutine_definitions=2, calls=4, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=1, other=18)
========== sf_slab_skind =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_skind.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_skind.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=7, combined=7, changed=0, unchanged=7, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_stile =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_stile.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_stile.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=20, changed=0, unchanged=20, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_tgf_adj =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_tgf_adj.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_tgf_adj.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=12, combined=12, changed=0, unchanged=12, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== sf_slab_tgf_tend_solve =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_tgf_tend_solve.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_tgf_tend_solve.f90
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2h_m, f2h_p, z_g
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, fktg_surf, fktg, tg, aag, bbg, ccg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
end if
if (lt /= tile_land .and. skind(lt) == kind_sea) then
end if
ppg(kz) = aag(kz) * tg(kz - 1, lt) + bbg(kz) * tg(kz, lt) + ccg(kz) * tg(kz + 1, lt)
ppg(kz) = aag(kz) * tg(kz - 1, lt) + bbg(kz) * tg(kz, lt) + ccg(kz) * tg(kz + 1, lt)
@end parallelRegion
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, aag, ccg, bbg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
end if
if (lt /= tile_land .and. skind(lt) == kind_sea) then
end if
@end parallelRegion
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_tg0, aag, bbg, ppg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size .or. (lt /= tile_land .and. skind(lt) /= kind_ice)) then
do kz = 0, ngm
tend_tg(kz, lt) = 0.0_r_size
end if
tend_tg(0, lt) = tend_tg0
tend_tg(kz, lt) = (ppg(kz) - aag(kz) * tend_tg(kz - 1, lt)) / bbg(kz)
tend_tg(ngm, lt) = 0.0_r_size
@end parallelRegion
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{attribute(autoDom, present)}
rdzg_f, rdzg_h, f2h_m, f2h_p, z_g
@end domainDependant
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, fktg_surf, fktg, tg, aag, bbg, ccg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
end if
if (lt /= tile_land .and. skind(lt) == kind_sea) then
end if
ppg(kz) = aag(kz) * tg(kz - 1, lt) + bbg(kz) * tg(kz, lt) + ccg(kz) * tg(kz + 1, lt)
ppg(kz) = aag(kz) * tg(kz - 1, lt) + bbg(kz) * tg(kz, lt) + ccg(kz) * tg(kz + 1, lt)
@end parallelRegion
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, aag, ccg, bbg, ppg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
end if
if (lt /= tile_land .and. skind(lt) == kind_sea) then
end if
@end parallelRegion
integer(4),   intent(in) :: lt
integer(4),   intent(in) :: skind(ntlm)
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_tg0, aag, bbg, ppg
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT4_EXPAND_RIGHTHAND), domPP(DOM4_EXPAND_RIGHTHAND)}
tend_tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size .or. (lt /= tile_land .and. skind(lt) /= kind_ice)) then
do kz = 0, ngm
tend_tg(kz, lt) = 0.0_r_size
end if
tend_tg(0, lt) = tend_tg0
tend_tg(kz, lt) = (ppg(kz) - aag(kz) * tend_tg(kz - 1, lt)) / bbg(kz)
tend_tg(ngm, lt) = 0.0_r_size
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=147, combined=143, changed=61, unchanged=82, subroutine_definitions=3, calls=0, imports=9, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=5, other=44)
========== sf_slab_wet =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/sf_slab/sf_slab_wet.h90, hfpath: branches/reference/asuca-kij/Src/Physics/sf_slab/sf_slab_wet.f90
public :: sf_slab_wet_beta_tile_run_3D
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, fsand, fclay, dns_lowest, dfqb_surf, tg0, qsatg, fqw_surf_ex, prep_rate,
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1, tend_wg_ex0, tend_wg_ex1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
if (sw_tend_wg /= tend_wg_noilhan1996) then
stop 2
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (skind(lt) /= kind_land) then
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_qv1, tend_tg0, soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1,
tend_wg_ex0, tend_wg_ex1, tend_wg0, tend_wg1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
tend_wg0 = 0.0_r_size
tend_wg1 = 0.0_r_size
if (skind(lt) /= kind_sea) then
@end parallelRegion
integer(4), intent(in) :: sw_tend_wg, tend_wg_deardorff1978, tend_wg_noilhan1996
if (sw_tend_wg .eq. tend_wg_deardorff1978) then
else if (sw_tend_wg .eq. tend_wg_noilhan1996) then
wg_sat = -1.08e-3_r_size * psand + 494.305e-3_r_size
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
fsand, fclay, wg0, skind, tlcvr, beta
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
fsand, fclay, wg0, skind, tlcvr, beta
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
integer(4), intent(in) :: sw_beta, beta_nhm, beta_deardorff1978, beta_noilhan1989, beta_lee1992
@domainDependant{attribute(autoDom, present)}
fsand, fclay, wg0, beta
@end domainDependant
wg_fc = 89.0467e-3_r_size * pclay ** 0.3496_r_size
wg_fc = 0.0_r_size
if (sw_beta .eq. beta_nhm) then
else if (sw_beta .eq. beta_deardorff1978) then
else if (sw_beta .eq. beta_noilhan1989) then
else if (sw_beta .eq. beta_lee1992) then
integer(4), intent(in) :: sw_tend_wg, tend_wg_deardorff1978, tend_wg_noilhan1996
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fsand, fclay, tg0, c_1, c_2, wg_eq, dweq_dw2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
wg_sat = -1.08e-3_r_size * psand + 494.305e-3_r_size
wg_wilt = 37.1342e-3_r_size * sqrt(pclay)
bee = 0.137_r_size * pclay + 3.501_r_size
c_1_sat = 5.58e-3_r_size * pclay + 84.88e-3_r_size
c_2_ref = 13.815_r_size * pclay ** (-0.954_r_size)
c_2_ref = 0.0_r_size
coef_a = 732.42e-3_r_size * pclay ** (-0.539_r_size)
coef_a = 0.0_r_size
coef_p = 0.134_r_size * pclay + 3.4_r_size
@domainDependant{}
@end domainDependant
public :: sf_slab_wet_beta_tile_run_3D
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, fsand, fclay, dns_lowest, dfqb_surf, tg0, qsatg, fqw_surf_ex, prep_rate,
soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1, tend_wg_ex0, tend_wg_ex1
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
if (sw_tend_wg /= tend_wg_noilhan1996) then
stop 2
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
if (skind(lt) /= kind_land) then
@end parallelRegion
integer(4),   intent(in) :: lt
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
skind, tlcvr, tend_qv1, tend_tg0, soil_coefg_q1, soil_coefg_t12, soil_coefg_w12, soil_coefg_w1, soil_coef1_q1, soil_coef1_t12, soil_coef1_w1,
tend_wg_ex0, tend_wg_ex1, tend_wg0, tend_wg1
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (tlcvr(lt) <= 0.0_r_size) then
tend_wg0 = 0.0_r_size
tend_wg1 = 0.0_r_size
if (skind(lt) /= kind_sea) then
@end parallelRegion
integer(4), intent(in) :: sw_tend_wg, tend_wg_deardorff1978, tend_wg_noilhan1996
if (sw_tend_wg .eq. tend_wg_deardorff1978) then
else if (sw_tend_wg .eq. tend_wg_noilhan1996) then
wg_sat = -1.08e-3_r_size * psand + 494.305e-3_r_size
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
fsand, fclay, wg0, skind, tlcvr, beta
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
fsand, fclay, wg0, skind, tlcvr, beta
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
integer(4), intent(in) :: sw_beta, beta_nhm, beta_deardorff1978, beta_noilhan1989, beta_lee1992
@domainDependant{attribute(autoDom, present)}
fsand, fclay, wg0, beta
@end domainDependant
wg_fc = 89.0467e-3_r_size * pclay ** 0.3496_r_size
wg_fc = 0.0_r_size
if (sw_beta .eq. beta_nhm) then
else if (sw_beta .eq. beta_deardorff1978) then
else if (sw_beta .eq. beta_noilhan1989) then
else if (sw_beta .eq. beta_lee1992) then
integer(4), intent(in) :: sw_tend_wg, tend_wg_deardorff1978, tend_wg_noilhan1996
@domainDependant{domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fsand, fclay, tg0, c_1, c_2, wg_eq, dweq_dw2
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny), accPP(AT_EXPAND_RIGHTHAND), domPP(DOM_EXPAND_RIGHTHAND)}
wg
@end domainDependant
wg_sat = -1.08e-3_r_size * psand + 494.305e-3_r_size
wg_wilt = 37.1342e-3_r_size * sqrt(pclay)
bee = 0.137_r_size * pclay + 3.501_r_size
c_1_sat = 5.58e-3_r_size * pclay + 84.88e-3_r_size
c_2_ref = 13.815_r_size * pclay ** (-0.954_r_size)
c_2_ref = 0.0_r_size
coef_a = 732.42e-3_r_size * pclay ** (-0.539_r_size)
coef_a = 0.0_r_size
coef_p = 0.134_r_size * pclay + 3.4_r_size
@domainDependant{}
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=563, combined=516, changed=92, unchanged=424, subroutine_definitions=7, calls=3, imports=7, data_definitions=0, save=0, parameter=0, openmp=0, style=2, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=3, other=68)
========== pp_test_comm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/tests/comm/pp_test_comm.H90, hfpath: None
module pp_test_comm
implicit none
interface geo_forcing
module procedure geo_forcing_uvg0d
module procedure geo_forcing_uvg1d
end interface
contains
implicit none
integer(4), intent(in) :: nz
integer(4) :: kk
gvcp = grav / cp
cpdvrd = cp / rd
pai = (p_surf / pref) ** rdvcp
kk = 1
ptv = pt(kk) * (1.0e0_r_size + c_virtual * qv(kk))
pai = pai - gvcp / ptv * (z_f(kk) - 0.0_r_size)
p_out(kk) = pref * pai ** cpdvrd
do kk = 2, nz
ptvm = pt(kk - 1) * (1.0e0_r_size + c_virtual * qv(kk - 1))
ptvp = pt(kk) * (1.0e0_r_size + c_virtual * qv(kk))
ptv = 0.5d0 * (ptvm + ptvp)
pai = pai - gvcp / ptv * (z_f(kk) - z_f(kk - 1))
p_out(kk) = pref * pai ** cpdvrd
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kk
kk = 1
tv = temp(kk) * (1.0e0_r_size + c_virtual * qv(kk))
p_out(kk) = p_surf * exp(- grav / (rd * tv) * (z_f(kk) - 0.0_r_size))
do kk = 2, nz
tvm = temp(kk - 1) * (1.0e0_r_size + c_virtual * qv(kk - 1))
tvp = temp(kk) * (1.0e0_r_size + c_virtual * qv(kk))
tv = 0.5d0 * (tvm + tvp)
p_out(kk) = p_out(kk - 1) * exp(- grav / (rd * tv) * (z_f(kk) - z_f(kk - 1)))
end do
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ug, vg, ug_1d, vg_1d
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz
ug_1d(kz) = ug
vg_1d(kz) = vg
end do
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lat, ug, vg, u, v, tend_u, tend_v
ug_1d, vg_1d
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz, timestep
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
pi180
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lat, ug, vg, u, v, tend_u, tend_v
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz
ff = 2.0e0_r_size * omg * sin(lat * pi180)
ffdt = ff * timestep
r_den = 1.0_r_size / (1.0_r_size + (ffdt) ** 2)
dudt_n = ff * (v(kz) -vg(kz))
dvdt_n = - ff * (u(kz) - ug(kz))
tend_u(kz) = (dudt_n + ffdt * dvdt_n) * r_den
tend_v(kz) = (ffdt * dudt_n + dvdt_n) * r_den
end do
@end parallelRegion
#define SOLVE_TRIDIAG_IMP(nz, acoef, ccoef, bcoef, pp) `\
do kz = nz - 1, 1, -1 `\
bcoef(kz) = bcoef(kz) * bcoef(kz + 1) - acoef(kz + 1) * ccoef(kz) `\
pp(kz) = pp(kz) * bcoef(kz + 1) - pp(kz + 1) * ccoef(kz) `\
end do `\
`\
pp(1) = pp(1) / bcoef(1) `\
`\
do kz = 2, nz `\
pp(kz) = (pp(kz) - acoef(kz) * pp(kz - 1)) / bcoef(kz) `\
end do
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz, timestep
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fld, ww, z_f, tend_adv
acoef, bcoef, ccoef, rdz_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz - 1
rdz_h(kz) = 1.0_r_size / (z_f(kz + 1) - z_f(kz))
end do
kz = 1
acoef(kz) = 0.0_r_size
bcoef(kz) = ww(kz) * rdz_h(kz)
ccoef(kz) = -ww(kz) * rdz_h(kz)
do kz = 2, nz - 1
acoef(kz) = max(ww(kz), 0.0_r_size) * rdz_h(kz - 1)
ccoef(kz) = - min(ww(kz), 0.0_r_size) * rdz_h(kz)
bcoef(kz) = -acoef(kz) - ccoef(kz)
end do
kz = nz
acoef(kz) = ww(kz) * rdz_h(kz - 1)
bcoef(kz) = -ww(kz) * rdz_h(kz - 1)
ccoef(kz) = 0.0_r_size
kz = 1
tend_adv(kz) = bcoef(kz) * fld(kz) + ccoef(kz) * fld(kz + 1)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
do kz = 2 ,nz - 1
tend_adv(kz) = acoef(kz) * fld(kz - 1) + bcoef(kz) * fld(kz) + ccoef(kz) * fld(kz + 1)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
end do
kz = nz
tend_adv(kz) = acoef(kz) * fld(kz - 1) + bcoef(kz) * fld(kz)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
SOLVE_TRIDIAG_IMP(nz, acoef, ccoef, bcoef, tend_adv)
@end parallelRegion
implicit none
integer(4), intent(in) :: nz
integer(4), intent(in) :: nt
integer(4) :: kz
integer(4) :: it
integer(4) :: itp
rdt = 1.0_r_size / dt
it = int(totalsec * rdt + 0.001_r_size) + 1
itp = min(it + 1, nt)
xx = totalsec - real(it, r_size) * dt
do kz = 1, nz
slp = (val_ary(itp, kz) - val_ary(it, kz)) * rdt
vals(kz) = val_ary(it, kz) + slp * rdt * xx
end do
implicit none
integer(4), intent(in) :: n_in, kst, ken
integer(4) :: kk, nn
do kk = kst, ken
if (z_theta(kk) >= z_in(n_in)) then
outdata(kk) = indata(n_in)
else if (z_theta(kk) < z_in(1)) then
outdata(kk) = indata(1)
else
do nn = 1, n_in - 1
if (z_in(nn) <= z_theta(kk) .and. z_theta(kk) < z_in(nn +1)) then
r_zdif = 1.0 / (z_in(nn + 1) - z_in(nn)) * (z_theta(kk) - z_in(nn))
outdata(kk) = indata(nn) + (indata(nn + 1) - indata(nn)) * r_zdif
exit
end if
end do
end if
end do
implicit none
integer(4), intent(in) :: nz
character(*), intent(in) :: fname
integer(4) :: mt_z_f
integer(4) :: nz_in
integer(4) :: kz
open(mt_z_f, file = fname)
read(mt_z_f, *) nz_in
if (nz_in /= nz) then
stop 99
end if
do kz = 1, nz_in
read(mt_z_f, *) z_f(kz)
end do
close(mt_z_f)
implicit none
integer(4), intent(in) ::nz
character(*), intent(in) :: fname
integer(4) :: mt_ozon
integer(4) :: nz_in
integer(4) :: kz
open(mt_ozon, file = 'ozon.txt')
read(mt_ozon, *) nz_in
do kz = 1, nz_in
read(mt_ozon, *) z_f_ozon_in(kz), ozon_in(kz)
end do
close(mt_ozon)
implicit none
integer(4), intent(out) :: mt
logical :: flag_exist, flag_opened
mt = 99
do
inquire(unit = mt, exist = flag_exist, opened = flag_opened)
if (flag_exist .and. (.not. flag_opened)) then
exit
end if
mt = mt - 1
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kz
integer(4) :: it
r_pref = 1.0_r_size / pref
do kz = 1, nz
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
exner(1) = (pres(kz) * r_pref) ** rdvcp
if (qw(kz) > 0.0_r_size .and. ql(kz) > 0.0_r_size) then
ql_save = ql(kz)
th(kz) = thl(kz) + hlatnt / (cp * exner(1)) * ql(kz)
if (abs(ql_save - ql(kz)) < 1.0e-15) exit
end do
if (ql(kz) > 0.0_r_size) then
th(kz) = thl(kz) + hlatnt / (cp * exner(1)) * ql(kz)
qv(kz) = qw(kz) - ql(kz)
else
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
end if
else
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
end if
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kz
a1 = tetn1w
b1 = tetn2w
c1 = tetn3w
gg = hlatnt * r_cp
do kz = 1, nz
tempk = pt(kz) * pi_loc(kz)
qvsw = e0cw * exp( tetn1w * (tempk - tetn2w) / (tempk - tetn3w))
qvsw = epsilon * qvsw / (prs_loc(kz) - one_minus_epsilon * qvsw)
aa = a1 * qvsw * (b1 - c1) / (tempk - c1) ** 2 * gg
bb = 0.5 * a1 * qvsw * (b1 - c1) / (tempk - c1) ** 3 * gg ** 2 * (a1 * (b1 - c1) / (tempk -c1) - 2.0)
q_cnd(kz) = -( qvsw - qw(kz) ) / (1.0_r_size + aa - bb * ( qvsw - qw(kz) ) / (1.0_r_size + aa))
end do
module pp_test_comm
implicit none
interface geo_forcing
module procedure geo_forcing_uvg0d
module procedure geo_forcing_uvg1d
end interface
contains
implicit none
integer(4), intent(in) :: nz
integer(4) :: kk
gvcp = grav / cp
cpdvrd = cp / rd
pai = (p_surf / pref) ** rdvcp
kk = 1
ptv = pt(kk) * (1.0e0_r_size + c_virtual * qv(kk))
pai = pai - gvcp / ptv * (z_f(kk) - 0.0_r_size)
p_out(kk) = pref * pai ** cpdvrd
do kk = 2, nz
ptvm = pt(kk - 1) * (1.0e0_r_size + c_virtual * qv(kk - 1))
ptvp = pt(kk) * (1.0e0_r_size + c_virtual * qv(kk))
ptv = 0.5d0 * (ptvm + ptvp)
pai = pai - gvcp / ptv * (z_f(kk) - z_f(kk - 1))
p_out(kk) = pref * pai ** cpdvrd
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kk
kk = 1
tv = temp(kk) * (1.0e0_r_size + c_virtual * qv(kk))
p_out(kk) = p_surf * exp(- grav / (rd * tv) * (z_f(kk) - 0.0_r_size))
do kk = 2, nz
tvm = temp(kk - 1) * (1.0e0_r_size + c_virtual * qv(kk - 1))
tvp = temp(kk) * (1.0e0_r_size + c_virtual * qv(kk))
tv = 0.5d0 * (tvm + tvp)
p_out(kk) = p_out(kk - 1) * exp(- grav / (rd * tv) * (z_f(kk) - z_f(kk - 1)))
end do
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
ug, vg, ug_1d, vg_1d
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz
ug_1d(kz) = ug
vg_1d(kz) = vg
end do
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lat, ug, vg, u, v, tend_u, tend_v
ug_1d, vg_1d
@end domainDependant
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz, timestep
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
pi180
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
lat, ug, vg, u, v, tend_u, tend_v
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz
ff = 2.0e0_r_size * omg * sin(lat * pi180)
ffdt = ff * timestep
r_den = 1.0_r_size / (1.0_r_size + (ffdt) ** 2)
dudt_n = ff * (v(kz) -vg(kz))
dvdt_n = - ff * (u(kz) - ug(kz))
tend_u(kz) = (dudt_n + ffdt * dvdt_n) * r_den
tend_v(kz) = (ffdt * dudt_n + dvdt_n) * r_den
end do
@end parallelRegion
#define SOLVE_TRIDIAG_IMP(nz, acoef, ccoef, bcoef, pp) `\
do kz = nz - 1, 1, -1 `\
bcoef(kz) = bcoef(kz) * bcoef(kz + 1) - acoef(kz + 1) * ccoef(kz) `\
pp(kz) = pp(kz) * bcoef(kz + 1) - pp(kz + 1) * ccoef(kz) `\
end do `\
`\
pp(1) = pp(1) / bcoef(1) `\
`\
do kz = 2, nz `\
pp(kz) = (pp(kz) - acoef(kz) * pp(kz - 1)) / bcoef(kz) `\
end do
implicit none
integer(4), intent(in) :: nx, ny, nz
integer(4) :: kz
@domainDependant{}
nx, ny, nz, timestep
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
fld, ww, z_f, tend_adv
acoef, bcoef, ccoef, rdz_h
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, nz - 1
rdz_h(kz) = 1.0_r_size / (z_f(kz + 1) - z_f(kz))
end do
kz = 1
acoef(kz) = 0.0_r_size
bcoef(kz) = ww(kz) * rdz_h(kz)
ccoef(kz) = -ww(kz) * rdz_h(kz)
do kz = 2, nz - 1
acoef(kz) = max(ww(kz), 0.0_r_size) * rdz_h(kz - 1)
ccoef(kz) = - min(ww(kz), 0.0_r_size) * rdz_h(kz)
bcoef(kz) = -acoef(kz) - ccoef(kz)
end do
kz = nz
acoef(kz) = ww(kz) * rdz_h(kz - 1)
bcoef(kz) = -ww(kz) * rdz_h(kz - 1)
ccoef(kz) = 0.0_r_size
kz = 1
tend_adv(kz) = bcoef(kz) * fld(kz) + ccoef(kz) * fld(kz + 1)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
do kz = 2 ,nz - 1
tend_adv(kz) = acoef(kz) * fld(kz - 1) + bcoef(kz) * fld(kz) + ccoef(kz) * fld(kz + 1)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
end do
kz = nz
tend_adv(kz) = acoef(kz) * fld(kz - 1) + bcoef(kz) * fld(kz)
acoef(kz) = - acoef(kz) * timestep
ccoef(kz) = - ccoef(kz) * timestep
bcoef(kz) = 1.0_r_size - bcoef(kz) * timestep
SOLVE_TRIDIAG_IMP(nz, acoef, ccoef, bcoef, tend_adv)
@end parallelRegion
implicit none
integer(4), intent(in) :: nz
integer(4), intent(in) :: nt
integer(4) :: kz
integer(4) :: it
integer(4) :: itp
rdt = 1.0_r_size / dt
it = int(totalsec * rdt + 0.001_r_size) + 1
itp = min(it + 1, nt)
xx = totalsec - real(it, r_size) * dt
do kz = 1, nz
slp = (val_ary(itp, kz) - val_ary(it, kz)) * rdt
vals(kz) = val_ary(it, kz) + slp * rdt * xx
end do
implicit none
integer(4), intent(in) :: n_in, kst, ken
integer(4) :: kk, nn
do kk = kst, ken
if (z_theta(kk) >= z_in(n_in)) then
outdata(kk) = indata(n_in)
else if (z_theta(kk) < z_in(1)) then
outdata(kk) = indata(1)
else
do nn = 1, n_in - 1
if (z_in(nn) <= z_theta(kk) .and. z_theta(kk) < z_in(nn +1)) then
r_zdif = 1.0 / (z_in(nn + 1) - z_in(nn)) * (z_theta(kk) - z_in(nn))
outdata(kk) = indata(nn) + (indata(nn + 1) - indata(nn)) * r_zdif
exit
end if
end do
end if
end do
implicit none
integer(4), intent(in) :: nz
character(*), intent(in) :: fname
integer(4) :: mt_z_f
integer(4) :: nz_in
integer(4) :: kz
open(mt_z_f, file = fname)
read(mt_z_f, *) nz_in
if (nz_in /= nz) then
stop 99
end if
do kz = 1, nz_in
read(mt_z_f, *) z_f(kz)
end do
close(mt_z_f)
implicit none
integer(4), intent(in) ::nz
character(*), intent(in) :: fname
integer(4) :: mt_ozon
integer(4) :: nz_in
integer(4) :: kz
open(mt_ozon, file = 'ozon.txt')
read(mt_ozon, *) nz_in
do kz = 1, nz_in
read(mt_ozon, *) z_f_ozon_in(kz), ozon_in(kz)
end do
close(mt_ozon)
implicit none
integer(4), intent(out) :: mt
logical :: flag_exist, flag_opened
mt = 99
do
inquire(unit = mt, exist = flag_exist, opened = flag_opened)
if (flag_exist .and. (.not. flag_opened)) then
exit
end if
mt = mt - 1
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kz
integer(4) :: it
r_pref = 1.0_r_size / pref
do kz = 1, nz
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
exner(1) = (pres(kz) * r_pref) ** rdvcp
if (qw(kz) > 0.0_r_size .and. ql(kz) > 0.0_r_size) then
ql_save = ql(kz)
th(kz) = thl(kz) + hlatnt / (cp * exner(1)) * ql(kz)
if (abs(ql_save - ql(kz)) < 1.0e-15) exit
end do
if (ql(kz) > 0.0_r_size) then
th(kz) = thl(kz) + hlatnt / (cp * exner(1)) * ql(kz)
qv(kz) = qw(kz) - ql(kz)
else
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
end if
else
ql(kz) = 0.0_r_size
th(kz) = thl(kz)
qv(kz) = qw(kz)
end if
end do
implicit none
integer(4), intent(in) :: nz
integer(4) :: kz
a1 = tetn1w
b1 = tetn2w
c1 = tetn3w
gg = hlatnt * r_cp
do kz = 1, nz
tempk = pt(kz) * pi_loc(kz)
qvsw = e0cw * exp( tetn1w * (tempk - tetn2w) / (tempk - tetn3w))
qvsw = epsilon * qvsw / (prs_loc(kz) - one_minus_epsilon * qvsw)
aa = a1 * qvsw * (b1 - c1) / (tempk - c1) ** 2 * gg
bb = 0.5 * a1 * qvsw * (b1 - c1) / (tempk - c1) ** 3 * gg ** 2 * (a1 * (b1 - c1) / (tempk -c1) - 2.0)
q_cnd(kz) = -( qvsw - qw(kz) ) / (1.0_r_size + aa - bb * ( qvsw - qw(kz) ) / (1.0_r_size + aa))
end do
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=429, combined=418, changed=418, unchanged=0, subroutine_definitions=13, calls=8, imports=17, data_definitions=0, save=0, parameter=2, openmp=0, style=22, parallel_loops=1, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=102, other=251)
========== gabls3 =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/tests/gabls3/gabls3.h90, hfpath: None
module gabls3_test
contains
implicit none
integer(4), intent(in) :: nx, ny, skind0, itend, levflag
integer(4) :: i, j
integer(4) :: kz
integer(4), allocatable :: skind(:, :)
integer(4) :: ntime
@domainDependant{attribute(host, autoDom)}
ozon, fktg, roctg, z_f, z_g, u, v, pt, qv, qc, qci, qke, tsq, qsq, cov, tg, wg,
coefc, ttrans, rlong, rshrt, rlongn, rshrtn, press, exner, ozon, fktg, roctg,
z_f, z_g, u, v, pt, qv, qc, qci, qke, tsq, qsq, cov
@end domainDependant
do kz = 1, pbl_nz - 1
z_h(kz) = (z_f(1, 1, kz + 1) + z_f(1, 1, kz)) * 0.5_r_size
end do
skind(1, 1) = skind0
clat(1, 1) = clat0
clon(1, 1) = clon0
amask(1, 1) = 1.0_r_size
aod(1, 1) = 0.0_r_size
albed(1, 1) = albed0
z_0m(1, 1) = z_0m0
z_0h(1, 1) = z_0h0
z_0q(1, 1) = z_0h0
fktg_surf(1, 1) = fktg0
roctg_surf(1, 1) = roctg0
do kz = 1, ngm
fktg(1, 1, kz) = fktg0
roctg(1, 1, kz) = roctg0
end do
ntime = nint(itend * timestep / dt_str)
p_surf(1, 1) = p_surf0
tg(1, 1, 0) = 302.0_r_size
do kz = 1, nz
qc(1, 1, kz) = 0.0_r_size
qci(1, 1, kz) = 0.0_r_size
exner(1, 1, kz) = (press(1, 1, kz) / pref) ** rdvcp
end do
r_exner_surf = (pref / p_surf(1, 1)) ** rdvcp
beta = min(1.0_r_size, cp * (pt(1, 1, 1) - tg(1, 1, 0) * r_exner_surf) / (hlatnt * (qv(1, 1, 1) - qsatg) * bowen_ratio0))
beta = beta * 4.0
do kz = 0, 1
wg(1, 1, kz) = beta * 0.3_r_size
end do
if (tke_init == 1) then
qke(1, 1, pbl_nz+1:nz) = 0.0
tsq(1, 1, pbl_nz+1:nz) = 0.0
qsq(1, 1, pbl_nz+1:nz) = 0.0
cov(1, 1, pbl_nz+1:nz) = 0.0
else
qke(1, 1, 1:nz) = 0.0
tsq(1, 1, 1:nz) = 0.0
qsq(1, 1, 1:nz) = 0.0
cov(1, 1, 1:nz) = 0.0
end if
if (i /= 1 .OR. j /= 1) then
p_surf(i,j) = p_surf(1, 1)
l_mo_inv(i,j) = l_mo_inv(1, 1)
uf(i,j) = uf(1, 1)
skind(i,j) = skind(1, 1)
clat(i,j) = clat(1, 1)
clon(i,j) = clon(1, 1)
amask(i,j) = amask(1, 1)
aod(i,j) = aod(1, 1)
fktg_surf(i,j) = fktg_surf(1, 1)
roctg_surf(i,j) = roctg_surf(1, 1)
z_0m(i,j) = z_0m(1, 1)
z_0h(i,j) = z_0h(1, 1)
z_0q(i,j) = z_0q(1, 1)
albed(i,j) = albed(1, 1)
do kz = 1, nz
z_f(i, j, kz) = z_f(1, 1, kz)
u(i, j, kz) = u(1, 1, kz)
v(i, j, kz) = v(1, 1, kz)
pt(i, j, kz) = pt(1, 1, kz)
qv(i, j, kz) = qv(1, 1, kz)
qc(i, j, kz) = qc(1, 1, kz)
qci(i, j, kz) = qci(1, 1, kz)
ozon(i, j, kz) = ozon(1, 1, kz)
qke(i, j, kz) = qke(1, 1, kz)
tsq(i, j, kz) = tsq(1, 1, kz)
qsq(i, j, kz) = qsq(1, 1, kz)
cov(i, j, kz) = cov(1, 1, kz)
press(i, j, kz) = press(1, 1, kz)
exner(i, j, kz) = exner(1, 1, kz)
end do
do kz = 1, ngm
z_g(i, j, kz) = z_g(1, 1, kz)
end do
do kz = 0, ngm
tg(i, j, kz) = tg(1, 1, kz)
end do
do kz = 1, ngm
fktg(i, j, kz) = fktg(1, 1, kz)
roctg(i, j, kz) = roctg(1, 1, kz)
end do
do kz = 0, 1
wg(i, j, kz) = wg(1, 1, kz)
end do
end if
end do
end do
implicit none
integer(4), intent(in) :: nx, ny, nz, itend
integer(4), intent(in) :: skind
integer(4) :: it
@domainDependant {attribute(autoDom)}
z_h
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, transferHere)}
press, exner
skind,
ozon,
z_f, z_g, z_0m, z_0h, z_0q,
p_surf, clat, clon, amask, aod,
fktg_surf, roctg_surf, albed,
fktg, roctg,
qc, qci,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, coefc, ttrans
l_mo_inv, uf,
u, v, pt, qv, qke, tsq, qsq, cov, tg, wg
rlong, rshrt, rlongn, rshrtn,
rh_sfc, qv_sfc
@end domainDependant
end do
implicit none
integer(4), intent(in) :: nx, ny, nz_in, it
integer(4), intent(in) :: skind
integer(4) :: kz
integer(4) :: ishrt
integer(4) :: ilong
integer(4) :: month
@domainDependant {attribute(autoDom)}
z_h
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
press, exner
skind,
ozon,
z_f, z_g, z_0m, z_0h, z_0q,
p_surf, clat, clon, amask, aod,
fktg_surf, roctg_surf, albed,
fktg, roctg,
qc, qci,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, coefc, ttrans
l_mo_inv, uf,
u, v, pt, qv, qke, tsq, qsq, cov, tg, wg
rlong, rshrt, rlongn, rshrtn,
rh_sfc, qv_sfc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
gpf, gph, gdp, gtmp,
cvrr, cwcr, cicr, tlev_out
ztemp, solar, dfm_surf, dfh_surf, dfq_surf,
taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, taux_surf_im,
tauy_surf_im, ftl_surf_im, fqw_surf_im, prep_rate, dns_surf,
avisb, avisd, anirb, anird,
tend_u_pbl, tend_v_pbl, tend_pt_pbl, tend_qv_pbl, tend_qke_mym, tend_tsq_mym,
tend_qsq_mym, tend_cov_mym, tend_u_vadv, tend_v_vadv, tend_pt_vadv, tend_qv_vadv,
tend_qke_vadv, tend_tsq_vadv, tend_qsq_vadv, tend_cov_vadv,
tend_u_lsf, tend_v_lsf, tend_pt_lsf, tend_qv_lsf, tend_pt_rad, tend_u_geo, tend_v_geo,
tend_tg, tend_wg,
tsq_new, qsq_new, cov_new,
ww, ug, vg, beta, qsatg, r_exner_surf, dns, dfm, dfh, taux_ex, tauy_ex,
ftl_ex, fqw_ex, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p,
rdzg_f, rdzg_h, f2hg_m, f2hg_p, u_10, v_10, t_sfc, ttd_sfc
@end domainDependant
month = idate(2)
totalsec = real(it - 1, r_size) * timestep
if (ishrt > 0) then
end if
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
select case (levflag)
case (mymodel3)
case(mymodel25)
end select
select case (levflag)
case (mymodel3)
end select
@end parallelRegion
module gabls3_test
contains
implicit none
integer(4), intent(in) :: nx, ny, skind0, itend, levflag
integer(4) :: i, j
integer(4) :: kz
integer(4), allocatable :: skind(:, :)
integer(4) :: ntime
@domainDependant{attribute(host, autoDom)}
ozon, fktg, roctg, z_f, z_g, u, v, pt, qv, qc, qci, qke, tsq, qsq, cov, tg, wg,
coefc, ttrans, rlong, rshrt, rlongn, rshrtn, press, exner, ozon, fktg, roctg,
z_f, z_g, u, v, pt, qv, qc, qci, qke, tsq, qsq, cov
@end domainDependant
do kz = 1, pbl_nz - 1
z_h(kz) = (z_f(1, 1, kz + 1) + z_f(1, 1, kz)) * 0.5_r_size
end do
skind(1, 1) = skind0
clat(1, 1) = clat0
clon(1, 1) = clon0
amask(1, 1) = 1.0_r_size
aod(1, 1) = 0.0_r_size
albed(1, 1) = albed0
z_0m(1, 1) = z_0m0
z_0h(1, 1) = z_0h0
z_0q(1, 1) = z_0h0
fktg_surf(1, 1) = fktg0
roctg_surf(1, 1) = roctg0
do kz = 1, ngm
fktg(1, 1, kz) = fktg0
roctg(1, 1, kz) = roctg0
end do
ntime = nint(itend * timestep / dt_str)
p_surf(1, 1) = p_surf0
tg(1, 1, 0) = 302.0_r_size
do kz = 1, nz
qc(1, 1, kz) = 0.0_r_size
qci(1, 1, kz) = 0.0_r_size
exner(1, 1, kz) = (press(1, 1, kz) / pref) ** rdvcp
end do
r_exner_surf = (pref / p_surf(1, 1)) ** rdvcp
beta = min(1.0_r_size, cp * (pt(1, 1, 1) - tg(1, 1, 0) * r_exner_surf) / (hlatnt * (qv(1, 1, 1) - qsatg) * bowen_ratio0))
beta = beta * 4.0
do kz = 0, 1
wg(1, 1, kz) = beta * 0.3_r_size
end do
if (tke_init == 1) then
qke(1, 1, pbl_nz+1:nz) = 0.0
tsq(1, 1, pbl_nz+1:nz) = 0.0
qsq(1, 1, pbl_nz+1:nz) = 0.0
cov(1, 1, pbl_nz+1:nz) = 0.0
else
qke(1, 1, 1:nz) = 0.0
tsq(1, 1, 1:nz) = 0.0
qsq(1, 1, 1:nz) = 0.0
cov(1, 1, 1:nz) = 0.0
end if
if (i /= 1 .OR. j /= 1) then
p_surf(i,j) = p_surf(1, 1)
l_mo_inv(i,j) = l_mo_inv(1, 1)
uf(i,j) = uf(1, 1)
skind(i,j) = skind(1, 1)
clat(i,j) = clat(1, 1)
clon(i,j) = clon(1, 1)
amask(i,j) = amask(1, 1)
aod(i,j) = aod(1, 1)
fktg_surf(i,j) = fktg_surf(1, 1)
roctg_surf(i,j) = roctg_surf(1, 1)
z_0m(i,j) = z_0m(1, 1)
z_0h(i,j) = z_0h(1, 1)
z_0q(i,j) = z_0q(1, 1)
albed(i,j) = albed(1, 1)
do kz = 1, nz
z_f(i, j, kz) = z_f(1, 1, kz)
u(i, j, kz) = u(1, 1, kz)
v(i, j, kz) = v(1, 1, kz)
pt(i, j, kz) = pt(1, 1, kz)
qv(i, j, kz) = qv(1, 1, kz)
qc(i, j, kz) = qc(1, 1, kz)
qci(i, j, kz) = qci(1, 1, kz)
ozon(i, j, kz) = ozon(1, 1, kz)
qke(i, j, kz) = qke(1, 1, kz)
tsq(i, j, kz) = tsq(1, 1, kz)
qsq(i, j, kz) = qsq(1, 1, kz)
cov(i, j, kz) = cov(1, 1, kz)
press(i, j, kz) = press(1, 1, kz)
exner(i, j, kz) = exner(1, 1, kz)
end do
do kz = 1, ngm
z_g(i, j, kz) = z_g(1, 1, kz)
end do
do kz = 0, ngm
tg(i, j, kz) = tg(1, 1, kz)
end do
do kz = 1, ngm
fktg(i, j, kz) = fktg(1, 1, kz)
roctg(i, j, kz) = roctg(1, 1, kz)
end do
do kz = 0, 1
wg(i, j, kz) = wg(1, 1, kz)
end do
end if
end do
end do
implicit none
integer(4), intent(in) :: nx, ny, nz, itend
integer(4), intent(in) :: skind
integer(4) :: it
@domainDependant {attribute(autoDom)}
z_h
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, transferHere)}
press, exner
skind,
ozon,
z_f, z_g, z_0m, z_0h, z_0q,
p_surf, clat, clon, amask, aod,
fktg_surf, roctg_surf, albed,
fktg, roctg,
qc, qci,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, coefc, ttrans
l_mo_inv, uf,
u, v, pt, qv, qke, tsq, qsq, cov, tg, wg
rlong, rshrt, rlongn, rshrtn,
rh_sfc, qv_sfc
@end domainDependant
end do
implicit none
integer(4), intent(in) :: nx, ny, nz_in, it
integer(4), intent(in) :: skind
integer(4) :: kz
integer(4) :: ishrt
integer(4) :: ilong
integer(4) :: month
@domainDependant {attribute(autoDom)}
z_h
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
press, exner
skind,
ozon,
z_f, z_g, z_0m, z_0h, z_0q,
p_surf, clat, clon, amask, aod,
fktg_surf, roctg_surf, albed,
fktg, roctg,
qc, qci,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs, coefc, ttrans
l_mo_inv, uf,
u, v, pt, qv, qke, tsq, qsq, cov, tg, wg
rlong, rshrt, rlongn, rshrtn,
rh_sfc, qv_sfc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
gpf, gph, gdp, gtmp,
cvrr, cwcr, cicr, tlev_out
ztemp, solar, dfm_surf, dfh_surf, dfq_surf,
taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex, taux_surf_im,
tauy_surf_im, ftl_surf_im, fqw_surf_im, prep_rate, dns_surf,
avisb, avisd, anirb, anird,
tend_u_pbl, tend_v_pbl, tend_pt_pbl, tend_qv_pbl, tend_qke_mym, tend_tsq_mym,
tend_qsq_mym, tend_cov_mym, tend_u_vadv, tend_v_vadv, tend_pt_vadv, tend_qv_vadv,
tend_qke_vadv, tend_tsq_vadv, tend_qsq_vadv, tend_cov_vadv,
tend_u_lsf, tend_v_lsf, tend_pt_lsf, tend_qv_lsf, tend_pt_rad, tend_u_geo, tend_v_geo,
tend_tg, tend_wg,
tsq_new, qsq_new, cov_new,
ww, ug, vg, beta, qsatg, r_exner_surf, dns, dfm, dfh, taux_ex, tauy_ex,
ftl_ex, fqw_ex, dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p,
rdzg_f, rdzg_h, f2hg_m, f2hg_p, u_10, v_10, t_sfc, ttd_sfc
@end domainDependant
month = idate(2)
totalsec = real(it - 1, r_size) * timestep
if (ishrt > 0) then
end if
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
select case (levflag)
case (mymodel3)
case(mymodel25)
end select
select case (levflag)
case (mymodel3)
end select
@end parallelRegion
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=896, combined=672, changed=672, unchanged=0, subroutine_definitions=3, calls=112, imports=50, data_definitions=0, save=0, parameter=13, openmp=0, style=8, parallel_loops=3, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=298, other=185)
========== gabls3_forcing =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/tests/gabls3/gabls3_forcing.h90, hfpath: branches/reference/asuca-kij/Src/Physics/tests/gabls3/gabls3_forcing.f90
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
uvg_time, ug_surf, vg_surf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, ug, vg
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: uvg_time(n_uvg)
@domainDependant{}
nx, ny, nz, totalsec
@end domainDependant
@domainDependant {attribute(autoDom)}
uvg_time, ug_surf, vg_surf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, ug, vg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
tforc_time, tforc, qforc_time, qforc, uvforc_time, uforc, vforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, press, u_inc, v_inc, pt_inc, qv_inc
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: tforc_time(n_tforc)
integer(4), intent(in) :: qforc_time(n_qforc)
integer(4), intent(in) :: uvforc_time(n_uvforc)
@domainDependant{}
nx, ny, nz, totalsec, pref
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
rdvcp
@end domainDependant
@domainDependant {attribute(autoDom)}
tforc_time, tforc, qforc_time, qforc, uvforc_time, uforc, vforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, press, u_inc, v_inc, pt_inc, qv_inc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
omforc_time, omforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, pt, press, w_out
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: omforc_time(n_omforc)
@domainDependant{}
nx, ny, nz, totalsec, pref, omg2w
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
rd, grav, rdvcp
@end domainDependant
@domainDependant {attribute(autoDom)}
omforc_time, omforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, pt, press, w_out
profile_f, factor
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
uvg_time, ug_surf, vg_surf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, ug, vg
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: uvg_time(n_uvg)
@domainDependant{}
nx, ny, nz, totalsec
@end domainDependant
@domainDependant {attribute(autoDom)}
uvg_time, ug_surf, vg_surf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, ug, vg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
tforc_time, tforc, qforc_time, qforc, uvforc_time, uforc, vforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, press, u_inc, v_inc, pt_inc, qv_inc
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: tforc_time(n_tforc)
integer(4), intent(in) :: qforc_time(n_qforc)
integer(4), intent(in) :: uvforc_time(n_uvforc)
@domainDependant{}
nx, ny, nz, totalsec, pref
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
rdvcp
@end domainDependant
@domainDependant {attribute(autoDom)}
tforc_time, tforc, qforc_time, qforc, uvforc_time, uforc, vforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, press, u_inc, v_inc, pt_inc, qv_inc
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(in) :: nx, ny, nz
@domainDependant {attribute(autoDom, host)}
omforc_time, omforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, pt, press, w_out
@end domainDependant
integer(4), intent(in) :: nx, ny, nz
integer(4), intent(in) :: omforc_time(n_omforc)
@domainDependant{}
nx, ny, nz, totalsec, pref, omg2w
@end domainDependant
@domainDependant{declarationPrefix(real(r_size))}
rd, grav, rdvcp
@end domainDependant
@domainDependant {attribute(autoDom)}
omforc_time, omforc
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
z_f, pt, press, w_out
profile_f, factor
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=436, combined=411, changed=90, unchanged=321, subroutine_definitions=6, calls=3, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=3, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=7, other=69)
========== gabls3_helper =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/tests/gabls3/gabls3_helper.h90, hfpath: None
module gabls3_helper
public :: basic_variables_init, locals_init_upper, time_integration, get_solar, get_uf
contains
implicit none
integer(4) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny, pref
@end domainDependant
@domainDependant{declarationPrefix(integer(4))}
kmax
@end domainDependant
@domainDependant{declarationPrefix(real(kind = r_size))}
rdvcp, rd, c_virtual
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
p_surf, qv, pt, press, dns_surf, r_exner_surf, dns, gtmp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
r_exner_surf = (pref / p_surf) ** rdvcp
do kz = 1, kmax
gtmp(kz) = pt(kz) * (press(kz) / pref) ** rdvcp
dns(kz) = press(kz) / (rd * gtmp(kz) * (1.0_r_size + c_virtual * qv(kz)))
end do
dns_surf = dns(1)
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{declarationPrefix(integer(4))}
kmax, pbl_nz
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
tend_u_pbl, tend_v_pbl, tend_pt_pbl, tend_qv_pbl,
tend_qke_mym, tend_tsq_mym, tend_qsq_mym, tend_cov_mym,
tsq_new, qsq_new, cov_new
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = pbl_nz + 1, kmax
tend_u_pbl(kz) = 0.0
tend_v_pbl(kz) = 0.0
tend_pt_pbl(kz) = 0.0
tend_qv_pbl(kz) = 0.0
tend_qke_mym(kz) = 0.0
tend_tsq_mym(kz) = 0.0
tend_qsq_mym(kz) = 0.0
tend_cov_mym(kz) = 0.0
tsq_new(kz) = 0.0
qsq_new(kz) = 0.0
cov_new(kz) = 0.0
end do
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
skind
tend_u_pbl, tend_u_vadv, tend_u_geo, tend_u_lsf,
tend_v_pbl, tend_v_vadv, tend_v_geo, tend_v_lsf,
tend_pt_pbl, tend_pt_vadv, tend_pt_rad, tend_pt_lsf,
tend_qv_pbl, tend_qv_vadv, tend_qv_lsf,
tend_qke_mym, tend_qke_vadv, tend_tsq_mym, tend_tsq_vadv,
tend_qsq_mym, tend_qsq_vadv, tend_cov_mym, tend_cov_vadv,
tsq_new, qsq_new, cov_new,
tend_tg,
tend_wg,
u, v, pt, qv,
qke, tsq, qsq, cov,
tg,
wg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, kmax
tend_u = tend_u_pbl(kz) + tend_u_vadv(kz) + tend_u_geo(kz) + tend_u_lsf(kz)
tend_v = tend_v_pbl(kz) + tend_v_vadv(kz) + tend_v_geo(kz) + tend_v_lsf(kz)
tend_pt = tend_pt_pbl(kz) + tend_pt_vadv(kz) + tend_pt_rad(kz) + tend_pt_lsf(kz)
tend_qv = tend_qv_pbl(kz) + tend_qv_vadv(kz) + tend_qv_lsf(kz)
u(kz) = u(kz) + tend_u * timestep
v(kz) = v(kz) + tend_v * timestep
pt(kz) = pt(kz) + tend_pt * timestep
qv(kz) = qv(kz) + tend_qv * timestep
end do
if (levflag .EQ. mymodel3) then
do kz = 1, kmax
tend_qke = tend_qke_mym(kz) + tend_qke_vadv(kz)
tend_tsq = tend_tsq_mym(kz) + tend_tsq_vadv(kz)
tend_qsq = tend_qsq_mym(kz) + tend_qsq_vadv(kz)
tend_cov = tend_cov_mym(kz) + tend_cov_vadv(kz)
qke(kz) = qke(kz) + tend_qke * timestep
tsq(kz) = tsq(kz) + tend_tsq * timestep
qsq(kz) = qsq(kz) + tend_qsq * timestep
cov(kz) = cov(kz) + tend_cov * timestep
end do
else if (levflag .EQ. mymodel25) then
do kz = 1, kmax
tend_qke = tend_qke_mym(kz) + tend_qke_vadv(kz)
qke(kz) = qke(kz) + tend_qke * timestep
tsq(kz) = tsq_new(kz)
qsq(kz) = qsq_new(kz)
cov(kz) = cov_new(kz)
end do
end if
do kz = 1, kmax
qke(kz) = min(max(qke(kz), 1.e-20_r_size), pp_qke_max)
tsq(kz) = max(tsq(kz), 0.0_r_size)
qsq(kz) = max(qsq(kz), 0.0_r_size)
cov(kz) = sign(min(abs(cov(kz)), sqrt(tsq(kz) * qsq(kz)) ), cov(kz) )
end do
do kz = 0, ngm
tg(kz) = tg(kz) + tend_tg(kz) * timestep
end do
if (skind == kind_ice) then
end if
do kz = 0, 1
wg(kz) = wg(kz) + tend_wg(kz) * timestep
end do
@end parallelRegion
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
taux_surf_ex, tauy_surf_ex, uf
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
uf = sqrt(sqrt(taux_surf_ex ** 2 + tauy_surf_ex ** 2))
@end parallelRegion
end subroutine
implicit none
@domainDependant{attribute(autoDom)}
tkelvn, tg0
@end domainDependant
tg0 = max(tg0, tkelvn)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
dswb, uswb, solar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
solar = dswb - uswb
@end parallelRegion
end module
module gabls3_helper
public :: basic_variables_init, locals_init_upper, time_integration, get_solar, get_uf
contains
implicit none
integer(4) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny, pref
@end domainDependant
@domainDependant{declarationPrefix(integer(4))}
kmax
@end domainDependant
@domainDependant{declarationPrefix(real(kind = r_size))}
rdvcp, rd, c_virtual
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
p_surf, qv, pt, press, dns_surf, r_exner_surf, dns, gtmp
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
r_exner_surf = (pref / p_surf) ** rdvcp
do kz = 1, kmax
gtmp(kz) = pt(kz) * (press(kz) / pref) ** rdvcp
dns(kz) = press(kz) / (rd * gtmp(kz) * (1.0_r_size + c_virtual * qv(kz)))
end do
dns_surf = dns(1)
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4) :: kz
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant{declarationPrefix(integer(4))}
kmax, pbl_nz
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
tend_u_pbl, tend_v_pbl, tend_pt_pbl, tend_qv_pbl,
tend_qke_mym, tend_tsq_mym, tend_qsq_mym, tend_cov_mym,
tsq_new, qsq_new, cov_new
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = pbl_nz + 1, kmax
tend_u_pbl(kz) = 0.0
tend_v_pbl(kz) = 0.0
tend_pt_pbl(kz) = 0.0
tend_qv_pbl(kz) = 0.0
tend_qke_mym(kz) = 0.0
tend_tsq_mym(kz) = 0.0
tend_qsq_mym(kz) = 0.0
tend_cov_mym(kz) = 0.0
tsq_new(kz) = 0.0
qsq_new(kz) = 0.0
cov_new(kz) = 0.0
end do
@end parallelRegion
implicit none
integer(4), intent(in) :: nx, ny
integer(4), intent(in) :: skind
integer(4) :: kz
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
skind
tend_u_pbl, tend_u_vadv, tend_u_geo, tend_u_lsf,
tend_v_pbl, tend_v_vadv, tend_v_geo, tend_v_lsf,
tend_pt_pbl, tend_pt_vadv, tend_pt_rad, tend_pt_lsf,
tend_qv_pbl, tend_qv_vadv, tend_qv_lsf,
tend_qke_mym, tend_qke_vadv, tend_tsq_mym, tend_tsq_vadv,
tend_qsq_mym, tend_qsq_vadv, tend_cov_mym, tend_cov_vadv,
tsq_new, qsq_new, cov_new,
tend_tg,
tend_wg,
u, v, pt, qv,
qke, tsq, qsq, cov,
tg,
wg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
do kz = 1, kmax
tend_u = tend_u_pbl(kz) + tend_u_vadv(kz) + tend_u_geo(kz) + tend_u_lsf(kz)
tend_v = tend_v_pbl(kz) + tend_v_vadv(kz) + tend_v_geo(kz) + tend_v_lsf(kz)
tend_pt = tend_pt_pbl(kz) + tend_pt_vadv(kz) + tend_pt_rad(kz) + tend_pt_lsf(kz)
tend_qv = tend_qv_pbl(kz) + tend_qv_vadv(kz) + tend_qv_lsf(kz)
u(kz) = u(kz) + tend_u * timestep
v(kz) = v(kz) + tend_v * timestep
pt(kz) = pt(kz) + tend_pt * timestep
qv(kz) = qv(kz) + tend_qv * timestep
end do
if (levflag .EQ. mymodel3) then
do kz = 1, kmax
tend_qke = tend_qke_mym(kz) + tend_qke_vadv(kz)
tend_tsq = tend_tsq_mym(kz) + tend_tsq_vadv(kz)
tend_qsq = tend_qsq_mym(kz) + tend_qsq_vadv(kz)
tend_cov = tend_cov_mym(kz) + tend_cov_vadv(kz)
qke(kz) = qke(kz) + tend_qke * timestep
tsq(kz) = tsq(kz) + tend_tsq * timestep
qsq(kz) = qsq(kz) + tend_qsq * timestep
cov(kz) = cov(kz) + tend_cov * timestep
end do
else if (levflag .EQ. mymodel25) then
do kz = 1, kmax
tend_qke = tend_qke_mym(kz) + tend_qke_vadv(kz)
qke(kz) = qke(kz) + tend_qke * timestep
tsq(kz) = tsq_new(kz)
qsq(kz) = qsq_new(kz)
cov(kz) = cov_new(kz)
end do
end if
do kz = 1, kmax
qke(kz) = min(max(qke(kz), 1.e-20_r_size), pp_qke_max)
tsq(kz) = max(tsq(kz), 0.0_r_size)
qsq(kz) = max(qsq(kz), 0.0_r_size)
cov(kz) = sign(min(abs(cov(kz)), sqrt(tsq(kz) * qsq(kz)) ), cov(kz) )
end do
do kz = 0, ngm
tg(kz) = tg(kz) + tend_tg(kz) * timestep
end do
if (skind == kind_ice) then
end if
do kz = 0, 1
wg(kz) = wg(kz) + tend_wg(kz) * timestep
end do
@end parallelRegion
end subroutine
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
taux_surf_ex, tauy_surf_ex, uf
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
uf = sqrt(sqrt(taux_surf_ex ** 2 + tauy_surf_ex ** 2))
@end parallelRegion
end subroutine
implicit none
@domainDependant{attribute(autoDom)}
tkelvn, tg0
@end domainDependant
tg0 = max(tg0, tkelvn)
implicit none
integer(4), intent(in) :: nx, ny
@domainDependant{}
nx, ny
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom)}
dswb, uswb, solar
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
solar = dswb - uswb
@end parallelRegion
end module
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=239, combined=217, changed=217, unchanged=0, subroutine_definitions=6, calls=1, imports=17, data_definitions=0, save=0, parameter=0, openmp=0, style=4, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=36, other=151)
========== rad_pp =============
refpath: branches/hybrid/asuca-kij/HybridSources/Physics/tests/rad_pp/rad_pp.h90, hfpath: None
module rad_init
contains
implicit none
@domainDependant {}
nx, ny, nlayr
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
tin_surf, p_surf
@end domainDependant
@domainDependant {domName(layr), domSize(nlayr), attribute(autodom)}
gtmp_in, gpf_in
@end domainDependant
@parallelRegion{appliesTo(CPU, GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
tin_surf, p_surf
@end domainDependant
@domainDependant {domName(layr), domSize(nlayr), attribute(autodom)}
gtmp_in, gpf_in
@end domainDependant
implicit none
@domainDependant {declarationPrefix(integer(4))}
kmax
@end domainDependant
@domainDependant {}
nx, ny, amask_in, aod_in, clat_in, clon_in, albed_in
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
amask, aod, clat, clon, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant {domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autodom)}
gtmp, gwv, press, ozon, cvrr, cwcr, cicr
@end domainDependant
@domainDependant {domName(vertical), domSize(kmax), attribute(autodom)}
gtmp_out, gwv_out, gpf_out
@end domainDependant
@parallelRegion{appliesTo(CPU, GPU), domName(i, j), domSize(nx, ny)}
end do
end do
@end parallelRegion
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
amask, aod, clat, clon, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant {domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autodom)}
gtmp, gwv, press, ozon, cvrr, cwcr, cicr
@end domainDependant
@domainDependant {domName(vertical), domSize(kmax), attribute(autodom)}
gtmp_out, gwv_out, gpf_out
@end domainDependant
end module rad_init
module rad_test
contains
implicit none
@domainDependant {attribute(autoDom,host), domName(i, j), domSize(nx, ny)}
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press
@end domainDependant
@domainDependant {attribute(autoDom,host)}
rshrt, rlong, rshrtn, rlongn, ppt, coefc, ttrans
@end domainDependant
stop 99
end if
end do
end do
end do
end do
implicit none
@domainDependant {attribute(autoDom, transferHere)}
aeroec, aerosa, aeroaf, aeroac, aerodl, aerodo, aeracl, aeraco,
sblco2, sblo2n, sblo2s, tblo, tblc, tblh, rtable,
aec, asa, aaf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, transferHere)}
p_surf, tin_surf, zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
rlong, rshrt, rlongn, rshrtn, ppt,
coefc, ttrans,
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press,
@end domainDependant
end do
end subroutine
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tin_surf, zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
rlong, rshrt, rlongn, rshrtn, ppt,
coefc, ttrans,
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press,
gpf, gph, gdp, ztemp
@end domainDependant
end if
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
implicit none
exit
end if
end do
end do
end do
module rad_init
contains
implicit none
@domainDependant {}
nx, ny, nlayr
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
tin_surf, p_surf
@end domainDependant
@domainDependant {domName(layr), domSize(nlayr), attribute(autodom)}
gtmp_in, gpf_in
@end domainDependant
@parallelRegion{appliesTo(CPU, GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
tin_surf, p_surf
@end domainDependant
@domainDependant {domName(layr), domSize(nlayr), attribute(autodom)}
gtmp_in, gpf_in
@end domainDependant
implicit none
@domainDependant {declarationPrefix(integer(4))}
kmax
@end domainDependant
@domainDependant {}
nx, ny, amask_in, aod_in, clat_in, clon_in, albed_in
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
amask, aod, clat, clon, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant {domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autodom)}
gtmp, gwv, press, ozon, cvrr, cwcr, cicr
@end domainDependant
@domainDependant {domName(vertical), domSize(kmax), attribute(autodom)}
gtmp_out, gwv_out, gpf_out
@end domainDependant
@parallelRegion{appliesTo(CPU, GPU), domName(i, j), domSize(nx, ny)}
end do
end do
@end parallelRegion
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autodom)}
amask, aod, clat, clon, avisb, avisd, anirb, anird
@end domainDependant
@domainDependant {domName(i, j, vertical), domSize(nx, ny, kmax), attribute(autodom)}
gtmp, gwv, press, ozon, cvrr, cwcr, cicr
@end domainDependant
@domainDependant {domName(vertical), domSize(kmax), attribute(autodom)}
gtmp_out, gwv_out, gpf_out
@end domainDependant
end module rad_init
module rad_test
contains
implicit none
@domainDependant {attribute(autoDom,host), domName(i, j), domSize(nx, ny)}
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press
@end domainDependant
@domainDependant {attribute(autoDom,host)}
rshrt, rlong, rshrtn, rlongn, ppt, coefc, ttrans
@end domainDependant
stop 99
end if
end do
end do
end do
end do
implicit none
@domainDependant {attribute(autoDom, transferHere)}
aeroec, aerosa, aeroaf, aeroac, aerodl, aerodo, aeracl, aeraco,
sblco2, sblo2n, sblo2s, tblo, tblc, tblh, rtable,
aec, asa, aaf
@end domainDependant
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, transferHere)}
p_surf, tin_surf, zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
rlong, rshrt, rlongn, rshrtn, ppt,
coefc, ttrans,
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press,
@end domainDependant
end do
end subroutine
implicit none
@domainDependant {domName(i, j), domSize(nx, ny), attribute(autoDom, present)}
p_surf, tin_surf, zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs,
dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
rlong, rshrt, rlongn, rshrtn, ppt,
coefc, ttrans,
amask, aod, clat, clon, avisb, avisd, anirb, anird,
gtmp, gwv, ozon, cvrr, cwcr, cicr, press,
gpf, gph, gdp, ztemp
@end domainDependant
end if
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
end subroutine
implicit none
exit
end if
end do
end do
end do
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=552, combined=482, changed=482, unchanged=0, subroutine_definitions=8, calls=57, imports=30, data_definitions=1, save=0, parameter=21, openmp=0, style=11, parallel_loops=3, device_data_init=0, implementation_scheme=2, commented=0, radiation=243, storage_order=0, data_spec=0, other=106)
========== cumulus =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/cumulus.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/cumulus.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=11, combined=11, changed=1, unchanged=10, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== func =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/func.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/func.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=103, combined=95, changed=1, unchanged=94, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/mp.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/mp.f90
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
qv, qc, qr, ptemp, pres_ptb, temp, dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tend_ptemp, tend_qv, tend_qc, tend_qr
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
qv, qc, qr, ptemp, pres_ptb, temp, dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tend_ptemp, tend_qv, tend_qc, tend_qr
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=48, combined=46, changed=13, unchanged=33, subroutine_definitions=0, calls=1, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=1, other=6)
========== mp_const_asuca =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/mp_const_asuca.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/mp_const_asuca.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=32, combined=32, changed=1, unchanged=31, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mp_fallvel =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/mp_fallvel.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/mp_fallvel.f90
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qr
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dens_a, tv_r, r_dens_a, cfl_reached, dt_rk_rest
@end domainDependant
@domainDependant{attribute(autoDom, present)}
gm
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tv, wd, cfl_reached, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wd_x, wdrop_qx, dens_a, cfl_reached, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qr
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dens_a, tv_r, r_dens_a, cfl_reached, dt_rk_rest
@end domainDependant
@domainDependant{attribute(autoDom, present)}
gm
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tv, wd, cfl_reached, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wd_x, wdrop_qx, dens_a, cfl_reached, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=133, combined=130, changed=46, unchanged=84, subroutine_definitions=3, calls=0, imports=3, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=6, other=33)
========== mp_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/mp_vars.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/mp_vars.f90
@domainDependant{attribute(host, autoDom)}
gm
@end domainDependant
@domainDependant{attribute(host, autoDom)}
gm
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=9, combined=9, changed=4, unchanged=5, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=3)
========== mp_warmrain =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/mp_warmrain.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/mp_warmrain.f90
!pgi$g novector
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
qv, qc, qr, ptemp, temp, pres_ptb, dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tv_r, dens_a, r_dens_a, r_pres_loc,
qvsw, p_r__ac_r_w, p_r__aut_w, p_v__evp_r, pqc, work_qv, work_qc, satadj_qc, satadj_pt
@end domainDependant
@domainDependant{attribute(autoDom, present)}
gm, dens_ref_f, pres_ref_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (qc(k,i,j) > 1.0E-19) then
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
temp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
work_qv, work_qc, qvsw, r_pres_loc, satadj_qc, satadj_pt
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
!pgi$g novector
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
qv, qc, qr, ptemp, temp, pres_ptb, dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tv_r, dens_a, r_dens_a, r_pres_loc,
qvsw, p_r__ac_r_w, p_r__aut_w, p_v__evp_r, pqc, work_qv, work_qc, satadj_qc, satadj_pt
@end domainDependant
@domainDependant{attribute(autoDom, present)}
gm, dens_ref_f, pres_ref_f
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (qc(k,i,j) > 1.0E-19) then
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
temp
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
work_qv, work_qc, qvsw, r_pres_loc, satadj_qc, satadj_pt
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=210, combined=182, changed=33, unchanged=149, subroutine_definitions=1, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=2, other=24)
========== pbl =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pbl.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pbl.f90
@domainDependant{attribute(host), domName(k,i,j), domSize(nz_mn:nz_mx, nx_mn:nx_mx, ny_mn:ny_mx), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dsvdx, dsvdy, dsvdz
@end domainDependant
integer(4) :: n
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
c_m_deardorff
@end domainDependant
stop 2
integer(4)            :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dis_eturb, rjd_pf, dens_ptb, dens_ref_f, l_mix
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
stop 2
stop 2
stop 2
integer(4) :: k
stop 2
integer(4) :: k
stop 2
integer(4) :: k
stop 2
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dsvdx, dsvdy, dsvdz
@end domainDependant
stop 2
end subroutine
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
difx, dify, difz, sv
@end domainDependant
stop 2
integer(4)            :: k
stop 2
stop 2
stop 2
stop 2
@domainDependant{}
@end domainDependant
stop 2
@domainDependant{attribute(host), domName(k,i,j), domSize(nz_mn:nz_mx, nx_mn:nx_mx, ny_mn:ny_mx), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dsvdx, dsvdy, dsvdz
@end domainDependant
integer(4) :: n
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
c_m_deardorff
@end domainDependant
stop 2
integer(4)            :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dis_eturb, rjd_pf, dens_ptb, dens_ref_f, l_mix
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
stop 2
stop 2
stop 2
integer(4) :: k
stop 2
integer(4) :: k
stop 2
integer(4) :: k
stop 2
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dsvdx, dsvdy, dsvdz
@end domainDependant
stop 2
end subroutine
stop 2
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
difx, dify, difz, sv
@end domainDependant
stop 2
integer(4)            :: k
stop 2
stop 2
stop 2
stop 2
@domainDependant{}
@end domainDependant
stop 2
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=327, combined=292, changed=116, unchanged=176, subroutine_definitions=10, calls=0, imports=23, data_definitions=0, save=0, parameter=0, openmp=0, style=19, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=1, radiation=0, storage_order=0, data_spec=16, other=43)
========== pbl_constvis =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pbl_constvis.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pbl_constvis.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=49, combined=40, changed=1, unchanged=39, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== pbl_mynn =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pbl_mynn.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pbl_mynn.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1249, combined=1092, changed=10, unchanged=1082, subroutine_definitions=1, calls=8, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== pbl_shared =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pbl_shared.H90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pbl_shared.f90
@domainDependant{domName(k, i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
eddykm, eddykh, prandtl_t, l_mix
@end domainDependant
@domainDependant{domName(i, j), domSize(0:nx+1,0:ny+1), attribute(host)}
h_pbl
@end domainDependant
integer(4) :: i, j, k
@domainDependant{}
@end domainDependant
eddykm(k,i,j)    = 0.0_rp
eddykh(k,i,j)    = 0.0_rp
prandtl_t(k,i,j) = 0.0_rp
l_mix(k,i,j)     = 0.0_rp
h_pbl(i,j)       = 0.0_rp
integer(4)            :: k
@domainDependant{attribute(autoDom, present)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dz_pf, dz_ph, dxidx_uf, dyidx_uf, dzidx_uf, dxidy_vf, dyidy_vf, dzidy_vf, dxidz_ph, dyidz_ph, dzidz_ph,
dsdxi, dsdyi, dsdzi, dsdx, dsdy, dsdz
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn+1), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn+1,ny_mn), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn+1,ny_mn+1), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
integer(4)            :: k
@domainDependant{attribute(autoDom, present)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dxidy_uf, dxidz_uf, dyidx_vf, dyidy_vf, dyidz_vf, dzidx_ph, dzidy_ph, dzidz_ph, rjd_uf, rjd_vf, rjd_ph,
dsdx, dsdy, dsdz, dsdxi, dsdyi, dsdzi, factor,
dz_pf, dz_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,1), endAt(nx,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,1), endAt(nx+1,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
#define TRIDIAG_LU_DECOMPOSE( l, d, u, a, nz_e ) \
do k = nz_e-1, 1, -1 `\
d(k,i,j) = d(k,i,j) - u(k,i,j) / d(k+1,i,j) * l(k+1,i,j) `\
a(k,i,j) = a(k,i,j) - u(k,i,j) / d(k+1,i,j) * a(k+1,i,j) `\
integer(4), intent(in) :: i, j
integer(4), intent(in) :: nz_e
integer(4) :: k
TRIDIAG_LU_DECOMPOSE( l, d, u, a, nz_e )
#define TRIDIAG_SOLVE( l, d, a, nz_e ) \
a(1,i,j) = a(1,i,j)/d(1,i,j) `\
do k = 2, nz_e `\
a(k,i,j) = ( a(k,i,j) - l(k,i,j) * a(k-1,i,j) ) / d(k,i,j) `\
integer(4), intent(in) :: i, j
integer(4), intent(in) :: nz_e
integer(4) :: k
TRIDIAG_SOLVE( l, d, a, nz_e )
integer(4), intent(in)  :: id_qke, id_tsq, id_qsq, id_cov
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rjd_pf, dens_ptb, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rqa_v(k,i,j,it_calc,id_qke) = max(rqa_v(k,i,j,it_calc,id_qke), qke_min * densrjd )
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rqa_v(k,i,j,it_calc,id_qke) = min(max(rqa_v(k,i,j,it_calc,id_qke), qke_min * densrjd), qke_max * densrjd)
rqa_v(k,i,j,it_calc,id_tsq) = min(max(rqa_v(k,i,j,it_calc,id_tsq), tsq_min * densrjd), tsq_max * densrjd)
rqa_v(k,i,j,it_calc,id_qsq) = min(max(rqa_v(k,i,j,it_calc,id_qsq), qsq_min * densrjd), qsq_max * densrjd)
tq = sqrt(rqa_v(k,i,j,it_calc,id_tsq) * rqa_v(k,i,j,it_calc,id_qsq))
if(abs(rqa_v(k,i,j,it_calc,id_cov)) > tq) then
rqa_v(k,i,j,it_calc,id_cov) = sign( tq, rqa_v(k,i,j,it_calc,id_cov) )
@end parallelRegion
#define MAKE_MATRIX_TKE( i, j, l, d, u ) \
r = dz_pf(1,i,j) / dz_ph(1,i,j) `\
nu1 = dzidz_ph(1,i,j) * ( ( 2.0_rp - r ) * eddykm(1, i, j)+ r * eddykm(2, i, j)) `\
d(1, i, j) = 1.0_rp + dt * ( nu1 * dzidz_pf(1,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(1,i,j,id_qke)) / l_mix(1, i, j)) `\
u(1, i, j) = - dt * nu1 * dzidz_pf(2,i,j) `\
do k = 2, nz-1 `\
r = dz_pf(k-1,i,j) / dz_ph(k-1,i,j) `\
nu2 = dzidz_ph(k,i,j) * ( ( 2.0_rp - r ) * eddykm(k, i, j)+ r * eddykm(k+1, i, j)) `\
l(k, i, j) = -dt * nu1 * dzidz_pf(k-1,i,j) `\
d(k, i, j) = 1.0_rp `\ + dt * ( ( nu1 + nu2 ) * dzidz_pf(k ,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(k,i,j,id_qke)) / l_mix(k, i, j)) `\
u(k, i, j) = -dt * nu2 * dzidz_pf(k+1,i,j) `\
end do `\
l(nz, i, j) = - dt * nu2 * dzidz_pf(nz-1,i,j) `\
d(nz, i, j) = 1.0_rp + dt * ( nu2 * dzidz_pf(nz ,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(nz,i,j,id_qke)) / l_mix(nz, i, j))
integer(4), intent(in) :: i
integer(4), intent(in) :: j
integer(4) :: k
MAKE_MATRIX_TKE( i, j, l, d, u )
#define MAKE_MATRIX_W( i, j, l, d, u ) \
nu1 = dt * dzidz_pf(1,i,j) * eddykm(1,i,j) * ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) `\
nu2 = dt * dzidz_pf(2,i,j) * eddykm(2,i,j) * ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) `\
dens_h = ( 0.5_rp * ( dens_ref_f(1,i,j) + dens_ref_f(2,i,j) ) `\ + 0.5_rp * ( dens_ptb  (1,i,j) + dens_ptb  (2,i,j) ) ) `\
d(1,i,j) = dens_h + ( nu1 + nu2 ) * dzidz_ph(1,i,j) `\
u(1,i,j) =        -         nu2   * dzidz_ph(2,i,j) `\
nu1 = nu2 `\
do k = 2, nz_w-1 `\
nu2 = dt * eddykm(k+1,i,j) * dzidz_pf(k+1,i,j) * ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) `\
dens_h = ( 0.5_rp * ( dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) `\ + 0.5_rp * ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) ) ) `\
l(k,i,j) =        -   nu1         * dzidz_ph(k-1,i,j) `\
d(k,i,j) = dens_h + ( nu1 + nu2 ) * dzidz_ph(k  ,i,j) `\
u(k,i,j) =        -         nu2   * dzidz_ph(k+1,i,j) `\
nu1 = nu2 `\
end do `\
u(nz_w-1,i,j) = 0.0_rp `\
l(nz_w,i,j  ) = 0.0_rp `\
d(nz_w,i,j  ) = 0.5_rp * ( dens_ref_f(nz_w,i,j) + dens_ref_f(nz_w+1,i,j) ) `\ + 0.5_rp * ( dens_ptb  (nz_w,i,j) + dens_ptb  (nz_w+1,i,j) )
integer(4), intent(in) :: i
integer(4), intent(in) :: j
integer(4) :: k
MAKE_MATRIX_W( i, j, l, d, u )
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rqke_v, rqke,
dens_ptb, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn), endAt(nx_mx,nx_mx), template(TIGHT_STENCIL)}
do k = nz_mn, nz_mx
rqke(k,i,j) = ( dens_ref_f(k,i,j) + dens_ptb(k,i,j) ) * qa(k,i,j,id_qke)
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tend_rqke_v(k,i,j) = 0.0_rp
@end parallelRegion
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rqke_v,
rjd_pf,
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tend_rqke_v(k,i,j) = 2.0_rp * tend_rqke_v(k,i,j) * rjd_pf(k,i,j)
@end parallelRegion
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l, tend_rqke_v,
dens_ptb, vel_z, dens_ref_f, rjd_ph, dzidz_pf, dzidz_ph,
dz_pf, dz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l, d, u, tend_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
MAKE_MATRIX_TKE( i, j, l, d, u )
TRIDIAG_LU_DECOMPOSE( l, d, u, tend_rqke_v, nz )
TRIDIAG_SOLVE( l, d, tend_rqke_v, nz )
a1 = ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) * eddykm(1,i,j) * dzidz_pf(1,i,j)
a2 = ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) * eddykm(2,i,j) * dzidz_pf(2,i,j)
e1 = ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) * qa(1,i,j,id_qke) * one_third
e2 = ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) * qa(2,i,j,id_qke) * one_third
do k = 1, nz_w-1
tend_z(k) = ( a2 * ( vel_z(k+1,i,j) - vel_z(k  ,i,j) ) - e2 - a1 * ( vel_z(k  ,i,j) - vel_z(k-1,i,j) ) + e1 ) * dzidz_ph(k,i,j)
a1 = a2
a2 = ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) * eddykm(k+1,i,j) * dzidz_pf(k+1,i,j)
e1 = e2
e2 = ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) * qa(k+1,i,j,id_qke) * one_third
tend_z(nz_w) = 0.0_rp
MAKE_MATRIX_W( i, j, l, d, u )
TRIDIAG_LU_DECOMPOSE( l, d, u, tend_z, nz_w )
TRIDIAG_SOLVE( l, d, tend_z, nz_w )
do k = 1, nz_w
tend_mom_z_v_l(k,i,j) = tend_mom_z_v_l(k,i,j) + tend_z(k) * ( 0.5_rp * ( dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) + 0.5_rp * ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) ) ) * rjd_ph(k,i,j)
@end parallelRegion
@domainDependant{domName(k, i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
eddykm, eddykh, prandtl_t, l_mix
@end domainDependant
@domainDependant{domName(i, j), domSize(0:nx+1,0:ny+1), attribute(host)}
h_pbl
@end domainDependant
integer(4) :: i, j, k
@domainDependant{}
@end domainDependant
eddykm(k,i,j)    = 0.0_rp
eddykh(k,i,j)    = 0.0_rp
prandtl_t(k,i,j) = 0.0_rp
l_mix(k,i,j)     = 0.0_rp
h_pbl(i,j)       = 0.0_rp
integer(4)            :: k
@domainDependant{attribute(autoDom, present)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dz_pf, dz_ph, dxidx_uf, dyidx_uf, dzidx_uf, dxidy_vf, dyidy_vf, dzidy_vf, dxidz_ph, dyidz_ph, dzidz_ph,
dsdxi, dsdyi, dsdzi, dsdx, dsdy, dsdz
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn+1), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn+1,ny_mn), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn+1,ny_mn+1), endAt(nx_mx-1,ny_mx-1), template(TIGHT_STENCIL)}
@end parallelRegion
integer(4)            :: k
@domainDependant{attribute(autoDom, present)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_uf, dxidy_uf, dxidz_uf, dyidx_vf, dyidy_vf, dyidz_vf, dzidx_ph, dzidy_ph, dzidz_ph, rjd_uf, rjd_vf, rjd_ph,
dsdx, dsdy, dsdz, dsdxi, dsdyi, dsdzi, factor,
dz_pf, dz_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,1), endAt(nx,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,1), endAt(nx+1,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(1,1), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
#define TRIDIAG_LU_DECOMPOSE( l, d, u, a, nz_e ) \
do k = nz_e-1, 1, -1 `\
d(k,i,j) = d(k,i,j) - u(k,i,j) / d(k+1,i,j) * l(k+1,i,j) `\
a(k,i,j) = a(k,i,j) - u(k,i,j) / d(k+1,i,j) * a(k+1,i,j) `\
integer(4), intent(in) :: i, j
integer(4), intent(in) :: nz_e
integer(4) :: k
TRIDIAG_LU_DECOMPOSE( l, d, u, a, nz_e )
#define TRIDIAG_SOLVE( l, d, a, nz_e ) \
a(1,i,j) = a(1,i,j)/d(1,i,j) `\
do k = 2, nz_e `\
a(k,i,j) = ( a(k,i,j) - l(k,i,j) * a(k-1,i,j) ) / d(k,i,j) `\
integer(4), intent(in) :: i, j
integer(4), intent(in) :: nz_e
integer(4) :: k
TRIDIAG_SOLVE( l, d, a, nz_e )
integer(4), intent(in)  :: id_qke, id_tsq, id_qsq, id_cov
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rjd_pf, dens_ptb, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rqa_v(k,i,j,it_calc,id_qke) = max(rqa_v(k,i,j,it_calc,id_qke), qke_min * densrjd )
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
rqa_v(k,i,j,it_calc,id_qke) = min(max(rqa_v(k,i,j,it_calc,id_qke), qke_min * densrjd), qke_max * densrjd)
rqa_v(k,i,j,it_calc,id_tsq) = min(max(rqa_v(k,i,j,it_calc,id_tsq), tsq_min * densrjd), tsq_max * densrjd)
rqa_v(k,i,j,it_calc,id_qsq) = min(max(rqa_v(k,i,j,it_calc,id_qsq), qsq_min * densrjd), qsq_max * densrjd)
tq = sqrt(rqa_v(k,i,j,it_calc,id_tsq) * rqa_v(k,i,j,it_calc,id_qsq))
if(abs(rqa_v(k,i,j,it_calc,id_cov)) > tq) then
rqa_v(k,i,j,it_calc,id_cov) = sign( tq, rqa_v(k,i,j,it_calc,id_cov) )
@end parallelRegion
#define MAKE_MATRIX_TKE( i, j, l, d, u ) \
r = dz_pf(1,i,j) / dz_ph(1,i,j) `\
nu1 = dzidz_ph(1,i,j) * ( ( 2.0_rp - r ) * eddykm(1, i, j)+ r * eddykm(2, i, j)) `\
d(1, i, j) = 1.0_rp + dt * ( nu1 * dzidz_pf(1,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(1,i,j,id_qke)) / l_mix(1, i, j)) `\
u(1, i, j) = - dt * nu1 * dzidz_pf(2,i,j) `\
do k = 2, nz-1 `\
r = dz_pf(k-1,i,j) / dz_ph(k-1,i,j) `\
nu2 = dzidz_ph(k,i,j) * ( ( 2.0_rp - r ) * eddykm(k, i, j)+ r * eddykm(k+1, i, j)) `\
l(k, i, j) = -dt * nu1 * dzidz_pf(k-1,i,j) `\
d(k, i, j) = 1.0_rp `\ + dt * ( ( nu1 + nu2 ) * dzidz_pf(k ,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(k,i,j,id_qke)) / l_mix(k, i, j)) `\
u(k, i, j) = -dt * nu2 * dzidz_pf(k+1,i,j) `\
end do `\
l(nz, i, j) = - dt * nu2 * dzidz_pf(nz-1,i,j) `\
d(nz, i, j) = 1.0_rp + dt * ( nu2 * dzidz_pf(nz ,i,j) `\ + c_e_deardorff * sqrt(0.5_rp * qa(nz,i,j,id_qke)) / l_mix(nz, i, j))
integer(4), intent(in) :: i
integer(4), intent(in) :: j
integer(4) :: k
MAKE_MATRIX_TKE( i, j, l, d, u )
#define MAKE_MATRIX_W( i, j, l, d, u ) \
nu1 = dt * dzidz_pf(1,i,j) * eddykm(1,i,j) * ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) `\
nu2 = dt * dzidz_pf(2,i,j) * eddykm(2,i,j) * ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) `\
dens_h = ( 0.5_rp * ( dens_ref_f(1,i,j) + dens_ref_f(2,i,j) ) `\ + 0.5_rp * ( dens_ptb  (1,i,j) + dens_ptb  (2,i,j) ) ) `\
d(1,i,j) = dens_h + ( nu1 + nu2 ) * dzidz_ph(1,i,j) `\
u(1,i,j) =        -         nu2   * dzidz_ph(2,i,j) `\
nu1 = nu2 `\
do k = 2, nz_w-1 `\
nu2 = dt * eddykm(k+1,i,j) * dzidz_pf(k+1,i,j) * ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) `\
dens_h = ( 0.5_rp * ( dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) `\ + 0.5_rp * ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) ) ) `\
l(k,i,j) =        -   nu1         * dzidz_ph(k-1,i,j) `\
d(k,i,j) = dens_h + ( nu1 + nu2 ) * dzidz_ph(k  ,i,j) `\
u(k,i,j) =        -         nu2   * dzidz_ph(k+1,i,j) `\
nu1 = nu2 `\
end do `\
u(nz_w-1,i,j) = 0.0_rp `\
l(nz_w,i,j  ) = 0.0_rp `\
d(nz_w,i,j  ) = 0.5_rp * ( dens_ref_f(nz_w,i,j) + dens_ref_f(nz_w+1,i,j) ) `\ + 0.5_rp * ( dens_ptb  (nz_w,i,j) + dens_ptb  (nz_w+1,i,j) )
integer(4), intent(in) :: i
integer(4), intent(in) :: j
integer(4) :: k
MAKE_MATRIX_W( i, j, l, d, u )
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rqke_v, rqke,
dens_ptb, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn), endAt(nx_mx,nx_mx), template(TIGHT_STENCIL)}
do k = nz_mn, nz_mx
rqke(k,i,j) = ( dens_ref_f(k,i,j) + dens_ptb(k,i,j) ) * qa(k,i,j,id_qke)
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tend_rqke_v(k,i,j) = 0.0_rp
@end parallelRegion
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rqke_v,
rjd_pf,
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tend_rqke_v(k,i,j) = 2.0_rp * tend_rqke_v(k,i,j) * rjd_pf(k,i,j)
@end parallelRegion
integer(4)              :: k
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l, tend_rqke_v,
dens_ptb, vel_z, dens_ref_f, rjd_ph, dzidz_pf, dzidz_ph,
dz_pf, dz_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l, d, u, tend_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
MAKE_MATRIX_TKE( i, j, l, d, u )
TRIDIAG_LU_DECOMPOSE( l, d, u, tend_rqke_v, nz )
TRIDIAG_SOLVE( l, d, tend_rqke_v, nz )
a1 = ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) * eddykm(1,i,j) * dzidz_pf(1,i,j)
a2 = ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) * eddykm(2,i,j) * dzidz_pf(2,i,j)
e1 = ( dens_ref_f(1,i,j) + dens_ptb(1,i,j) ) * qa(1,i,j,id_qke) * one_third
e2 = ( dens_ref_f(2,i,j) + dens_ptb(2,i,j) ) * qa(2,i,j,id_qke) * one_third
do k = 1, nz_w-1
tend_z(k) = ( a2 * ( vel_z(k+1,i,j) - vel_z(k  ,i,j) ) - e2 - a1 * ( vel_z(k  ,i,j) - vel_z(k-1,i,j) ) + e1 ) * dzidz_ph(k,i,j)
a1 = a2
a2 = ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) * eddykm(k+1,i,j) * dzidz_pf(k+1,i,j)
e1 = e2
e2 = ( dens_ref_f(k+1,i,j) + dens_ptb(k+1,i,j) ) * qa(k+1,i,j,id_qke) * one_third
tend_z(nz_w) = 0.0_rp
MAKE_MATRIX_W( i, j, l, d, u )
TRIDIAG_LU_DECOMPOSE( l, d, u, tend_z, nz_w )
TRIDIAG_SOLVE( l, d, tend_z, nz_w )
do k = 1, nz_w
tend_mom_z_v_l(k,i,j) = tend_mom_z_v_l(k,i,j) + tend_z(k) * ( 0.5_rp * ( dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) + 0.5_rp * ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) ) ) * rjd_ph(k,i,j)
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1314, combined=866, changed=268, unchanged=598, subroutine_definitions=9, calls=0, imports=31, data_definitions=0, save=0, parameter=1, openmp=0, style=6, parallel_loops=2, device_data_init=0, implementation_scheme=6, commented=1, radiation=0, storage_order=0, data_spec=39, other=173)
========== pbl_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pbl_vars.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pbl_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=11, combined=11, changed=1, unchanged=10, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== physics =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/physics.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/physics.f90
@domainDependant{domName(k, i, j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_pf, tend_mom_y_pf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf
tend_rmpt_ptb_v_l, tend_dens_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_l
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf,
tend_rmpt_ptb_v_l, tend_dens_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l,
dens_ptb, vel_x, vel_y, vel_z, ptemp, mptmp,
dens_ref_f,
rjd_pf, rjd_uf, rjd_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l, qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_pf, tend_mom_y_pf
@end domainDependant
end subroutine
integer(4):: i, j, k
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_sflux_rqv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf, tend_wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg
@end domainDependant
stop 2
stop 2
stop 2
stop 2
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk
@end domainDependant
else if  ( isw_pbl == isw_pbl_deardorff ) then
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
!pgi$r novector
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present)}
temp, rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wd_qx, wd_qnx,
denfac, dens_a, pres,
wdrop_qx, wdrop_qnx,
cfl_reached, dt_rk_rest
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_a
@end domainDependant
end subroutine
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
densrjd, tend_ptemp, tend_qa, pres_wk, dens_wk
@end domainDependant
@domainDependant{attribute(autoDom, present)}
pres_ptb, temp, dens_ptb, ptemp, qa, exner, mptmp, tend_rqa_v_a, tend_rmpt_ptb_v_a, tend_dens_ptb_v_a,
dens_ref_f, pres_ref_f, rjd_pf
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_ptemp(:) = 0._rp
tend_qa(:,:) = 0._rp
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_rmpt_ptb_v_a(k,i,j) = densrjd(k) * ( tend_ptemp(k) * ( 1._rp + r608 * qa(k,i,j,id_qv) - qa(k,i,j,id_qc) - qa(k,i,j,id_qr) - qa(k,i,j,id_qi) - qa(k,i,j,id_qs) - qa(k,i,j,id_qg) - qa(k,i,j,id_qh)) + ptemp(k,i,j) * (r608 * tend_qa(k,id_qv) - tend_qa(k,id_qc) - tend_qa(k,id_qr) - tend_qa(k,id_qi) - tend_qa(k,id_qs) - tend_qa(k,id_qg) - tend_qa(k,id_qh)) ) + mptmp(k,i,j) * tend_dens_ptb_v_a(k,i,j)
@end parallelRegion
end subroutine
integer(4) :: i, j, k
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
vel_x, vel_y, vel_z, tend_dens_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a
@end domainDependant
if ( isw_mp == isw_mp_pp_warmrain .or. isw_mp == isw_mp_pp_coldrain .or. isw_mp == isw_mp_pp_nhm_m40 .or. isw_mp == isw_mp_pp_nhm_0 .or. isw_mp == isw_mp_pp_nhm_m1 .or. isw_mp == isw_mp_pp_nhm_m2 .or. isw_mp == isw_mp_pp_ext_wsm6 .or. isw_mp == isw_mp_pp_ext_wdm6 .or. isw_mp == isw_mp_pp_ext_thompson .or. isw_mp == isw_mp_pp_ext_morr_two_moment ) then
stop 2
@parallelRegion{appliesTo(CPU), domName(i,j), domSize(nx,ny)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{domName(k, i, j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_pf, tend_mom_y_pf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf
tend_rmpt_ptb_v_l, tend_dens_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_l
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf,
tend_rmpt_ptb_v_l, tend_dens_ptb_v_l, tend_mom_x_v_l, tend_mom_y_v_l, tend_mom_z_v_l,
dens_ptb, vel_x, vel_y, vel_z, ptemp, mptmp,
dens_ref_f,
rjd_pf, rjd_uf, rjd_vf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l, qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_pf, tend_mom_y_pf
@end domainDependant
end subroutine
integer(4):: i, j, k
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_sflux_rqv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_ptemp, tend_qv, tend_qc, tend_qr, tend_qi, tend_qs, tend_qg, tend_qh, tend_mom_x_pf, tend_mom_y_pf, tend_wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg
@end domainDependant
stop 2
stop 2
stop 2
stop 2
@parallelRegion{appliesTo(CPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk, tend_mom_x_v_rk, tend_mom_y_v_rk, tend_mom_z_v_rk
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk
@end domainDependant
else if  ( isw_pbl == isw_pbl_deardorff ) then
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
!pgi$r novector
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present)}
temp, rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
wd_qx, wd_qnx,
denfac, dens_a, pres,
wdrop_qx, wdrop_qnx,
cfl_reached, dt_rk_rest
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_a
@end domainDependant
end subroutine
integer(4), intent(in) :: i, j
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
densrjd, tend_ptemp, tend_qa, pres_wk, dens_wk
@end domainDependant
@domainDependant{attribute(autoDom, present)}
pres_ptb, temp, dens_ptb, ptemp, qa, exner, mptmp, tend_rqa_v_a, tend_rmpt_ptb_v_a, tend_dens_ptb_v_a,
dens_ref_f, pres_ref_f, rjd_pf
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_ptemp(:) = 0._rp
tend_qa(:,:) = 0._rp
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
tend_rmpt_ptb_v_a(k,i,j) = densrjd(k) * ( tend_ptemp(k) * ( 1._rp + r608 * qa(k,i,j,id_qv) - qa(k,i,j,id_qc) - qa(k,i,j,id_qr) - qa(k,i,j,id_qi) - qa(k,i,j,id_qs) - qa(k,i,j,id_qg) - qa(k,i,j,id_qh)) + ptemp(k,i,j) * (r608 * tend_qa(k,id_qv) - tend_qa(k,id_qc) - tend_qa(k,id_qr) - tend_qa(k,id_qi) - tend_qa(k,id_qs) - tend_qa(k,id_qg) - tend_qa(k,id_qh)) ) + mptmp(k,i,j) * tend_dens_ptb_v_a(k,i,j)
@end parallelRegion
end subroutine
integer(4) :: i, j, k
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
vel_x, vel_y, vel_z, tend_dens_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a
@end domainDependant
if ( isw_mp == isw_mp_pp_warmrain .or. isw_mp == isw_mp_pp_coldrain .or. isw_mp == isw_mp_pp_nhm_m40 .or. isw_mp == isw_mp_pp_nhm_0 .or. isw_mp == isw_mp_pp_nhm_m1 .or. isw_mp == isw_mp_pp_nhm_m2 .or. isw_mp == isw_mp_pp_ext_wsm6 .or. isw_mp == isw_mp_pp_ext_wdm6 .or. isw_mp == isw_mp_pp_ext_thompson .or. isw_mp == isw_mp_pp_ext_morr_two_moment ) then
stop 2
@parallelRegion{appliesTo(CPU), domName(i,j), domSize(nx,ny)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=777, combined=646, changed=271, unchanged=375, subroutine_definitions=13, calls=11, imports=29, data_definitions=0, save=0, parameter=0, openmp=0, style=14, parallel_loops=0, device_data_init=2, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=37, other=164)
========== physics_set_qa =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/physics_set_qa.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/physics_set_qa.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=154, combined=131, changed=2, unchanged=129, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== pp_interface =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/pp_interface.h90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/pp_interface.f90
@domainDependant{attribute(autoDom, host)}
vz_f, vz_h, zrp
@end domainDependant
end subroutine
end subroutine
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dns_a, denfac
@end domainDependant
if ( isw_mp == isw_mp_pp_nhm_m40 .or. isw_mp == isw_mp_pp_nhm_0   .or. isw_mp == isw_mp_pp_nhm_m1  .or. isw_mp == isw_mp_pp_nhm_m2 ) then
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
denfac(k) = 0.0d0
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx, temp,
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dns_a, wdrop_qx, wdrop_qnx,
wd_qx, wd_qnx,
pres, denfac,
tv_qx, tv_qnx, r_dns_a, qnx_nhm,
dt_rk_rest, cfl_reached
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@exit
@end parallelRegion
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@exit
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
nprojc, idate_ini
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
iskind_lc, u_lc, v_lc, w_lc, pt_lc, qv_lc, qc_lc, qr_lc, qi_lc, qs_lc, z_f_lc, z_h_lc, prs_lc, qke_lc, tsq_lc, qsq_lc, cov_lc, temp_lc, ozon_lc, coefc_lc, ttrans_lc, rlong_lc, rshrt_lc
dns_a_lc, exner_lc, pai_surf, p_surf, r_exner_surf, dns_lowest, qsatg, dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex,
tsq_new_lc, qsq_new_lc, cov_new_lc,
dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p, gpf, gph, gdp, dfm, dfh, fktg_surf_lc, roctg_surf_lc, fktg_lc, roctg_lc,
taux_ex, tauy_ex, ftl_ex, fqw_ex
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im
wg_lc, beta_lc, flug_lc
ztemp, tlev_out, cvrr, cwcr, cicr, avisb, avisd, anirb, anird, solar, dlong, ulwb, rlongn, rshrtn
tend_qv_phys, tend_qc_phys, tend_qr_phys, tend_qi_phys, tend_qs_phys
tend_u_pbl_lc, tend_v_pbl_lc, tend_pt_pbl_lc, tend_pt_rad_lc, tend_qv_pbl_lc, tend_qc_pbl_lc, tend_qi_pbl_lc, tend_qke_pbl_lc, tend_tsq_pbl_lc, tend_qsq_pbl_lc, tend_cov_pbl_lc
nca_lc, precp_rate_cnv_lc, precp_rate_cnv_r_lc, precp_rate_cnv_s_lc, cldtop_lc, cldbase_lc, abe_out_lc, lcl_temp_lc, w0avg_lc, tend_pt_cnv_lc, tend_qv_cnv_lc, tend_qc_cnv_lc, tend_qr_cnv_lc, tend_qi_cnv_lc, tend_qs_cnv_lc
dz_f_cnv, clat, clon, prep_rate, aod_lc, fsand_lc, fclay_lc, tlcvr_lc,
tout1, tend_u_geo_lc, tend_v_geo_lc,
aas, bbs, ccs, pps,
avisb_tile, avisd_tile, anirb_tile, anird_tile, tg_surf,
l_mo_inv_surf, ust_surf, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile, taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im,
rhoa_ov_rho
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_sflux_rqv, z_g, flmu, flmv, flsh, fllh, ave_flsh, ave_fllh, ptgrd, qvgrd,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, cll, clm, clh, cla,
aod, albed, sl, fsand, fclay,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
cldbase, cldtop, abe_out, lcl_temp, nca,
rdzg_f, rdzg_h, f2hg_m, f2hg_p
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_pt, tend_qv, tend_qc, tend_qi, tend_qr, tend_qs, tend_mom_x_pf, tend_mom_y_pf, tend_rqke_v_l, tend_rtsq_v_l, tend_rqsq_v_l, tend_rcov_v_l, tend_wg
vel_x, vel_y, vel_z, ptemp, mptmp, exner, temp, dens_ptb, pres_ptb, ave_flug,
ozon, skind_tile, z_0m, z_0h, z_0q, beta, tlcvr,
dens_ref_f, pres_ref_f,
pz_pf, pz_ph, rjd_pf,
ust, coefc, ttrans, rlong, rshrt, l_mo_inv,
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv,
w0avg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
fktg, roctg, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
flat, flon, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg, wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(out) :: iskind_lc(ntlm)
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tg_lc, iskind_lc, tlcvr_lc
u_lc, v_lc, pt_lc, qv_lc, z_f_lc, fsand_lc, fclay_lc, r_exner_surf, p_surf, wg_lc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, ptemp, pz_pf, pz_ph, exner, mptmp, skind_tile, tlcvr,
fsand, fclay
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
end subroutine
@domainDependant{attribute(autoDom, present)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc,
z_0m, z_0h, z_0q,
l_mo_inv
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tg_lc,
iskind_lc, tlcvr_lc, qsatg, beta_lc,
u_lc, v_lc, pt_lc, qv_lc, z_f_lc, fsand_lc, fclay_lc, r_exner_surf, p_surf, wg_lc
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tg(0, tile_sea, i, j, it_calc) = min(tg(0, tile_sea, i, j, it_calc), tkelvn)
@end parallelRegion
@domainDependant{attribute(present, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
wg_ini
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
vz_f, vz_h, zrp
@end domainDependant
end subroutine
end subroutine
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dns_a, denfac
@end domainDependant
if ( isw_mp == isw_mp_pp_nhm_m40 .or. isw_mp == isw_mp_pp_nhm_0   .or. isw_mp == isw_mp_pp_nhm_m1  .or. isw_mp == isw_mp_pp_nhm_m2 ) then
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
denfac(k) = 0.0d0
@end parallelRegion
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx, temp,
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dns_a, wdrop_qx, wdrop_qnx,
wd_qx, wd_qnx,
pres, denfac,
tv_qx, tv_qnx, r_dns_a, qnx_nhm,
dt_rk_rest, cfl_reached
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@exit
@end parallelRegion
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
stop 2
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
@exit
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
nprojc, idate_ini
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i, j), domSize(nx, ny)}
iskind_lc, u_lc, v_lc, w_lc, pt_lc, qv_lc, qc_lc, qr_lc, qi_lc, qs_lc, z_f_lc, z_h_lc, prs_lc, qke_lc, tsq_lc, qsq_lc, cov_lc, temp_lc, ozon_lc, coefc_lc, ttrans_lc, rlong_lc, rshrt_lc
dns_a_lc, exner_lc, pai_surf, p_surf, r_exner_surf, dns_lowest, qsatg, dfm_surf, dfh_surf, dfq_surf, taux_surf_ex, tauy_surf_ex, ftl_surf_ex, fqw_surf_ex,
tsq_new_lc, qsq_new_lc, cov_new_lc,
dz_f, rdz_f, rdz_h, f2h_m, f2h_p, h2f_m, h2f_p, gpf, gph, gdp, dfm, dfh, fktg_surf_lc, roctg_surf_lc, fktg_lc, roctg_lc,
taux_ex, tauy_ex, ftl_ex, fqw_ex
taux_surf_im, tauy_surf_im, ftl_surf_im, fqw_surf_im
wg_lc, beta_lc, flug_lc
ztemp, tlev_out, cvrr, cwcr, cicr, avisb, avisd, anirb, anird, solar, dlong, ulwb, rlongn, rshrtn
tend_qv_phys, tend_qc_phys, tend_qr_phys, tend_qi_phys, tend_qs_phys
tend_u_pbl_lc, tend_v_pbl_lc, tend_pt_pbl_lc, tend_pt_rad_lc, tend_qv_pbl_lc, tend_qc_pbl_lc, tend_qi_pbl_lc, tend_qke_pbl_lc, tend_tsq_pbl_lc, tend_qsq_pbl_lc, tend_cov_pbl_lc
nca_lc, precp_rate_cnv_lc, precp_rate_cnv_r_lc, precp_rate_cnv_s_lc, cldtop_lc, cldbase_lc, abe_out_lc, lcl_temp_lc, w0avg_lc, tend_pt_cnv_lc, tend_qv_cnv_lc, tend_qc_cnv_lc, tend_qr_cnv_lc, tend_qi_cnv_lc, tend_qs_cnv_lc
dz_f_cnv, clat, clon, prep_rate, aod_lc, fsand_lc, fclay_lc, tlcvr_lc,
tout1, tend_u_geo_lc, tend_v_geo_lc,
aas, bbs, ccs, pps,
avisb_tile, avisd_tile, anirb_tile, anird_tile, tg_surf,
l_mo_inv_surf, ust_surf, taux_tile_ex, tauy_tile_ex, ftl_tile_ex, fqw_tile_ex, dfm_tile, dfh_tile, dfq_tile, taux_tile_im, tauy_tile_im, ftl_tile_im, fqw_tile_im,
rhoa_ov_rho
@end domainDependant
@domainDependant{attribute(autoDom, present)}
tend_sflux_rqv, z_g, flmu, flmv, flsh, fllh, ave_flsh, ave_fllh, ptgrd, qvgrd,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb, cll, clm, clh, cla,
aod, albed, sl, fsand, fclay,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird,
dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
cldbase, cldtop, abe_out, lcl_temp, nca,
rdzg_f, rdzg_h, f2hg_m, f2hg_p
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_pt, tend_qv, tend_qc, tend_qi, tend_qr, tend_qs, tend_mom_x_pf, tend_mom_y_pf, tend_rqke_v_l, tend_rtsq_v_l, tend_rqsq_v_l, tend_rcov_v_l, tend_wg
vel_x, vel_y, vel_z, ptemp, mptmp, exner, temp, dens_ptb, pres_ptb, ave_flug,
ozon, skind_tile, z_0m, z_0h, z_0q, beta, tlcvr,
dens_ref_f, pres_ref_f,
pz_pf, pz_ph, rjd_pf,
ust, coefc, ttrans, rlong, rshrt, l_mo_inv,
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv,
w0avg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
fktg, roctg, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
flat, flon, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg, wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
integer(4), intent(out) :: iskind_lc(ntlm)
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tg_lc, iskind_lc, tlcvr_lc
u_lc, v_lc, pt_lc, qv_lc, z_f_lc, fsand_lc, fclay_lc, r_exner_surf, p_surf, wg_lc
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, ptemp, pz_pf, pz_ph, exner, mptmp, skind_tile, tlcvr,
fsand, fclay
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny)}
@end parallelRegion
end subroutine
@domainDependant{attribute(autoDom, present)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc,
z_0m, z_0h, z_0q,
l_mo_inv
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
tg_lc,
iskind_lc, tlcvr_lc, qsatg, beta_lc,
u_lc, v_lc, pt_lc, qv_lc, z_f_lc, fsand_lc, fclay_lc, r_exner_surf, p_surf, wg_lc
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tg(0, tile_sea, i, j, it_calc) = min(tg(0, tile_sea, i, j, it_calc), tkelvn)
@end parallelRegion
@domainDependant{attribute(present, autoDom)}
fsand, fclay
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
wg_ini
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1440, combined=1230, changed=291, unchanged=939, subroutine_definitions=16, calls=25, imports=34, data_definitions=0, save=0, parameter=0, openmp=0, style=18, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=1, radiation=0, storage_order=0, data_spec=14, other=179)
========== radiation =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/radiation.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/radiation.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=11, combined=11, changed=1, unchanged=10, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== smagorinsky_2d =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/smagorinsky_2d.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/smagorinsky_2d.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=291, combined=242, changed=1, unchanged=241, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== surface =============
refpath: branches/hybrid/asuca-kij/HybridSources/PhysicsInterface/surface.f90, hfpath: branches/reference/asuca-kij/Src/PhysicsInterface/surface.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=15, combined=15, changed=1, unchanged=14, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== const =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/const.h90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/const.f90

rdp0xx = gasr * p00 ** ( -rdvcp )

rdp0xx = gasr * p00 ** ( -rdvcp )
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=35, combined=35, changed=30, unchanged=5, subroutine_definitions=1, calls=0, imports=1, data_definitions=0, save=1, parameter=24, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=2)
========== constfile_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/constfile_vars.h90, hfpath: branches/reference/asuca-kij/Src/Setup/constfile_vars.f90
@domainDependant{domName(i, j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
fsand, fclay,
albed, urban,
aod, skind, sl
@end domainDependant
@domainDependant{domName(k,i,j), domSize(ntlm,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q, beta
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ozon
@end domainDependant
@domainDependant{domName(spec,k,i,j), domSize(0:ngm,ntlm,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
fktg,roctg
@end domainDependant
@domainDependant{domName(i, j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
fsand, fclay,
albed, urban,
aod, skind, sl
@end domainDependant
@domainDependant{domName(k,i,j), domSize(ntlm,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q, beta
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ozon
@end domainDependant
@domainDependant{domName(spec,k,i,j), domSize(0:ngm,ntlm,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
fktg,roctg
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=57, combined=56, changed=23, unchanged=33, subroutine_definitions=1, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=7, other=14)
========== dvar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/dvar.h90, hfpath: branches/reference/asuca-kij/Src/Setup/dvar.f90
@domainDependant{domName(i,j), domSize(0:nx+1,0:ny+1), attribute(host)}
psea, psrf
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, pres_ptb
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_zi_v
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp, temp
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(0:nz,nx,ny,0:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
wdrop_qa
@end domainDependant
@domainDependant{domName(i,j), domSize(0:nx+1,0:ny+1), attribute(host)}
psea, psrf
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_x
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_y
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
flux_z
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, pres_ptb
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_zi_v
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mptmp, dens_ptb, vel_x, vel_y, vel_z, ptemp, temp
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,0:id_qa_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(0:nz,nx,ny,0:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
wdrop_qa
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=85, combined=85, changed=49, unchanged=36, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=18, other=30)
========== fvar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/fvar.h90, hfpath: branches/reference/asuca-kij/Src/Setup/fvar.f90
@domainDependant{domName(k,i,j,it), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(it1,i,j,it2), domSize(0:1,0:nx+1,0:ny+1,3), attribute(host), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{domName(it1,it2,i,j,it3), domSize(0:ngm,ntlm,0:nx+1,0:ny+1,3), attribute(host), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{domName(k,i,j,it), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{domName(k,i,j,it1,it2), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,3,0:id_qa_e), attribute(host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{domName(it1,i,j,it2), domSize(0:1,0:nx+1,0:ny+1,3), attribute(host), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
wg
@end domainDependant
@domainDependant{domName(it1,it2,i,j,it3), domSize(0:ngm,ntlm,0:nx+1,0:ny+1,3), attribute(host), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@domainDependant{}
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=94, combined=93, changed=32, unchanged=61, subroutine_definitions=1, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=12, other=16)
========== gpv =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/gpv.h90, hfpath: branches/reference/asuca-kij/Src/Setup/gpv.f90
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
temp(:,:,:) = 0.0_rp
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
temp(:,:,:) = 0.0_rp
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1069, combined=1065, changed=51, unchanged=1014, subroutine_definitions=16, calls=1, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=2, other=27)
========== grid =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/grid.h90, hfpath: branches/reference/asuca-kij/Src/Setup/grid.f90
@domainDependant{domName(it1), domSize(ngm), attribute(host)}
z_g
@end domainDependant
@domainDependant{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
g_flat
@end domainDependant
@domainDependant{domName(i,j,it1), domSize(nx_mn:nx_mx,ny_mn:ny_mx,4), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
flat, flon, sin_flat
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh,
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_pf, dzidz_ph, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph
rjd_pf, rdzidz_ph, rjd_ph, rjd_uf, rjd_vf
dxidz_uf, dyidz_vf,
dz_ph,
pz_ph, pz_pf
dz_pf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dz_ph, dz_pf, pz_pf, pz_ph
@end domainDependant
@domainDependant{domName(it1), domSize(ngm), attribute(host)}
z_g
@end domainDependant
@domainDependant{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
g_flat
@end domainDependant
@domainDependant{domName(i,j,it1), domSize(nx_mn:nx_mx,ny_mn:ny_mx,4), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
flat, flon, sin_flat
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rdz_p, rdz_wp, rdz_wm
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh,
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_pf, dzidz_ph, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph
rjd_pf, rdzidz_ph, rjd_ph, rjd_uf, rjd_vf
dxidz_uf, dyidz_vf,
dz_ph,
pz_ph, pz_pf
dz_pf
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dz_ph, dz_pf, pz_pf, pz_ph
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=636, combined=563, changed=74, unchanged=489, subroutine_definitions=3, calls=32, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=1, other=34)
========== metrics =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/metrics.h90, hfpath: branches/reference/asuca-kij/Src/Setup/metrics.f90
@domainDependant{domName(i, j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh,
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_pf, dzidz_ph, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph
rjd_pf, rdzidz_ph, rjd_ph, rjd_uf, rjd_vf
jd_uf, jd_vf, jd_pf, jd_ph,
dxidz_uf, dyidz_vf,
dz_ph,
pz_ph, pz_pf,
dz_pf
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{domName(i, j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), attribute(host)}
dx_pf, dx_uf, dy_pf, dy_vf
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dxidx_pf, dyidx_uf, dzidx_uh, dxidy_vf, dyidy_pf, dzidy_vh,
dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_pf, dzidz_ph, dzidx_uf, dzidy_vf, dxidz_ph, dyidz_ph
rjd_pf, rdzidz_ph, rjd_ph, rjd_uf, rjd_vf
jd_uf, jd_vf, jd_pf, jd_ph,
dxidz_uf, dyidz_vf,
dz_ph,
pz_ph, pz_pf,
dz_pf
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1451, combined=1420, changed=143, unchanged=1277, subroutine_definitions=13, calls=33, imports=1, data_definitions=1, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=37, other=54)
========== monit_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/monit_vars.h90, hfpath: branches/reference/asuca-kij/Src/Setup/monit_vars.f90
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
psea_out, psrf_out, flsh, fllh, cll, clm, clh, cla, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd,
sflux_rqv, ave_flsh, ave_fllh,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb
@end domainDependant
@domainDependant{domName(i,j), domSize(0:nx+1,0:ny+1), attribute(host)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:ngm,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ave_flug
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, rmpt_ptb, pres
@end domainDependant
@domainDependant{domName(k,i,j,out3d_it), domSize(nz_mn:nz_mx,nx,ny,n_out3d), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@domainDependant{domName(i,j,dom1), domSize(nx,ny,0:id_mp_prc_e), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
precp_qa
@end domainDependant
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
psea_out, psrf_out, flsh, fllh, cll, clm, clh, cla, fsiir, fsivs, fsiwv, flmu, flmv, ptgrd, qvgrd,
sflux_rqv, ave_flsh, ave_fllh,
ave_dswt, ave_uswt, ave_ulwt, ave_dswb, ave_uswb, ave_dlwb, ave_ulwb
@end domainDependant
@domainDependant{domName(i,j), domSize(0:nx+1,0:ny+1), attribute(host)}
u_10, v_10, t_sfc, ttd_sfc, rh_sfc, qv_sfc
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:ngm,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ave_flug
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, rmpt_ptb, pres
@end domainDependant
@domainDependant{domName(k,i,j,out3d_it), domSize(nz_mn:nz_mx,nx,ny,n_out3d), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
out3d
@end domainDependant
@domainDependant{domName(i,j,dom1), domSize(nx,ny,0:id_mp_prc_e), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
precp_qa
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=68, combined=68, changed=53, unchanged=15, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=32, other=20)
========== nrtype =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/nrtype.h90, hfpath: branches/reference/asuca-kij/Src/Misc/nrtype.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=7, combined=7, changed=1, unchanged=6, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== optswitch_tool =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/optswitch_tool.f90, hfpath: branches/reference/asuca-kij/Src/Misc/optswitch_tool.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=202, combined=202, changed=1, unchanged=201, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== parameter_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/parameter_vars.h90, hfpath: branches/reference/asuca-kij/Src/Setup/parameter_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=149, combined=149, changed=1, unchanged=148, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== prm =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/prm.h90, hfpath: branches/reference/asuca-kij/Src/Setup/prm.f90
integer(4), public :: nx0
integer(4), public :: ny0
integer(4), public :: nx
integer(4), public :: ny
integer(4), public :: np
integer(4), public :: nz
integer(4), public :: nz_pbl
integer(4), public :: nz_shcu
integer(4), public :: ngm
integer(4), public :: nx_mgn
integer(4), public :: ny_mgn
integer(4), public :: np_mgn
integer(4), public :: nz_mgn
integer(4), public :: mgn_x
integer(4), public :: mgn_y
integer(4), public :: mgn_p
integer(4), public :: mgn_z
integer(4), public :: nx0_mn
integer(4), public :: nx0_mx
integer(4), public :: ny0_mn
integer(4), public :: ny0_mx
integer(4), public :: nx_mn
integer(4), public :: nx_mx
integer(4), public :: ny_mn
integer(4), public :: ny_mx
integer(4), public :: np_mn
integer(4), public :: np_mx
integer(4), public :: nz_mn
integer(4), public :: nz_mx
integer(4), public :: basex
integer(4), public :: basey
integer(4), public :: nx_mx_maxval
integer(4), public :: ny_mx_maxval
integer(4), public :: nx_u
integer(4), public :: ny_v
integer(4), public :: nz_w
integer(4), public :: nx0
integer(4), public :: ny0
integer(4), public :: nx
integer(4), public :: ny
integer(4), public :: np
integer(4), public :: nz
integer(4), public :: nz_pbl
integer(4), public :: nz_shcu
integer(4), public :: ngm
integer(4), public :: nx_mgn
integer(4), public :: ny_mgn
integer(4), public :: np_mgn
integer(4), public :: nz_mgn
integer(4), public :: mgn_x
integer(4), public :: mgn_y
integer(4), public :: mgn_p
integer(4), public :: mgn_z
integer(4), public :: nx0_mn
integer(4), public :: nx0_mx
integer(4), public :: ny0_mn
integer(4), public :: ny0_mx
integer(4), public :: nx_mn
integer(4), public :: nx_mx
integer(4), public :: ny_mn
integer(4), public :: ny_mx
integer(4), public :: np_mn
integer(4), public :: np_mx
integer(4), public :: nz_mn
integer(4), public :: nz_mx
integer(4), public :: basex
integer(4), public :: basey
integer(4), public :: nx_mx_maxval
integer(4), public :: ny_mx_maxval
integer(4), public :: nx_u
integer(4), public :: ny_v
integer(4), public :: nz_w
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=59, combined=59, changed=37, unchanged=22, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=36)
========== ref =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/ref.h90, hfpath: branches/reference/asuca-kij/Src/Setup/ref.f90
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f, dens_ref_f_x, dens_ref_f_y
@end domainDependant
@domainDependant{}
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=28, combined=28, changed=14, unchanged=14, subroutine_definitions=1, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=5, other=5)
========== rw3d =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/rw3d.h90, hfpath: branches/reference/asuca-kij/Src/Setup/rw3d.f90
public read3d_convkij, read3d_convkij_compile_time_defined_order, write3d_convijk, write3d_convijk_compile_time_defined_order, write_const, write_svar, write_ib, write_ref, read_const, read_ref, read_ini, read_svar
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
sflux_rqv,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
ave_dswb, ave_uswb, ave_dswt, ave_uswt, ave_dlwb, ave_ulwt, ave_ulwb, ave_flsh, ave_fllh, ave_flug, dens_ref_v_2d_previous,
mom_xi_v_2d, mom_yi_v_2d, flux_z0_prc,
precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
cldbase, cldtop, abe_out, lcl_temp, nca
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
wg_ini,
ust, rlong, rshrt, coefc, ttrans,
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_rate_qa, precp_qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom)}
sflux_rqv
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
wg_ini
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
public read3d_convkij, read3d_convkij_compile_time_defined_order, write3d_convijk, write3d_convijk_compile_time_defined_order, write_const, write_svar, write_ib, write_ref, read_const, read_ref, read_ini, read_svar
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
sflux_rqv,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswb, uswb, dswt, uswt, dswbcs, uswbcs, uswtcs, dlwb, ulwt, dlwbcs, ulwtcs, coefccs, ttranscs,
ave_dswb, ave_uswb, ave_dswt, ave_uswt, ave_dlwb, ave_ulwt, ave_ulwb, ave_flsh, ave_fllh, ave_flug, dens_ref_v_2d_previous,
mom_xi_v_2d, mom_yi_v_2d, flux_z0_prc,
precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
cldbase, cldtop, abe_out, lcl_temp, nca
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
wg_ini,
ust, rlong, rshrt, coefc, ttrans,
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_rate_qa, precp_qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
skind_tile, tlcvr, z_0m, z_0h, z_0q
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(host, autoDom)}
sflux_rqv
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv,
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp,
wg_ini
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=826, combined=726, changed=169, unchanged=557, subroutine_definitions=7, calls=64, imports=8, data_definitions=2, save=0, parameter=0, openmp=0, style=4, parallel_loops=0, device_data_init=0, implementation_scheme=4, commented=1, radiation=0, storage_order=0, data_spec=0, other=79)
========== svar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/svar.h90, hfpath: branches/reference/asuca-kij/Src/Setup/svar.f90
@domainDependant{domName(i, j), domSize(nx,ny), attribute(host)}
dswb, uswb, dswt, uswt, dlwb, ulwt, precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswbcs, uswbcs, uswtcs,
dlwbcs, ulwtcs, coefccs, ttranscs,
cldbase, cldtop, abe_out, lcl_temp, nca
@end domainDependant
@domainDependant{domName(i, j), domSize(0:nx+1,0:ny+1), attribute(host)}
mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{domName(k, i,j), domSize(0:1, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
wg_ini
@end domainDependant
@domainDependant{domName(k, i,j), domSize(ntlm, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ust
@end domainDependant
@domainDependant{domName(k, i,j), domSize(ntlm, 0:nx+1, 0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz+2, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
coefc, ttrans
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz+1, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rlong, rshrt
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp
@end domainDependant
@domainDependant{domName(k, i,j,id), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,id_mp_s:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{domName(i, j), domSize(nx,ny), attribute(host)}
dswb, uswb, dswt, uswt, dlwb, ulwt, precp_rate_cnv, precp_rate_cnv_r, precp_rate_cnv_s,
zmean, tcvr, tcwc, rvisb, rvisd, rnirb, rnird, dswbcs, uswbcs, uswtcs,
dlwbcs, ulwtcs, coefccs, ttranscs,
cldbase, cldtop, abe_out, lcl_temp, nca
@end domainDependant
@domainDependant{domName(i, j), domSize(0:nx+1,0:ny+1), attribute(host)}
mom_xi_v_2d, mom_yi_v_2d
@end domainDependant
@domainDependant{domName(k, i,j), domSize(0:1, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
wg_ini
@end domainDependant
@domainDependant{domName(k, i,j), domSize(ntlm, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ust
@end domainDependant
@domainDependant{domName(k, i,j), domSize(ntlm, 0:nx+1, 0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
l_mo_inv
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz+2, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
coefc, ttrans
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz+1, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
rlong, rshrt
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz, nx, ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_pt_cnv, tend_qv_cnv, tend_qc_cnv, tend_qi_cnv, tend_qr_cnv, tend_qs_cnv, w0avg
@end domainDependant
@domainDependant{domName(k, i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb_damp, mptmp_damp, vel_x_damp, vel_y_damp, vel_z_damp
@end domainDependant
@domainDependant{domName(k, i,j,id), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx,id_mp_s:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
@domainDependant{}
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=179, combined=179, changed=64, unchanged=115, subroutine_definitions=4, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=16, other=41)
========== temp_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/temp_vars.h90, hfpath: None

module temp_vars
@domainDependant{domName(k,i,j), domSize(nz-1,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
a, b, c, q
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
mptmp_h
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v_rk_s
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
momz
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx-1,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_x
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx-1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_y
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_z
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
rdensjd
@end domainDependant
contains
implicit none
end module temp_vars

module temp_vars
@domainDependant{domName(k,i,j), domSize(nz-1,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
a, b, c, q
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
mptmp_h
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
flux_rmpt_ptb_v, total_tend_dens_ptb_v, tend_rmpt_ptb_v_adv, tend_dens_ptb_v_adv
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v_rk_s
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
momz
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx-1,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_x
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx-1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_y
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_z
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_mn:nz_mx,nx_mn:nx_mx,ny_mn:ny_mx), attribute(host), accPP(AT_TEMP), domPP(DOM_TEMP)}
rdensjd
@end domainDependant
contains
implicit none
end module temp_vars
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=73, combined=73, changed=73, unchanged=0, subroutine_definitions=1, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=0, radiation=0, storage_order=0, data_spec=32, other=35)
========== tendvar =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/tendvar.h90, hfpath: branches/reference/asuca-kij/Src/Setup/tendvar.f90
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
tend_sflux_rqv
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:1,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_wg
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx_u,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v_l, tend_mom_x_v_rk, tend_mom_x_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny_v), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_y_v_l, tend_mom_y_v_rk, tend_mom_y_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_w,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l, tend_mom_z_v_rk, tend_mom_z_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk_s, tend_rmpt_ptb_v_l, tend_rmpt_ptb_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_l, tend_dens_ptb_v_a
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz,nx,ny,0:id_qa_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz,nx,ny,0:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_a
@end domainDependant
@domainDependant{domName(i,j,id), domSize(nx,ny,0:id_mp_prc_e), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_rate_qa, tend_precp_qa
@end domainDependant
@domainDependant{domName(dom1,dom2,i,j), domSize(0:ngm,ntlm,nx,ny), attribute(host), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg
@end domainDependant
@domainDependant{domName(i,j), domSize(nx,ny), attribute(host)}
tend_sflux_rqv
@end domainDependant
@domainDependant{domName(k,i,j), domSize(0:1,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_wg
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx_u,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_x_v_l, tend_mom_x_v_rk, tend_mom_x_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny_v), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_y_v_l, tend_mom_y_v_rk, tend_mom_y_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz_w,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_mom_z_v_l, tend_mom_z_v_rk, tend_mom_z_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_rmpt_ptb_v_rk, tend_dens_ptb_v_rk_s, tend_rmpt_ptb_v_l, tend_rmpt_ptb_v_a
@end domainDependant
@domainDependant{domName(k,i,j), domSize(nz,0:nx+1,0:ny+1), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_l, tend_dens_ptb_v_a
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz,nx,ny,0:id_qa_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l
@end domainDependant
@domainDependant{domName(k,i,j,id), domSize(nz,nx,ny,0:id_mp_e), attribute(host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_a
@end domainDependant
@domainDependant{domName(i,j,id), domSize(nx,ny,0:id_mp_prc_e), attribute(host), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
tend_precp_rate_qa, tend_precp_qa
@end domainDependant
@domainDependant{domName(dom1,dom2,i,j), domSize(0:ngm,ntlm,nx,ny), attribute(host), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=85, combined=85, changed=57, unchanged=28, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=23, other=33)
========== timeset =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/timeset.h90, hfpath: branches/reference/asuca-kij/Src/Setup/timeset.f90
@domainDependant{attribute(host)}
idate_ini
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
logical, intent(in) :: after_rk_sed
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_root_sed, it_tend_sed, it_calc_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (after_rk_sed .and. timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_root_sed, it_tend_sed, it_calc_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present)}
dzidz_ph, dzidx_ph, dzidy_ph, jd_ph,
rdz_p, rdz_wp, rdz_wm,
temp, mom_zi_v, dens_ptb,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
denfac, dens_a, pres,
wdrop_qx, wdrop_qnx,
dt_sed, dt_rk_rest,
wd_qx, wd_qnx, cfl_reached
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dt_rk_sed, dt_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(host)}
idate_ini
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
@end parallelRegion
logical, intent(in) :: after_rk_sed
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_root_sed, it_tend_sed, it_calc_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (after_rk_sed .and. timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
it_root_sed, it_tend_sed, it_calc_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present)}
dzidz_ph, dzidx_ph, dzidy_ph, jd_ph,
rdz_p, rdz_wp, rdz_wm,
temp, mom_zi_v, dens_ptb,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx, qnx
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
denfac, dens_a, pres,
wdrop_qx, wdrop_qnx,
dt_sed, dt_rk_rest,
wd_qx, wd_qnx, cfl_reached
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached) then
@end parallelRegion
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
dt_rk_sed, dt_sed, dt_rk_rest
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if ( timestep_counter_sed == 1 .and. dt_rk_rest < dt_rk_rest_epsln ) then
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=518, combined=468, changed=65, unchanged=403, subroutine_definitions=2, calls=2, imports=11, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=49)
========== timeset_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Setup/timeset_vars.h90, hfpath: branches/reference/asuca-kij/Src/Setup/timeset_vars.f90
public :: timeset_vars_ini
integer(4), public :: it_calc
integer(4), public :: it_tend
integer(4), public :: it_root
@domainDependant{attribute(autoDom, host), domName(i,j), domSize(nx,ny)}
dt_rk_rest, dt_rk_sed, dt_sed, it_calc_sed, it_root_sed, it_tend_sed
@end domainDependant
contains
end subroutine
public :: timeset_vars_ini
integer(4), public :: it_calc
integer(4), public :: it_tend
integer(4), public :: it_root
@domainDependant{attribute(autoDom, host), domName(i,j), domSize(nx,ny)}
dt_rk_rest, dt_rk_sed, dt_sed, it_calc_sed, it_root_sed, it_tend_sed
@end domainDependant
contains
end subroutine
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=77, combined=77, changed=24, unchanged=53, subroutine_definitions=1, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=12, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=9)
========== checktool =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/checktool.h90, hfpath: branches/reference/asuca-kij/Src/Misc/checktool.f90
@domainDependant{attribute(autoDom, host)}
mpi_calc, mpi_request, mpi_status, mpi_comm_flg, flg_is_stop_gb
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ptb, pres_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ptb, vel_z, jd_ph, mom_zi_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc, mpi_request, mpi_status, mpi_comm_flg, flg_is_stop_gb
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ptb, pres_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ptb, vel_z, jd_ph, mom_zi_v
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=193, combined=176, changed=31, unchanged=145, subroutine_definitions=0, calls=0, imports=6, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=15, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=9)
========== checktool_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/checktool_vars.f90, hfpath: branches/reference/asuca-kij/Src/Misc/checktool_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=7, combined=7, changed=1, unchanged=6, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== ctime =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/ctime.f90, hfpath: branches/reference/asuca-kij/Src/Misc/ctime.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=111, combined=107, changed=1, unchanged=106, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== diagnose =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/diagnose.h90, hfpath: branches/reference/asuca-kij/Src/Util/diagnose.f90
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f_x, dens_ref_f_y, dens_ref_f,
vel_x, vel_y, vel_z,
dens_ptb, mptmp, exner, temp, ptemp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, dens_ptb_v, mom_x_v, mom_y_v, mom_z_v, rmpt_ptb_v
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
vel_x, vel_y, vel_z, dens_ptb, pres_ptb,
mptmp, exner, temp, ptemp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v,
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(present, autoDom)}
psea, psrf
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_xi_v, mom_yi_v, mom_zi_v, dens_ptb, pres_ptb, temp, mptmp, ptemp, exner
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ptemp, mptmp, exner, dens_ptb, jd_pf, dens_ref_f, rmpt_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TEMP), domPP(DOM_TEMP)}
rdensjd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, vel_x, vel_y, vel_z,
dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, jd_pf, mptmp, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
integer(4), intent(in) :: i, j
integer(4), intent(in) :: it_tend_sed
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
r_densjd, cfl_reached, dt_rk_rest, it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
qx(k)  = rqx_v(k,i,j,it_tend_sed) * r_densjd(k)
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, mptmp, ptemp, pres_ptb, temp, exner, vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, jd_uf, jd_vf, jd_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_x(k,i,j) = mom_x_v(k,i,j,it_root) * jd_uf(k,i,j)
mom_y(k,i,j) = mom_y_v(k,i,j,it_root) * jd_vf(k,i,j)
mom_z(k,i,j) = mom_z_v(k,i,j,it_root) * jd_ph(k,i,j)
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, pres_ptb, exner, mptmp, ptemp, temp,
dens_ptb_v_in, rmpt_ptb_v_in,
rmpt_ref_f, pres_ref_f, dens_ref_f,
jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), accPP(AT), domPP(DOM)}
rdensjd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
stop 2
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
stop 2
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f_x, dens_ref_f_y, dens_ref_f,
vel_x, vel_y, vel_z,
dens_ptb, mptmp, exner, temp, ptemp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, dens_ptb_v, mom_x_v, mom_y_v, mom_z_v, rmpt_ptb_v
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
vel_x, vel_y, vel_z, dens_ptb, pres_ptb,
mptmp, exner, temp, ptemp
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
rmpt_ptb_v,
mom_x_v, mom_y_v, mom_z_v,
dens_ptb_v,
qa
@end domainDependant
@domainDependant{attribute(host, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(present, autoDom)}
psea, psrf
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_xi_v, mom_yi_v, mom_zi_v, dens_ptb, pres_ptb, temp, mptmp, ptemp, exner
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(present, autoDom), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
ptemp, mptmp, exner, dens_ptb, jd_pf, dens_ref_f, rmpt_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TEMP), domPP(DOM_TEMP)}
rdensjd
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_xi_v, mom_yi_v, mom_zi_v, vel_x, vel_y, vel_z,
dens_ptb
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, jd_pf, mptmp, rmpt_ref_f, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
!pgi$r novector
integer(4), intent(in) :: i, j
integer(4), intent(in) :: it_tend_sed
logical, intent(in) :: cfl_reached
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx)}
qx
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}}
rqx_v
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx,ny)}
r_densjd, cfl_reached, dt_rk_rest, it_tend_sed
@end domainDependant
@parallelRegion{appliesTo(GPU), domName(i, j), domSize(nx, ny)}
if (cfl_reached .or. dt_rk_rest < dt_rk_rest_epsln) then
qx(k)  = rqx_v(k,i,j,it_tend_sed) * r_densjd(k)
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, mptmp, ptemp, pres_ptb, temp, exner, vel_x, vel_y, vel_z
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
mom_x, mom_y, mom_z, jd_uf, jd_vf, jd_ph
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
mom_x(k,i,j) = mom_x_v(k,i,j,it_root) * jd_uf(k,i,j)
mom_y(k,i,j) = mom_y_v(k,i,j,it_root) * jd_vf(k,i,j)
mom_z(k,i,j) = mom_z_v(k,i,j,it_root) * jd_ph(k,i,j)
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, pres_ptb, exner, mptmp, ptemp, temp,
dens_ptb_v_in, rmpt_ptb_v_in,
rmpt_ref_f, pres_ref_f, dens_ref_f,
jd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v_in
@end domainDependant
@domainDependant{attribute(autoDom, present), domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), accPP(AT), domPP(DOM)}
rdensjd
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
stop 2
stop 2
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
stop 2
stop 2
stop 2
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=749, combined=609, changed=220, unchanged=389, subroutine_definitions=14, calls=7, imports=16, data_definitions=0, save=0, parameter=0, openmp=0, style=9, parallel_loops=0, device_data_init=0, implementation_scheme=2, commented=1, radiation=0, storage_order=0, data_spec=8, other=163)
========== filetool =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/filetool.f90, hfpath: branches/reference/asuca-kij/Src/Misc/filetool.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=327, combined=318, changed=1, unchanged=317, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mapproj =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/mapproj.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mapproj.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=528, combined=501, changed=1, unchanged=500, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== restart =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/restart.f90, hfpath: branches/reference/asuca-kij/Src/Util/restart.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=39, combined=39, changed=1, unchanged=38, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== restart_vars =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/restart_vars.f90, hfpath: branches/reference/asuca-kij/Src/Util/restart_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=7, combined=7, changed=1, unchanged=6, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== rldamp =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/rldamp.h90, hfpath: branches/reference/asuca-kij/Src/Util/rldamp.f90
@domainDependant{domName(k, i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tz_dns, tz
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, vel_x, vel_y, vel_z, mptmp,
dens_ptb_damp, vel_x_damp, vel_y_damp, vel_z_damp, mptmp_damp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, mptmp, dens_ptb,
mptmp_damp,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, mptmp, dens_ptb,
mptmp_damp,
rjd_pf,
dens_ref_f
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, dens_ptb, dens_ptb_damp, rjd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, dens_ptb, dens_ptb_damp, rjd_pf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_x_damp,
rjd_uf,
dens_ref_f_x
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_x_damp,
rjd_uf,
dens_ref_f_x
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_u, ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_y_damp,
rjd_vf,
dens_ref_f_y
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_y_damp,
rjd_vf,
dens_ref_f_y
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_z_damp,
rjd_ph,
dens_ref_f
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_z_damp,
rjd_ph,
dens_ref_f
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, qa, dens_ptb,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, qa, dens_ptb,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{domName(k, i,j), domSize(nz,nx,ny), attribute(host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tz_dns, tz
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ptb, vel_x, vel_y, vel_z, mptmp,
dens_ptb_damp, vel_x_damp, vel_y_damp, vel_z_damp, mptmp_damp
@end domainDependant
@domainDependant{attribute(autoDom, host), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa, qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, mptmp, dens_ptb,
mptmp_damp,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, mptmp, dens_ptb,
mptmp_damp,
rjd_pf,
dens_ref_f
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, dens_ptb, dens_ptb_damp, rjd_pf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, dens_ptb, dens_ptb_damp, rjd_pf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), endAt(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_x_damp,
rjd_uf,
dens_ref_f_x
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_x_damp,
rjd_uf,
dens_ref_f_x
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_u, ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_y_damp,
rjd_vf,
dens_ref_f_y
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_y_damp,
rjd_vf,
dens_ref_f_y
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_z_damp,
rjd_ph,
dens_ref_f
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, p, dens_ptb,
vel_z_damp,
rjd_ph,
dens_ref_f
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, qa, dens_ptb,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_v, qa, dens_ptb,
rjd_pf,
dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa_damp
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx, ny), template(TIGHT_STENCIL)}
@end parallelRegion
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=409, combined=373, changed=123, unchanged=250, subroutine_definitions=6, calls=6, imports=8, data_definitions=0, save=0, parameter=0, openmp=0, style=6, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=2, other=94)
========== tmanage =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/tmanage.h90, hfpath: branches/reference/asuca-kij/Src/Util/tmanage.f90
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_dens_ptb_v_l, tend_rmpt_ptb_v_rk, tend_rmpt_ptb_v_l, tend_mom_x_v_rk, tend_mom_x_v_l, tend_mom_y_v_rk, tend_mom_y_v_l, tend_mom_z_v_rk, tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_dens_ptb_v_l, tend_rmpt_ptb_v_rk, tend_rmpt_ptb_v_l, tend_mom_x_v_rk, tend_mom_x_v_l, tend_mom_y_v_rk, tend_mom_y_v_l, tend_mom_z_v_rk, tend_mom_z_v_l
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
integer(4), intent(in) :: id
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sflux_rqv, precp_rate_cnv_r, precp_rate_cnv_s, tend_sflux_rqv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
precp_qa, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg, wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_a, tend_rmpt_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, tend_rqa_v_a
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_dens_ptb_v_l, tend_rmpt_ptb_v_rk, tend_rmpt_ptb_v_l, tend_mom_x_v_rk, tend_mom_x_v_l, tend_mom_y_v_rk, tend_mom_y_v_l, tend_mom_z_v_rk, tend_mom_z_v_l
@end domainDependant
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_rk, tend_dens_ptb_v_l, tend_rmpt_ptb_v_rk, tend_rmpt_ptb_v_l, tend_mom_x_v_rk, tend_mom_x_v_l, tend_mom_y_v_rk, tend_mom_y_v_l, tend_mom_z_v_rk, tend_mom_z_v_l
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
integer(4), intent(in) :: id
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
tend_rqa_v_rk, tend_rqa_v_l
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present)}
sflux_rqv, precp_rate_cnv_r, precp_rate_cnv_s, tend_sflux_rqv
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_NO_CHANGE), domPP(DOM_NO_CHANGE)}
precp_qa, tend_precp_rate_qa
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_NO_CHANGE), domPP(DOM4_NO_CHANGE)}
tend_tg, wg
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_NO_CHANGE), domPP(DOM5_NO_CHANGE)}
tg
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
tend_dens_ptb_v_a, tend_rmpt_ptb_v_a, tend_mom_x_v_a, tend_mom_y_v_a, tend_mom_z_v_a
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v, tend_rqa_v_a
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_u,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny_v), template(TIGHT_STENCIL)}
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
dens_ptb_v, rmpt_ptb_v, mom_x_v, mom_y_v, mom_z_v
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
end subroutine
@domainDependant{attribute(autoDom, host)}
mpi_calc
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT5_TIGHT_STENCIL), domPP(DOM5_TIGHT_STENCIL)}
rqa_v
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=297, combined=272, changed=131, unchanged=141, subroutine_definitions=9, calls=9, imports=21, data_definitions=0, save=0, parameter=0, openmp=0, style=3, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=88)
========== util =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/util.H90, hfpath: branches/reference/asuca-kij/Src/Util/util.f90
@domainDependant{attribute(autoDom, present)}
psea, psrf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, mptmp, pz_pf, pz_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
psea, psrf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, pz_pf, pz_ph, pres_ptb, temp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tempv = temp(kref,i,j) * ( 1._rp + r608 * qa(kref,i,j,id_qv) )
@end parallelRegion
#define DIAG_U_KERNEL1 `\
do k = nz_mn, nz_mx `\
dens_x(k,i,j) = ( dens_ptb(k,i,j) + dens_ptb(k,i+1,j) ) * 0.5_rp + dens_ref_f_x(k,i,j) `\
#define DIAG_U_KERNEL2 `\
if (i .eq. nx_mx) then `\
do k = nz_mn, nz_mx `\
vel_x(k,i,j) = 0.0_rp `\
end do `\
else `\
do k = nz_mn, nz_mx `\
vel_x(k,i,j) = mom_x_v(k,i,j) * jd_uf(k,i,j) / dens_x(k,i,j) `\
end do `\
#define DIAG_U_KERNEL3 `\
do k = nz_mn, nz_mx `\
dens_y(k,i,j) = ( dens_ptb(k,i,j) + dens_ptb(k,i,j+1) ) * 0.5_rp + dens_ref_f_y(k,i,j) `\
#define DIAG_U_KERNEL4 `\
if (j .eq. ny_mx) then `\
do k = nz_mn, nz_mx `\
vel_y(k,i,j) = 0.0_rp `\
end do `\
else `\
do k = nz_mn, nz_mx `\
vel_y(k,i,j) = mom_y_v(k,i,j) * jd_vf(k,i,j) / dens_y(k,i,j) `\
end do `\
#define DIAG_U_KERNEL5 `\
do k = nz_mn, nz_mx-1 `\
dens_z(k,i,j) = ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) `\ + dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) * 0.5_rp `\
#define DIAG_U_KERNEL6 `\
#define DIAG_U_KERNEL7 `\
do k = nz_mn, nz_mx `\
vel_z(k,i,j) = mom_z_v(k,i,j) * jd_ph(k,i,j) / dens_z(k,i,j) `\
integer(4) :: i, j, k
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_x_v, mom_y_v, mom_z_v, dens_ptb,
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
jd_uf, jd_vf, jd_ph
@end domainDependant
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_x, dens_y, dens_z
@end domainDependant
DIAG_U_KERNEL1
DIAG_U_KERNEL2
DIAG_U_KERNEL3
DIAG_U_KERNEL4
DIAG_U_KERNEL5
DIAG_U_KERNEL6
DIAG_U_KERNEL7
@domainDependant{domName(k, i,j), attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_x_v, mom_y_v, mom_z_v, dens_ptb,
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
jd_uf, jd_vf, jd_ph,
dens_x, dens_y, dens_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx-1,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL1
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL2
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx-1), template(TIGHT_STENCIL)}
DIAG_U_KERNEL3
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL4
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL5
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL6
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL7
@end parallelRegion
#define U2UI_KERNEL1() \
do k = 1, nz `\
vel_y_u = ( vel_y(k,i,j-1) + vel_y(k,i+1,j-1) `\ + vel_y(k,i,j) + vel_y(k,i+1,j) ) * 0.25_rp `\
vel_z_u = ( vel_z(k-1,i,j) + vel_z(k-1,i+1,j) `\ + vel_z(k,i,j) + vel_z(k,i+1,j) ) * 0.25_rp `\
vel_xi(k,i,j) = vel_x(k,i,j) * dxidx_uf(k,i,j) `\ + vel_y_u      * dxidy_uf(k,i,j) `\ + vel_z_u      * dxidz_uf(k,i,j) `\
#define U2UI_KERNEL2() \
do k = 1, nz `\
vel_x_v = ( vel_x(k,i-1,j) + vel_x(k,i-1,j+1) `\ + vel_x(k,i,j) + vel_x(k,i,j+1) ) * 0.25_rp `\
vel_z_v = ( vel_z(k-1,i,j) + vel_z(k-1,i,j+1) `\ + vel_z(k,i,j) + vel_z(k,i,j+1) ) * 0.25_rp `\
vel_yi(k,i,j) = vel_x_v        * dyidx_vf(k,i,j) `\ + vel_y(k,i,j) * dyidy_vf(k,i,j) `\ + vel_z_v      * dyidz_vf(k,i,j) `\
#define U2UI_KERNEL3() \
vel_zi(0,i,j) = 0._rp `\
do k = 1, nz-1 `\
vel_x_w = ( vel_x(k,i-1,j) + vel_x(k,i,j) `\ + vel_x(k+1,i-1,j) + vel_x(k+1,i,j) ) * 0.25_rp `\
vel_y_w = ( vel_y(k,i,j-1) + vel_y(k,i,j) `\ + vel_y(k+1,i,j-1) + vel_y(k+1,i,j) ) * 0.25_rp `\
vel_zi(k,i,j) = vel_x_w        * dzidx_ph(k,i,j) `\ + vel_y_w      * dzidy_ph(k,i,j) `\ + vel_z(k,i,j) * dzidz_ph(k,i,j) `\
end do `\
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_ph, dxidz_uf, dyidz_vf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL1()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL2()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL3()
@end parallelRegion
@domainDependant{domName(k, i,j), attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z,
dxidx_uf, dyidy_vf, dzidz_ph, dxidy_uf, dxidz_uf, dyidx_vf, dyidz_vf, dzidx_ph, dzidy_ph
@end domainDependant
integer(4) :: i, j
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z
dxidx_uf, dyidy_vf, dzidz_ph, dxidy_uf, dxidz_uf, dyidx_vf, dyidz_vf, dzidx_ph, dzidy_ph
@end domainDependant
U2UI_KERNEL1()
U2UI_KERNEL2()
U2UI_KERNEL3()
#define U2UI_WOZ_KERNEL1() \
do k = 1, nz `\
vel_y_u = ( vel_y(k,i,j-1) + vel_y(k,i+1,j-1) `\ + vel_y(k,i,j) + vel_y(k,i+1,j) ) * 0.25_rp `\
vel_xi(k,i,j) = vel_x(k,i,j) * dxidx_uf(k,i,j) `\ + vel_y_u      * dxidy_uf(k,i,j) `\
#define U2UI_WOZ_KERNEL2() \
do k = 1, nz `\
vel_x_v = ( vel_x(k,i-1,j) + vel_x(k,i-1,j+1) `\ + vel_x(k,i,j) + vel_x(k,i,j+1) ) * 0.25_rp `\
vel_yi(k,i,j) = vel_x_v      * dyidx_vf(k,i,j) `\ + vel_y(k,i,j) * dyidy_vf(k,i,j) `\
#define U2UI_WOZ_KERNEL3() \
vel_zi(0,i,j) = 0._rp `\
do k = 1, nz-1 `\
vel_x_w = ( vel_x(k,i-1,j) + vel_x(k,i,j) `\ + vel_x(k+1,i-1,j) + vel_x(k+1,i,j) ) * 0.25_rp `\
vel_y_w = ( vel_y(k,i,j-1) + vel_y(k,i,j) `\ + vel_y(k+1,i,j-1) + vel_y(k+1,i,j) ) * 0.25_rp `\
vel_zi(k,i,j) = vel_x_w      * dzidx_ph(k,i,j) `\ + vel_y_w      * dzidy_ph(k,i,j) `\
end do `\
#define U2UI_WOZ_KERNEL4() \
vel_x_w = ( vel_x(1,i-1,j) + vel_x(1,i,j) ) * 0.5_rp `\
vel_y_w = ( vel_y(1,i,j-1) + vel_y(1,i,j) ) * 0.5_rp `\
vel_zi(0,i,j) = vel_x_w      * dzidx_ph(0,i,j) `\ + vel_y_w      * dzidy_ph(0,i,j)
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL1()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL2()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL3()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL4()
@end parallelRegion
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph
@end domainDependant
integer(4):: i,j,k
U2UI_WOZ_KERNEL1()
U2UI_WOZ_KERNEL2()
U2UI_WOZ_KERNEL3()
U2UI_WOZ_KERNEL4()
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f_x, dens_ref_f_y, dens_ref_f
@end domainDependant
@domainDependant{attribute(autoDom, present)}
psea, psrf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
exner, mptmp, pz_pf, pz_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
@end parallelRegion
@domainDependant{attribute(autoDom, present)}
psea, psrf
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
pres_ref_f, pz_pf, pz_ph, pres_ptb, temp
@end domainDependant
@domainDependant{attribute(autoDom, present), accPP(AT4_TIGHT_STENCIL), domPP(DOM4_TIGHT_STENCIL)}
qa
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx,ny), template(TIGHT_STENCIL)}
tempv = temp(kref,i,j) * ( 1._rp + r608 * qa(kref,i,j,id_qv) )
@end parallelRegion
#define DIAG_U_KERNEL1 `\
do k = nz_mn, nz_mx `\
dens_x(k,i,j) = ( dens_ptb(k,i,j) + dens_ptb(k,i+1,j) ) * 0.5_rp + dens_ref_f_x(k,i,j) `\
#define DIAG_U_KERNEL2 `\
if (i .eq. nx_mx) then `\
do k = nz_mn, nz_mx `\
vel_x(k,i,j) = 0.0_rp `\
end do `\
else `\
do k = nz_mn, nz_mx `\
vel_x(k,i,j) = mom_x_v(k,i,j) * jd_uf(k,i,j) / dens_x(k,i,j) `\
end do `\
#define DIAG_U_KERNEL3 `\
do k = nz_mn, nz_mx `\
dens_y(k,i,j) = ( dens_ptb(k,i,j) + dens_ptb(k,i,j+1) ) * 0.5_rp + dens_ref_f_y(k,i,j) `\
#define DIAG_U_KERNEL4 `\
if (j .eq. ny_mx) then `\
do k = nz_mn, nz_mx `\
vel_y(k,i,j) = 0.0_rp `\
end do `\
else `\
do k = nz_mn, nz_mx `\
vel_y(k,i,j) = mom_y_v(k,i,j) * jd_vf(k,i,j) / dens_y(k,i,j) `\
end do `\
#define DIAG_U_KERNEL5 `\
do k = nz_mn, nz_mx-1 `\
dens_z(k,i,j) = ( dens_ptb  (k,i,j) + dens_ptb  (k+1,i,j) `\ + dens_ref_f(k,i,j) + dens_ref_f(k+1,i,j) ) * 0.5_rp `\
#define DIAG_U_KERNEL6 `\
#define DIAG_U_KERNEL7 `\
do k = nz_mn, nz_mx `\
vel_z(k,i,j) = mom_z_v(k,i,j) * jd_ph(k,i,j) / dens_z(k,i,j) `\
integer(4) :: i, j, k
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_x_v, mom_y_v, mom_z_v, dens_ptb,
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
jd_uf, jd_vf, jd_ph
@end domainDependant
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_x, dens_y, dens_z
@end domainDependant
DIAG_U_KERNEL1
DIAG_U_KERNEL2
DIAG_U_KERNEL3
DIAG_U_KERNEL4
DIAG_U_KERNEL5
DIAG_U_KERNEL6
DIAG_U_KERNEL7
@domainDependant{domName(k, i,j), attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_x, vel_y, vel_z, mom_x_v, mom_y_v, mom_z_v, dens_ptb,
dens_ref_f, dens_ref_f_x, dens_ref_f_y,
jd_uf, jd_vf, jd_ph,
dens_x, dens_y, dens_z
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx-1,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL1
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL2
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx-1), template(TIGHT_STENCIL)}
DIAG_U_KERNEL3
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL4
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL5
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL6
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(nx_mn,ny_mn), endAt(nx_mx,ny_mx), template(TIGHT_STENCIL)}
DIAG_U_KERNEL7
@end parallelRegion
#define U2UI_KERNEL1() \
do k = 1, nz `\
vel_y_u = ( vel_y(k,i,j-1) + vel_y(k,i+1,j-1) `\ + vel_y(k,i,j) + vel_y(k,i+1,j) ) * 0.25_rp `\
vel_z_u = ( vel_z(k-1,i,j) + vel_z(k-1,i+1,j) `\ + vel_z(k,i,j) + vel_z(k,i+1,j) ) * 0.25_rp `\
vel_xi(k,i,j) = vel_x(k,i,j) * dxidx_uf(k,i,j) `\ + vel_y_u      * dxidy_uf(k,i,j) `\ + vel_z_u      * dxidz_uf(k,i,j) `\
#define U2UI_KERNEL2() \
do k = 1, nz `\
vel_x_v = ( vel_x(k,i-1,j) + vel_x(k,i-1,j+1) `\ + vel_x(k,i,j) + vel_x(k,i,j+1) ) * 0.25_rp `\
vel_z_v = ( vel_z(k-1,i,j) + vel_z(k-1,i,j+1) `\ + vel_z(k,i,j) + vel_z(k,i,j+1) ) * 0.25_rp `\
vel_yi(k,i,j) = vel_x_v        * dyidx_vf(k,i,j) `\ + vel_y(k,i,j) * dyidy_vf(k,i,j) `\ + vel_z_v      * dyidz_vf(k,i,j) `\
#define U2UI_KERNEL3() \
vel_zi(0,i,j) = 0._rp `\
do k = 1, nz-1 `\
vel_x_w = ( vel_x(k,i-1,j) + vel_x(k,i,j) `\ + vel_x(k+1,i-1,j) + vel_x(k+1,i,j) ) * 0.25_rp `\
vel_y_w = ( vel_y(k,i,j-1) + vel_y(k,i,j) `\ + vel_y(k+1,i,j-1) + vel_y(k+1,i,j) ) * 0.25_rp `\
vel_zi(k,i,j) = vel_x_w        * dzidx_ph(k,i,j) `\ + vel_y_w      * dzidy_ph(k,i,j) `\ + vel_z(k,i,j) * dzidz_ph(k,i,j) `\
end do `\
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph,
dzidz_ph, dxidz_uf, dyidz_vf
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL1()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL2()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_KERNEL3()
@end parallelRegion
@domainDependant{domName(k, i,j), attribute(present, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z,
dxidx_uf, dyidy_vf, dzidz_ph, dxidy_uf, dxidz_uf, dyidx_vf, dyidz_vf, dzidx_ph, dzidy_ph
@end domainDependant
integer(4) :: i, j
@domainDependant{domName(k, i,j), attribute(host, autoDom), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, vel_z
dxidx_uf, dyidy_vf, dzidz_ph, dxidy_uf, dxidz_uf, dyidx_vf, dyidz_vf, dzidx_ph, dzidy_ph
@end domainDependant
U2UI_KERNEL1()
U2UI_KERNEL2()
U2UI_KERNEL3()
#define U2UI_WOZ_KERNEL1() \
do k = 1, nz `\
vel_y_u = ( vel_y(k,i,j-1) + vel_y(k,i+1,j-1) `\ + vel_y(k,i,j) + vel_y(k,i+1,j) ) * 0.25_rp `\
vel_xi(k,i,j) = vel_x(k,i,j) * dxidx_uf(k,i,j) `\ + vel_y_u      * dxidy_uf(k,i,j) `\
#define U2UI_WOZ_KERNEL2() \
do k = 1, nz `\
vel_x_v = ( vel_x(k,i-1,j) + vel_x(k,i-1,j+1) `\ + vel_x(k,i,j) + vel_x(k,i,j+1) ) * 0.25_rp `\
vel_yi(k,i,j) = vel_x_v      * dyidx_vf(k,i,j) `\ + vel_y(k,i,j) * dyidy_vf(k,i,j) `\
#define U2UI_WOZ_KERNEL3() \
vel_zi(0,i,j) = 0._rp `\
do k = 1, nz-1 `\
vel_x_w = ( vel_x(k,i-1,j) + vel_x(k,i,j) `\ + vel_x(k+1,i-1,j) + vel_x(k+1,i,j) ) * 0.25_rp `\
vel_y_w = ( vel_y(k,i,j-1) + vel_y(k,i,j) `\ + vel_y(k+1,i,j-1) + vel_y(k+1,i,j) ) * 0.25_rp `\
vel_zi(k,i,j) = vel_x_w      * dzidx_ph(k,i,j) `\ + vel_y_w      * dzidy_ph(k,i,j) `\
end do `\
#define U2UI_WOZ_KERNEL4() \
vel_x_w = ( vel_x(1,i-1,j) + vel_x(1,i,j) ) * 0.5_rp `\
vel_y_w = ( vel_y(1,i,j-1) + vel_y(1,i,j) ) * 0.5_rp `\
vel_zi(0,i,j) = vel_x_w      * dzidx_ph(0,i,j) `\ + vel_y_w      * dzidy_ph(0,i,j)
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph
@end domainDependant
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL1()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL2()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL3()
@end parallelRegion
@parallelRegion{domName(i,j), domSize(nx_mn:nx_mx,ny_mn:ny_mx), startAt(0,0), endAt(nx+1,ny+1), template(TIGHT_STENCIL)}
U2UI_WOZ_KERNEL4()
@end parallelRegion
@domainDependant{domName(k, i,j), attribute(autoDom,present), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
vel_xi, vel_yi, vel_zi, vel_x, vel_y, dxidx_uf, dyidy_vf, dxidy_uf, dyidx_vf, dzidx_ph, dzidy_ph
@end domainDependant
integer(4):: i,j,k
U2UI_WOZ_KERNEL1()
U2UI_WOZ_KERNEL2()
U2UI_WOZ_KERNEL3()
U2UI_WOZ_KERNEL4()
@domainDependant{attribute(autoDom, host), accPP(AT_TIGHT_STENCIL), domPP(DOM_TIGHT_STENCIL)}
dens_ref_f_x, dens_ref_f_y, dens_ref_f
@end domainDependant
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1569, combined=1414, changed=218, unchanged=1196, subroutine_definitions=6, calls=4, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=5, parallel_loops=8, device_data_init=0, implementation_scheme=6, commented=1, radiation=0, storage_order=0, data_spec=5, other=181)
========== yy_intp =============
refpath: branches/hybrid/asuca-kij/HybridSources/Util/yy_intp.h90, hfpath: branches/reference/asuca-kij/Src/Util/yy_intp.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=52, combined=52, changed=1, unchanged=51, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== grd_parm =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/grd_parm.f90, hfpath: branches/reference/asuca-kij/Src/Ini/grd_parm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=75, combined=72, changed=0, unchanged=72, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== ideal_make_grid =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/ideal_make_grid.f90, hfpath: branches/reference/asuca-kij/Src/Ini/ideal_make_grid.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=177, combined=162, changed=5, unchanged=157, subroutine_definitions=0, calls=2, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== interph2 =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/interph2.f90, hfpath: branches/reference/asuca-kij/Src/Ini/interph2.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=232, combined=222, changed=1, unchanged=221, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=1, other=0)
========== make_grid =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/make_grid.f90, hfpath: branches/reference/asuca-kij/Src/Ini/make_grid.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=311, combined=269, changed=3, unchanged=266, subroutine_definitions=0, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mapfactor =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mapfactor.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mapfactor.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=167, combined=145, changed=3, unchanged=142, subroutine_definitions=2, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== mapproj_single =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mapproj_single.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mapproj_single.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=511, combined=484, changed=0, unchanged=484, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkg =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkg.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkg.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=769, combined=545, changed=2, unchanged=543, subroutine_definitions=0, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=675, combined=396, changed=1, unchanged=395, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_asuca =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_asuca.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_asuca.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=990, combined=687, changed=1, unchanged=686, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_com =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_com.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_com.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1447, combined=1022, changed=0, unchanged=1022, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_input =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_input.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_input.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=353, combined=179, changed=0, unchanged=179, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_mfin =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_mfin.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_mfin.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=332, combined=237, changed=1, unchanged=236, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_nhm =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_nhm.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_nhm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1222, combined=884, changed=2, unchanged=882, subroutine_definitions=0, calls=1, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_ozn =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_ozn.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_ozn.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=748, combined=660, changed=0, unchanged=660, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_prm =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_prm.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_prm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=8, combined=8, changed=0, unchanged=8, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mkib_vars =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/mkib_vars.f90, hfpath: branches/reference/asuca-kij/Src/Ini/mkib_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=57, combined=57, changed=0, unchanged=57, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== nflutlty3 =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/nflutlty3.f90, hfpath: branches/reference/asuca-kij/Src/Ini/nflutlty3.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=175, combined=163, changed=0, unchanged=163, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== nhmcst =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/nhmcst.f90, hfpath: branches/reference/asuca-kij/Src/Ini/nhmcst.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=385, combined=369, changed=5, unchanged=364, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=5, other=0)
========== prep =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/prep.f90, hfpath: branches/reference/asuca-kij/Src/Ini/prep.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=319, combined=266, changed=3, unchanged=263, subroutine_definitions=0, calls=0, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== prepare_nest =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/prepare_nest.f90, hfpath: branches/reference/asuca-kij/Src/Ini/prepare_nest.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=16, changed=0, unchanged=16, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== rs_tab =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/rs_tab.f90, hfpath: branches/reference/asuca-kij/Src/Ini/rs_tab.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=73, combined=69, changed=1, unchanged=68, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== sktrue =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/sktrue.f90, hfpath: branches/reference/asuca-kij/Src/Ini/sktrue.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=107, combined=103, changed=1, unchanged=102, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== vardef =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Ini/vardef.f90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/vardef.f90

implicit none

implicit none
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=7, combined=7, changed=5, unchanged=2, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=3, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=2)
========== h_phys_ps_m =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_ps_m.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_ps_m.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=57, combined=36, changed=0, unchanged=36, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_pwv =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_pwv.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_pwv.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=181, combined=102, changed=0, unchanged=102, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_rh =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_rh.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_rh.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=182, combined=109, changed=0, unchanged=109, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_rvl =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_rvl.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_rvl.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=142, combined=95, changed=0, unchanged=95, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_sfc =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_sfc.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_sfc.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=357, combined=216, changed=0, unchanged=216, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_tb =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_tb.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_tb.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=661, combined=349, changed=1, unchanged=348, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_temp =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_temp.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_temp.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=175, combined=105, changed=0, unchanged=105, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_u =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_u.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_u.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=66, combined=44, changed=0, unchanged=44, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== h_phys_v =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/h_phys_v.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/h_phys_v.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=66, combined=44, changed=0, unchanged=44, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== innovation =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/innovation.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/innovation.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=264, combined=243, changed=0, unchanged=243, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== innovation_comm =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/innovation_comm.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/innovation_comm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=84, combined=77, changed=0, unchanged=77, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== innovation_diag =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/innovation_diag.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/innovation_diag.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=588, combined=517, changed=0, unchanged=517, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== innovation_vars =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/innovation_vars.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/innovation_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=85, combined=84, changed=0, unchanged=84, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== obs_input =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/obs_input.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/obs_input.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=20, combined=20, changed=0, unchanged=20, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== obs_input_cda =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/obs_input_cda.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/obs_input_cda.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=418, combined=369, changed=0, unchanged=369, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== obs_input_nml =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/obs_input_nml.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/obs_input_nml.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=131, combined=126, changed=0, unchanged=126, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== obs_manager =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/obs_manager.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/obs_manager.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=944, combined=806, changed=0, unchanged=806, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== operator_element =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/operator_element.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/operator_element.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=375, combined=293, changed=0, unchanged=293, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== operator_physics =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/operator_physics.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/operator_physics.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=149, combined=76, changed=0, unchanged=76, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== operator_space =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/operator_space.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/operator_space.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=110, combined=107, changed=0, unchanged=107, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== varqc =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/varqc.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/varqc.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=67, combined=65, changed=0, unchanged=65, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== wrapper_physlib =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/wrapper_physlib.f90, hfpath: branches/reference/asuca-kij/Src/Innovation/wrapper_physlib.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=437, combined=155, changed=0, unchanged=155, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== wrapper_rttov =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Innovation/wrapper_rttov.F90, hfpath: branches/reference/asuca-kij/Src/Innovation/wrapper_rttov.F90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1094, combined=818, changed=0, unchanged=818, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== asuca =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Main/asuca.F90, hfpath: branches/reference/asuca-kij/Src/Main/asuca.f90
#ifdef GPU
#endif
#ifdef GPU
#else
#endif
#ifdef GPU
integer(4) :: istat, device_id
type (cudaDeviceProp) :: prop
#endif
#ifdef GPU
#else
#endif
#ifdef GPU
#endif
#ifdef GPU
#else
#endif
#ifdef GPU
integer(4) :: istat, device_id
type (cudaDeviceProp) :: prop
#endif
#ifdef GPU
#else
#endif
Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=90, combined=89, changed=23, unchanged=66, subroutine_definitions=0, calls=3, imports=6, data_definitions=0, save=0, parameter=0, openmp=0, style=1, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=12)
========== rest2grads =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Misc/rest2grads.f90, hfpath: branches/reference/asuca-kij/Src/Misc/rest2grads.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=53, combined=50, changed=1, unchanged=49, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== parameter_control =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Setup/parameter_control.f90, hfpath: branches/reference/asuca-kij/Src/Setup/parameter_control.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=209, combined=192, changed=1, unchanged=191, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== gabls3_test =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Tests/gabls3_test.f90, hfpath: None
program main_gabls3
implicit none
integer(4) :: nx, itend, iflen, ier, skind0, imymodel, levflag
character(255) :: skind_string
nx = iget('cmd_nx')
itend = iget('cmd_time')
imymodel = iget('cmd_mymodel')
if (imymodel == 25) then
levflag = mymodel25
else if (imymodel == 30) then
levflag = mymodel3
else
STOP
end if
if (ier /= 0) then
STOP
end if
if (skind_string == "land") then
skind0 = kind_land
else if (skind_string == "sea") then
skind0 = kind_sea
else if (skind_string == "snow") then
skind0 = kind_snow
else if (skind_string == "ice") then
skind0 = kind_ice
else
STOP
end if
program main_gabls3
implicit none
integer(4) :: nx, itend, iflen, ier, skind0, imymodel, levflag
character(255) :: skind_string
nx = iget('cmd_nx')
itend = iget('cmd_time')
imymodel = iget('cmd_mymodel')
if (imymodel == 25) then
levflag = mymodel25
else if (imymodel == 30) then
levflag = mymodel3
else
STOP
end if
if (ier /= 0) then
STOP
end if
if (skind_string == "land") then
skind0 = kind_land
else if (skind_string == "sea") then
skind0 = kind_sea
else if (skind_string == "snow") then
skind0 = kind_snow
else if (skind_string == "ice") then
skind0 = kind_ice
else
STOP
end if
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=38, combined=38, changed=38, unchanged=0, subroutine_definitions=0, calls=3, imports=4, data_definitions=0, save=0, parameter=0, openmp=0, style=3, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=28)
========== rad_pp_test =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Tests/rad_pp_test.f90, hfpath: None
program main_pp
implicit none
stop
program main_pp
implicit none
stop
Analysis(all=401, h90=0, f90=0, whitespace=22, comments=91, stripped=9, combined=9, changed=9, unchanged=0, subroutine_definitions=0, calls=2, imports=2, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=2, storage_order=0, data_spec=0, other=3)
========== debug =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Util/debug.f90, hfpath: branches/reference/asuca-kij/Src/Util/debug.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=449, combined=401, changed=1, unchanged=400, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== aprm =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/aprm.f90, hfpath: branches/reference/asuca-kij/Src/Var/aprm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=76, combined=76, changed=0, unchanged=76, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== avar =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/avar.f90, hfpath: branches/reference/asuca-kij/Src/Var/avar.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=35, combined=35, changed=0, unchanged=35, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== bger_stat =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/bger_stat.f90, hfpath: branches/reference/asuca-kij/Src/Var/bger_stat.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=95, combined=85, changed=0, unchanged=85, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== bgstate =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/bgstate.f90, hfpath: branches/reference/asuca-kij/Src/Var/bgstate.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=333, combined=267, changed=1, unchanged=266, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== bvar =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/bvar.f90, hfpath: branches/reference/asuca-kij/Src/Var/bvar.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=509, combined=454, changed=0, unchanged=454, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== consistency_check =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/consistency_check.f90, hfpath: branches/reference/asuca-kij/Src/Var/consistency_check.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=83, combined=81, changed=0, unchanged=81, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== cost =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/cost.f90, hfpath: branches/reference/asuca-kij/Src/Var/cost.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=235, combined=219, changed=0, unchanged=219, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== ctrl_factory =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/ctrl_factory.f90, hfpath: branches/reference/asuca-kij/Src/Var/ctrl_factory.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=274, combined=270, changed=0, unchanged=270, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== ctrl_proxy =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/ctrl_proxy.f90, hfpath: branches/reference/asuca-kij/Src/Var/ctrl_proxy.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=225, combined=219, changed=0, unchanged=219, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== cutoff_time =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/cutoff_time.f90, hfpath: branches/reference/asuca-kij/Src/Var/cutoff_time.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=30, combined=24, changed=0, unchanged=24, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== eispack =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/eispack.f90, hfpath: branches/reference/asuca-kij/Src/Var/eispack.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=8546, combined=8522, changed=1, unchanged=8521, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== iterator =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/iterator.f90, hfpath: branches/reference/asuca-kij/Src/Var/iterator.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=35, combined=33, changed=0, unchanged=33, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== minimizer =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/minimizer.f90, hfpath: branches/reference/asuca-kij/Src/Var/minimizer.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=395, combined=338, changed=0, unchanged=338, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== model_operator_fake =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/model_operator_fake.f90, hfpath: branches/reference/asuca-kij/Src/Var/model_operator_fake.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=13, combined=13, changed=0, unchanged=13, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== monitda =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/monitda.f90, hfpath: branches/reference/asuca-kij/Src/Var/monitda.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=40, combined=27, changed=0, unchanged=27, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== mpilbfgs94 =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/mpilbfgs94.f90, hfpath: branches/reference/asuca-kij/Src/Var/mpilbfgs94.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1025, combined=988, changed=1, unchanged=987, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=1)
========== mpirfilter =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/mpirfilter.f90, hfpath: branches/reference/asuca-kij/Src/Var/mpirfilter.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=820, combined=739, changed=0, unchanged=739, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== optim =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/optim.f90, hfpath: branches/reference/asuca-kij/Src/Var/optim.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=158, combined=148, changed=0, unchanged=148, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== outputda =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/outputda.f90, hfpath: branches/reference/asuca-kij/Src/Var/outputda.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=30, combined=25, changed=0, unchanged=25, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== outputda_grads =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/outputda_grads.f90, hfpath: branches/reference/asuca-kij/Src/Var/outputda_grads.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=172, combined=165, changed=0, unchanged=165, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== outputda_nusdas =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/outputda_nusdas.f90, hfpath: branches/reference/asuca-kij/Src/Var/outputda_nusdas.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=1101, combined=1007, changed=0, unchanged=1007, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== outputda_vars =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/outputda_vars.f90, hfpath: branches/reference/asuca-kij/Src/Var/outputda_vars.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=32, combined=32, changed=0, unchanged=32, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== penalty =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/penalty.f90, hfpath: branches/reference/asuca-kij/Src/Var/penalty.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=43, combined=37, changed=0, unchanged=37, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== penalty_divflx =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/penalty_divflx.f90, hfpath: branches/reference/asuca-kij/Src/Var/penalty_divflx.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=675, combined=546, changed=0, unchanged=546, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== postda =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/postda.f90, hfpath: branches/reference/asuca-kij/Src/Var/postda.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=290, combined=263, changed=0, unchanged=263, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== rf_lib =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/rf_lib.f90, hfpath: branches/reference/asuca-kij/Src/Var/rf_lib.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=797, combined=773, changed=1, unchanged=772, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=1, radiation=0, storage_order=0, data_spec=0, other=0)
========== trajectory =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trajectory.f90, hfpath: branches/reference/asuca-kij/Src/Var/trajectory.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=109, combined=109, changed=0, unchanged=109, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=165, combined=160, changed=0, unchanged=160, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans_cd =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans_cd.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans_cd.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=5, combined=5, changed=0, unchanged=5, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans_element =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans_element.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans_element.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=841, combined=658, changed=0, unchanged=658, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans_eof =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans_eof.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans_eof.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=224, combined=185, changed=0, unchanged=185, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans_rf =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans_rf.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans_rf.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=145, combined=108, changed=0, unchanged=108, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== trans_vc =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/trans_vc.f90, hfpath: branches/reference/asuca-kij/Src/Var/trans_vc.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=133, combined=115, changed=0, unchanged=115, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== varda =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/varda.f90, hfpath: branches/reference/asuca-kij/Src/Var/varda.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=180, combined=128, changed=0, unchanged=128, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== varda_conf =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/varda_conf.f90, hfpath: branches/reference/asuca-kij/Src/Var/varda_conf.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=116, combined=100, changed=1, unchanged=99, subroutine_definitions=0, calls=0, imports=1, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== vert_coord =============
refpath: branches/hybrid/asuca-kij/Framework/Src/Var/vert_coord.f90, hfpath: branches/reference/asuca-kij/Src/Var/vert_coord.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=113, combined=107, changed=0, unchanged=107, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== asc2lfm =============
refpath: branches/hybrid/asuca-kij/Framework/Tools/asc2lfm/asc2lfm.f90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/asc2lfm.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=591, combined=512, changed=0, unchanged=512, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== const =============
refpath: branches/hybrid/asuca-kij/Framework/Tools/asc2lfm/const.f90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/const.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=116, combined=111, changed=0, unchanged=111, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== vardef =============
refpath: branches/hybrid/asuca-kij/Framework/Tools/asc2lfm/vardef.f90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/vardef.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=8, combined=8, changed=0, unchanged=8, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)
========== z2p =============
refpath: branches/hybrid/asuca-kij/Framework/Tools/asc2lfm/z2p.f90, hfpath: branches/reference/asuca-kij/Tools/asc2lfm/z2p.f90


Analysis(all=401, h90=0, f90=401, whitespace=22, comments=91, stripped=199, combined=194, changed=0, unchanged=194, subroutine_definitions=0, calls=0, imports=0, data_definitions=0, save=0, parameter=0, openmp=0, style=0, parallel_loops=0, device_data_init=0, implementation_scheme=0, commented=0, radiation=0, storage_order=0, data_spec=0, other=0)

========== TOTAL =============
Analysis(all=126315, h90=0, f90=117894, whitespace=6930, comments=28665, stripped=114049, combined=99206, changed=14519, unchanged=84687, subroutine_definitions=490, calls=891, imports=760, data_definitions=73, save=21, parameter=275, openmp=0, style=447, parallel_loops=29, device_data_init=136, implementation_scheme=162, commented=88, radiation=2059, storage_order=116, data_spec=2254, other=6718)